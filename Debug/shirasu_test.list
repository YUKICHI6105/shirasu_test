
shirasu_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009188  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  08009294  08009294  00019294  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009334  08009334  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  08009334  08009334  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009334  08009334  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009334  08009334  00019334  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009338  08009338  00019338  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800933c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001278  200001e0  0800951c  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001458  0800951c  00021458  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011c45  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000030e6  00000000  00000000  00031e4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001008  00000000  00000000  00034f38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e80  00000000  00000000  00035f40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00006a36  00000000  00000000  00036dc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013a1d  00000000  00000000  0003d7f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d877  00000000  00000000  00051213  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000dea8a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004514  00000000  00000000  000deadc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001e0 	.word	0x200001e0
 8000128:	00000000 	.word	0x00000000
 800012c:	0800927c 	.word	0x0800927c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001e4 	.word	0x200001e4
 8000148:	0800927c 	.word	0x0800927c

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000160:	f000 fb06 	bl	8000770 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000164:	f000 f809 	bl	800017a <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000168:	f000 f92a 	bl	80003c0 <MX_GPIO_Init>
  MX_TIM1_Init();
 800016c:	f000 f860 	bl	8000230 <MX_TIM1_Init>
  MX_USB_DEVICE_Init();
 8000170:	f007 ff0c 	bl	8007f8c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
main_cpp();
 8000174:	f000 fac4 	bl	8000700 <main_cpp>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000178:	e7fe      	b.n	8000178 <main+0x1c>

0800017a <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800017a:	b580      	push	{r7, lr}
 800017c:	b094      	sub	sp, #80	; 0x50
 800017e:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000180:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000184:	2228      	movs	r2, #40	; 0x28
 8000186:	2100      	movs	r1, #0
 8000188:	4618      	mov	r0, r3
 800018a:	f008 fbf5 	bl	8008978 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800018e:	f107 0314 	add.w	r3, r7, #20
 8000192:	2200      	movs	r2, #0
 8000194:	601a      	str	r2, [r3, #0]
 8000196:	605a      	str	r2, [r3, #4]
 8000198:	609a      	str	r2, [r3, #8]
 800019a:	60da      	str	r2, [r3, #12]
 800019c:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800019e:	1d3b      	adds	r3, r7, #4
 80001a0:	2200      	movs	r2, #0
 80001a2:	601a      	str	r2, [r3, #0]
 80001a4:	605a      	str	r2, [r3, #4]
 80001a6:	609a      	str	r2, [r3, #8]
 80001a8:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80001aa:	2301      	movs	r3, #1
 80001ac:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80001ae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80001b4:	2300      	movs	r3, #0
 80001b6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001b8:	2301      	movs	r3, #1
 80001ba:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001bc:	2302      	movs	r3, #2
 80001be:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80001c0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001c4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80001c6:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80001ca:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001cc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80001d0:	4618      	mov	r0, r3
 80001d2:	f002 fa85 	bl	80026e0 <HAL_RCC_OscConfig>
 80001d6:	4603      	mov	r3, r0
 80001d8:	2b00      	cmp	r3, #0
 80001da:	d001      	beq.n	80001e0 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80001dc:	f000 f91e 	bl	800041c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001e0:	230f      	movs	r3, #15
 80001e2:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80001e4:	2302      	movs	r3, #2
 80001e6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001e8:	2300      	movs	r3, #0
 80001ea:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80001ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80001f0:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001f2:	2300      	movs	r3, #0
 80001f4:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80001f6:	f107 0314 	add.w	r3, r7, #20
 80001fa:	2102      	movs	r1, #2
 80001fc:	4618      	mov	r0, r3
 80001fe:	f002 fcf1 	bl	8002be4 <HAL_RCC_ClockConfig>
 8000202:	4603      	mov	r3, r0
 8000204:	2b00      	cmp	r3, #0
 8000206:	d001      	beq.n	800020c <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000208:	f000 f908 	bl	800041c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800020c:	2310      	movs	r3, #16
 800020e:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000210:	2300      	movs	r3, #0
 8000212:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000214:	1d3b      	adds	r3, r7, #4
 8000216:	4618      	mov	r0, r3
 8000218:	f002 fe4a 	bl	8002eb0 <HAL_RCCEx_PeriphCLKConfig>
 800021c:	4603      	mov	r3, r0
 800021e:	2b00      	cmp	r3, #0
 8000220:	d001      	beq.n	8000226 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000222:	f000 f8fb 	bl	800041c <Error_Handler>
  }
}
 8000226:	bf00      	nop
 8000228:	3750      	adds	r7, #80	; 0x50
 800022a:	46bd      	mov	sp, r7
 800022c:	bd80      	pop	{r7, pc}
	...

08000230 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000230:	b580      	push	{r7, lr}
 8000232:	b096      	sub	sp, #88	; 0x58
 8000234:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000236:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800023a:	2200      	movs	r2, #0
 800023c:	601a      	str	r2, [r3, #0]
 800023e:	605a      	str	r2, [r3, #4]
 8000240:	609a      	str	r2, [r3, #8]
 8000242:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000244:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000248:	2200      	movs	r2, #0
 800024a:	601a      	str	r2, [r3, #0]
 800024c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800024e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000252:	2200      	movs	r2, #0
 8000254:	601a      	str	r2, [r3, #0]
 8000256:	605a      	str	r2, [r3, #4]
 8000258:	609a      	str	r2, [r3, #8]
 800025a:	60da      	str	r2, [r3, #12]
 800025c:	611a      	str	r2, [r3, #16]
 800025e:	615a      	str	r2, [r3, #20]
 8000260:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000262:	1d3b      	adds	r3, r7, #4
 8000264:	2220      	movs	r2, #32
 8000266:	2100      	movs	r1, #0
 8000268:	4618      	mov	r0, r3
 800026a:	f008 fb85 	bl	8008978 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800026e:	4b52      	ldr	r3, [pc, #328]	; (80003b8 <MX_TIM1_Init+0x188>)
 8000270:	4a52      	ldr	r2, [pc, #328]	; (80003bc <MX_TIM1_Init+0x18c>)
 8000272:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 23999;
 8000274:	4b50      	ldr	r3, [pc, #320]	; (80003b8 <MX_TIM1_Init+0x188>)
 8000276:	f645 52bf 	movw	r2, #23999	; 0x5dbf
 800027a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800027c:	4b4e      	ldr	r3, [pc, #312]	; (80003b8 <MX_TIM1_Init+0x188>)
 800027e:	2200      	movs	r2, #0
 8000280:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1499;
 8000282:	4b4d      	ldr	r3, [pc, #308]	; (80003b8 <MX_TIM1_Init+0x188>)
 8000284:	f240 52db 	movw	r2, #1499	; 0x5db
 8000288:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800028a:	4b4b      	ldr	r3, [pc, #300]	; (80003b8 <MX_TIM1_Init+0x188>)
 800028c:	2200      	movs	r2, #0
 800028e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000290:	4b49      	ldr	r3, [pc, #292]	; (80003b8 <MX_TIM1_Init+0x188>)
 8000292:	2200      	movs	r2, #0
 8000294:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000296:	4b48      	ldr	r3, [pc, #288]	; (80003b8 <MX_TIM1_Init+0x188>)
 8000298:	2200      	movs	r2, #0
 800029a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800029c:	4846      	ldr	r0, [pc, #280]	; (80003b8 <MX_TIM1_Init+0x188>)
 800029e:	f002 febd 	bl	800301c <HAL_TIM_Base_Init>
 80002a2:	4603      	mov	r3, r0
 80002a4:	2b00      	cmp	r3, #0
 80002a6:	d001      	beq.n	80002ac <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80002a8:	f000 f8b8 	bl	800041c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80002ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80002b0:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80002b2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80002b6:	4619      	mov	r1, r3
 80002b8:	483f      	ldr	r0, [pc, #252]	; (80003b8 <MX_TIM1_Init+0x188>)
 80002ba:	f003 f851 	bl	8003360 <HAL_TIM_ConfigClockSource>
 80002be:	4603      	mov	r3, r0
 80002c0:	2b00      	cmp	r3, #0
 80002c2:	d001      	beq.n	80002c8 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80002c4:	f000 f8aa 	bl	800041c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 80002c8:	483b      	ldr	r0, [pc, #236]	; (80003b8 <MX_TIM1_Init+0x188>)
 80002ca:	f002 fef6 	bl	80030ba <HAL_TIM_OC_Init>
 80002ce:	4603      	mov	r3, r0
 80002d0:	2b00      	cmp	r3, #0
 80002d2:	d001      	beq.n	80002d8 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80002d4:	f000 f8a2 	bl	800041c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80002d8:	2300      	movs	r3, #0
 80002da:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80002dc:	2300      	movs	r3, #0
 80002de:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80002e0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80002e4:	4619      	mov	r1, r3
 80002e6:	4834      	ldr	r0, [pc, #208]	; (80003b8 <MX_TIM1_Init+0x188>)
 80002e8:	f003 fc40 	bl	8003b6c <HAL_TIMEx_MasterConfigSynchronization>
 80002ec:	4603      	mov	r3, r0
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	d001      	beq.n	80002f6 <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 80002f2:	f000 f893 	bl	800041c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 80002f6:	2330      	movs	r3, #48	; 0x30
 80002f8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 499;
 80002fa:	f240 13f3 	movw	r3, #499	; 0x1f3
 80002fe:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8000300:	2302      	movs	r3, #2
 8000302:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_LOW;
 8000304:	2308      	movs	r3, #8
 8000306:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000308:	2300      	movs	r3, #0
 800030a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800030c:	2300      	movs	r3, #0
 800030e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000310:	2300      	movs	r3, #0
 8000312:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000314:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000318:	2200      	movs	r2, #0
 800031a:	4619      	mov	r1, r3
 800031c:	4826      	ldr	r0, [pc, #152]	; (80003b8 <MX_TIM1_Init+0x188>)
 800031e:	f002 ffc7 	bl	80032b0 <HAL_TIM_OC_ConfigChannel>
 8000322:	4603      	mov	r3, r0
 8000324:	2b00      	cmp	r3, #0
 8000326:	d001      	beq.n	800032c <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8000328:	f000 f878 	bl	800041c <Error_Handler>
  }
  sConfigOC.Pulse = 999;
 800032c:	f240 33e7 	movw	r3, #999	; 0x3e7
 8000330:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000332:	2300      	movs	r3, #0
 8000334:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000336:	2300      	movs	r3, #0
 8000338:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800033a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800033e:	2204      	movs	r2, #4
 8000340:	4619      	mov	r1, r3
 8000342:	481d      	ldr	r0, [pc, #116]	; (80003b8 <MX_TIM1_Init+0x188>)
 8000344:	f002 ffb4 	bl	80032b0 <HAL_TIM_OC_ConfigChannel>
 8000348:	4603      	mov	r3, r0
 800034a:	2b00      	cmp	r3, #0
 800034c:	d001      	beq.n	8000352 <MX_TIM1_Init+0x122>
  {
    Error_Handler();
 800034e:	f000 f865 	bl	800041c <Error_Handler>
  }
  sConfigOC.Pulse = 1499;
 8000352:	f240 53db 	movw	r3, #1499	; 0x5db
 8000356:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8000358:	2302      	movs	r3, #2
 800035a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_LOW;
 800035c:	2308      	movs	r3, #8
 800035e:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000360:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000364:	2208      	movs	r2, #8
 8000366:	4619      	mov	r1, r3
 8000368:	4813      	ldr	r0, [pc, #76]	; (80003b8 <MX_TIM1_Init+0x188>)
 800036a:	f002 ffa1 	bl	80032b0 <HAL_TIM_OC_ConfigChannel>
 800036e:	4603      	mov	r3, r0
 8000370:	2b00      	cmp	r3, #0
 8000372:	d001      	beq.n	8000378 <MX_TIM1_Init+0x148>
  {
    Error_Handler();
 8000374:	f000 f852 	bl	800041c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000378:	2300      	movs	r3, #0
 800037a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800037c:	2300      	movs	r3, #0
 800037e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000380:	2300      	movs	r3, #0
 8000382:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000384:	2300      	movs	r3, #0
 8000386:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000388:	2300      	movs	r3, #0
 800038a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800038c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000390:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000392:	2300      	movs	r3, #0
 8000394:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000396:	1d3b      	adds	r3, r7, #4
 8000398:	4619      	mov	r1, r3
 800039a:	4807      	ldr	r0, [pc, #28]	; (80003b8 <MX_TIM1_Init+0x188>)
 800039c:	f003 fc44 	bl	8003c28 <HAL_TIMEx_ConfigBreakDeadTime>
 80003a0:	4603      	mov	r3, r0
 80003a2:	2b00      	cmp	r3, #0
 80003a4:	d001      	beq.n	80003aa <MX_TIM1_Init+0x17a>
  {
    Error_Handler();
 80003a6:	f000 f839 	bl	800041c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80003aa:	4803      	ldr	r0, [pc, #12]	; (80003b8 <MX_TIM1_Init+0x188>)
 80003ac:	f000 f88c 	bl	80004c8 <HAL_TIM_MspPostInit>

}
 80003b0:	bf00      	nop
 80003b2:	3758      	adds	r7, #88	; 0x58
 80003b4:	46bd      	mov	sp, r7
 80003b6:	bd80      	pop	{r7, pc}
 80003b8:	200001fc 	.word	0x200001fc
 80003bc:	40012c00 	.word	0x40012c00

080003c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003c0:	b480      	push	{r7}
 80003c2:	b085      	sub	sp, #20
 80003c4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80003c6:	4b14      	ldr	r3, [pc, #80]	; (8000418 <MX_GPIO_Init+0x58>)
 80003c8:	699b      	ldr	r3, [r3, #24]
 80003ca:	4a13      	ldr	r2, [pc, #76]	; (8000418 <MX_GPIO_Init+0x58>)
 80003cc:	f043 0320 	orr.w	r3, r3, #32
 80003d0:	6193      	str	r3, [r2, #24]
 80003d2:	4b11      	ldr	r3, [pc, #68]	; (8000418 <MX_GPIO_Init+0x58>)
 80003d4:	699b      	ldr	r3, [r3, #24]
 80003d6:	f003 0320 	and.w	r3, r3, #32
 80003da:	60fb      	str	r3, [r7, #12]
 80003dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003de:	4b0e      	ldr	r3, [pc, #56]	; (8000418 <MX_GPIO_Init+0x58>)
 80003e0:	699b      	ldr	r3, [r3, #24]
 80003e2:	4a0d      	ldr	r2, [pc, #52]	; (8000418 <MX_GPIO_Init+0x58>)
 80003e4:	f043 0304 	orr.w	r3, r3, #4
 80003e8:	6193      	str	r3, [r2, #24]
 80003ea:	4b0b      	ldr	r3, [pc, #44]	; (8000418 <MX_GPIO_Init+0x58>)
 80003ec:	699b      	ldr	r3, [r3, #24]
 80003ee:	f003 0304 	and.w	r3, r3, #4
 80003f2:	60bb      	str	r3, [r7, #8]
 80003f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003f6:	4b08      	ldr	r3, [pc, #32]	; (8000418 <MX_GPIO_Init+0x58>)
 80003f8:	699b      	ldr	r3, [r3, #24]
 80003fa:	4a07      	ldr	r2, [pc, #28]	; (8000418 <MX_GPIO_Init+0x58>)
 80003fc:	f043 0308 	orr.w	r3, r3, #8
 8000400:	6193      	str	r3, [r2, #24]
 8000402:	4b05      	ldr	r3, [pc, #20]	; (8000418 <MX_GPIO_Init+0x58>)
 8000404:	699b      	ldr	r3, [r3, #24]
 8000406:	f003 0308 	and.w	r3, r3, #8
 800040a:	607b      	str	r3, [r7, #4]
 800040c:	687b      	ldr	r3, [r7, #4]

}
 800040e:	bf00      	nop
 8000410:	3714      	adds	r7, #20
 8000412:	46bd      	mov	sp, r7
 8000414:	bc80      	pop	{r7}
 8000416:	4770      	bx	lr
 8000418:	40021000 	.word	0x40021000

0800041c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800041c:	b480      	push	{r7}
 800041e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000420:	b672      	cpsid	i
}
 8000422:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000424:	e7fe      	b.n	8000424 <Error_Handler+0x8>
	...

08000428 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000428:	b480      	push	{r7}
 800042a:	b085      	sub	sp, #20
 800042c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800042e:	4b15      	ldr	r3, [pc, #84]	; (8000484 <HAL_MspInit+0x5c>)
 8000430:	699b      	ldr	r3, [r3, #24]
 8000432:	4a14      	ldr	r2, [pc, #80]	; (8000484 <HAL_MspInit+0x5c>)
 8000434:	f043 0301 	orr.w	r3, r3, #1
 8000438:	6193      	str	r3, [r2, #24]
 800043a:	4b12      	ldr	r3, [pc, #72]	; (8000484 <HAL_MspInit+0x5c>)
 800043c:	699b      	ldr	r3, [r3, #24]
 800043e:	f003 0301 	and.w	r3, r3, #1
 8000442:	60bb      	str	r3, [r7, #8]
 8000444:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000446:	4b0f      	ldr	r3, [pc, #60]	; (8000484 <HAL_MspInit+0x5c>)
 8000448:	69db      	ldr	r3, [r3, #28]
 800044a:	4a0e      	ldr	r2, [pc, #56]	; (8000484 <HAL_MspInit+0x5c>)
 800044c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000450:	61d3      	str	r3, [r2, #28]
 8000452:	4b0c      	ldr	r3, [pc, #48]	; (8000484 <HAL_MspInit+0x5c>)
 8000454:	69db      	ldr	r3, [r3, #28]
 8000456:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800045a:	607b      	str	r3, [r7, #4]
 800045c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800045e:	4b0a      	ldr	r3, [pc, #40]	; (8000488 <HAL_MspInit+0x60>)
 8000460:	685b      	ldr	r3, [r3, #4]
 8000462:	60fb      	str	r3, [r7, #12]
 8000464:	68fb      	ldr	r3, [r7, #12]
 8000466:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800046a:	60fb      	str	r3, [r7, #12]
 800046c:	68fb      	ldr	r3, [r7, #12]
 800046e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000472:	60fb      	str	r3, [r7, #12]
 8000474:	4a04      	ldr	r2, [pc, #16]	; (8000488 <HAL_MspInit+0x60>)
 8000476:	68fb      	ldr	r3, [r7, #12]
 8000478:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800047a:	bf00      	nop
 800047c:	3714      	adds	r7, #20
 800047e:	46bd      	mov	sp, r7
 8000480:	bc80      	pop	{r7}
 8000482:	4770      	bx	lr
 8000484:	40021000 	.word	0x40021000
 8000488:	40010000 	.word	0x40010000

0800048c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800048c:	b480      	push	{r7}
 800048e:	b085      	sub	sp, #20
 8000490:	af00      	add	r7, sp, #0
 8000492:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	681b      	ldr	r3, [r3, #0]
 8000498:	4a09      	ldr	r2, [pc, #36]	; (80004c0 <HAL_TIM_Base_MspInit+0x34>)
 800049a:	4293      	cmp	r3, r2
 800049c:	d10b      	bne.n	80004b6 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800049e:	4b09      	ldr	r3, [pc, #36]	; (80004c4 <HAL_TIM_Base_MspInit+0x38>)
 80004a0:	699b      	ldr	r3, [r3, #24]
 80004a2:	4a08      	ldr	r2, [pc, #32]	; (80004c4 <HAL_TIM_Base_MspInit+0x38>)
 80004a4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80004a8:	6193      	str	r3, [r2, #24]
 80004aa:	4b06      	ldr	r3, [pc, #24]	; (80004c4 <HAL_TIM_Base_MspInit+0x38>)
 80004ac:	699b      	ldr	r3, [r3, #24]
 80004ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80004b2:	60fb      	str	r3, [r7, #12]
 80004b4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80004b6:	bf00      	nop
 80004b8:	3714      	adds	r7, #20
 80004ba:	46bd      	mov	sp, r7
 80004bc:	bc80      	pop	{r7}
 80004be:	4770      	bx	lr
 80004c0:	40012c00 	.word	0x40012c00
 80004c4:	40021000 	.word	0x40021000

080004c8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b08a      	sub	sp, #40	; 0x28
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004d0:	f107 0314 	add.w	r3, r7, #20
 80004d4:	2200      	movs	r2, #0
 80004d6:	601a      	str	r2, [r3, #0]
 80004d8:	605a      	str	r2, [r3, #4]
 80004da:	609a      	str	r2, [r3, #8]
 80004dc:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	4a25      	ldr	r2, [pc, #148]	; (8000578 <HAL_TIM_MspPostInit+0xb0>)
 80004e4:	4293      	cmp	r3, r2
 80004e6:	d142      	bne.n	800056e <HAL_TIM_MspPostInit+0xa6>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004e8:	4b24      	ldr	r3, [pc, #144]	; (800057c <HAL_TIM_MspPostInit+0xb4>)
 80004ea:	699b      	ldr	r3, [r3, #24]
 80004ec:	4a23      	ldr	r2, [pc, #140]	; (800057c <HAL_TIM_MspPostInit+0xb4>)
 80004ee:	f043 0304 	orr.w	r3, r3, #4
 80004f2:	6193      	str	r3, [r2, #24]
 80004f4:	4b21      	ldr	r3, [pc, #132]	; (800057c <HAL_TIM_MspPostInit+0xb4>)
 80004f6:	699b      	ldr	r3, [r3, #24]
 80004f8:	f003 0304 	and.w	r3, r3, #4
 80004fc:	613b      	str	r3, [r7, #16]
 80004fe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000500:	4b1e      	ldr	r3, [pc, #120]	; (800057c <HAL_TIM_MspPostInit+0xb4>)
 8000502:	699b      	ldr	r3, [r3, #24]
 8000504:	4a1d      	ldr	r2, [pc, #116]	; (800057c <HAL_TIM_MspPostInit+0xb4>)
 8000506:	f043 0308 	orr.w	r3, r3, #8
 800050a:	6193      	str	r3, [r2, #24]
 800050c:	4b1b      	ldr	r3, [pc, #108]	; (800057c <HAL_TIM_MspPostInit+0xb4>)
 800050e:	699b      	ldr	r3, [r3, #24]
 8000510:	f003 0308 	and.w	r3, r3, #8
 8000514:	60fb      	str	r3, [r7, #12]
 8000516:	68fb      	ldr	r3, [r7, #12]
    PB1     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8000518:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 800051c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800051e:	2302      	movs	r3, #2
 8000520:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000522:	2302      	movs	r3, #2
 8000524:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000526:	f107 0314 	add.w	r3, r7, #20
 800052a:	4619      	mov	r1, r3
 800052c:	4814      	ldr	r0, [pc, #80]	; (8000580 <HAL_TIM_MspPostInit+0xb8>)
 800052e:	f000 fa8f 	bl	8000a50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000532:	2303      	movs	r3, #3
 8000534:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000536:	2302      	movs	r3, #2
 8000538:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800053a:	2302      	movs	r3, #2
 800053c:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800053e:	f107 0314 	add.w	r3, r7, #20
 8000542:	4619      	mov	r1, r3
 8000544:	480f      	ldr	r0, [pc, #60]	; (8000584 <HAL_TIM_MspPostInit+0xbc>)
 8000546:	f000 fa83 	bl	8000a50 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM1_PARTIAL();
 800054a:	4b0f      	ldr	r3, [pc, #60]	; (8000588 <HAL_TIM_MspPostInit+0xc0>)
 800054c:	685b      	ldr	r3, [r3, #4]
 800054e:	627b      	str	r3, [r7, #36]	; 0x24
 8000550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000552:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8000556:	627b      	str	r3, [r7, #36]	; 0x24
 8000558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800055a:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800055e:	627b      	str	r3, [r7, #36]	; 0x24
 8000560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000562:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000566:	627b      	str	r3, [r7, #36]	; 0x24
 8000568:	4a07      	ldr	r2, [pc, #28]	; (8000588 <HAL_TIM_MspPostInit+0xc0>)
 800056a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800056c:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800056e:	bf00      	nop
 8000570:	3728      	adds	r7, #40	; 0x28
 8000572:	46bd      	mov	sp, r7
 8000574:	bd80      	pop	{r7, pc}
 8000576:	bf00      	nop
 8000578:	40012c00 	.word	0x40012c00
 800057c:	40021000 	.word	0x40021000
 8000580:	40010800 	.word	0x40010800
 8000584:	40010c00 	.word	0x40010c00
 8000588:	40010000 	.word	0x40010000

0800058c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800058c:	b480      	push	{r7}
 800058e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000590:	e7fe      	b.n	8000590 <NMI_Handler+0x4>

08000592 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000592:	b480      	push	{r7}
 8000594:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000596:	e7fe      	b.n	8000596 <HardFault_Handler+0x4>

08000598 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000598:	b480      	push	{r7}
 800059a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800059c:	e7fe      	b.n	800059c <MemManage_Handler+0x4>

0800059e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800059e:	b480      	push	{r7}
 80005a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005a2:	e7fe      	b.n	80005a2 <BusFault_Handler+0x4>

080005a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005a4:	b480      	push	{r7}
 80005a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005a8:	e7fe      	b.n	80005a8 <UsageFault_Handler+0x4>

080005aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005aa:	b480      	push	{r7}
 80005ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80005ae:	bf00      	nop
 80005b0:	46bd      	mov	sp, r7
 80005b2:	bc80      	pop	{r7}
 80005b4:	4770      	bx	lr

080005b6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005b6:	b480      	push	{r7}
 80005b8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005ba:	bf00      	nop
 80005bc:	46bd      	mov	sp, r7
 80005be:	bc80      	pop	{r7}
 80005c0:	4770      	bx	lr

080005c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005c2:	b480      	push	{r7}
 80005c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005c6:	bf00      	nop
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bc80      	pop	{r7}
 80005cc:	4770      	bx	lr

080005ce <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005ce:	b580      	push	{r7, lr}
 80005d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005d2:	f000 f913 	bl	80007fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005d6:	bf00      	nop
 80005d8:	bd80      	pop	{r7, pc}
	...

080005dc <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80005e0:	4802      	ldr	r0, [pc, #8]	; (80005ec <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80005e2:	f000 fcea 	bl	8000fba <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80005e6:	bf00      	nop
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	bf00      	nop
 80005ec:	20000f3c 	.word	0x20000f3c

080005f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b086      	sub	sp, #24
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80005f8:	4a14      	ldr	r2, [pc, #80]	; (800064c <_sbrk+0x5c>)
 80005fa:	4b15      	ldr	r3, [pc, #84]	; (8000650 <_sbrk+0x60>)
 80005fc:	1ad3      	subs	r3, r2, r3
 80005fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000600:	697b      	ldr	r3, [r7, #20]
 8000602:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000604:	4b13      	ldr	r3, [pc, #76]	; (8000654 <_sbrk+0x64>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	2b00      	cmp	r3, #0
 800060a:	d102      	bne.n	8000612 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800060c:	4b11      	ldr	r3, [pc, #68]	; (8000654 <_sbrk+0x64>)
 800060e:	4a12      	ldr	r2, [pc, #72]	; (8000658 <_sbrk+0x68>)
 8000610:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000612:	4b10      	ldr	r3, [pc, #64]	; (8000654 <_sbrk+0x64>)
 8000614:	681a      	ldr	r2, [r3, #0]
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	4413      	add	r3, r2
 800061a:	693a      	ldr	r2, [r7, #16]
 800061c:	429a      	cmp	r2, r3
 800061e:	d207      	bcs.n	8000630 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000620:	f008 f980 	bl	8008924 <__errno>
 8000624:	4603      	mov	r3, r0
 8000626:	220c      	movs	r2, #12
 8000628:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800062a:	f04f 33ff 	mov.w	r3, #4294967295
 800062e:	e009      	b.n	8000644 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000630:	4b08      	ldr	r3, [pc, #32]	; (8000654 <_sbrk+0x64>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000636:	4b07      	ldr	r3, [pc, #28]	; (8000654 <_sbrk+0x64>)
 8000638:	681a      	ldr	r2, [r3, #0]
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	4413      	add	r3, r2
 800063e:	4a05      	ldr	r2, [pc, #20]	; (8000654 <_sbrk+0x64>)
 8000640:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000642:	68fb      	ldr	r3, [r7, #12]
}
 8000644:	4618      	mov	r0, r3
 8000646:	3718      	adds	r7, #24
 8000648:	46bd      	mov	sp, r7
 800064a:	bd80      	pop	{r7, pc}
 800064c:	20005000 	.word	0x20005000
 8000650:	00000400 	.word	0x00000400
 8000654:	20000244 	.word	0x20000244
 8000658:	20001458 	.word	0x20001458

0800065c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800065c:	b480      	push	{r7}
 800065e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000660:	bf00      	nop
 8000662:	46bd      	mov	sp, r7
 8000664:	bc80      	pop	{r7}
 8000666:	4770      	bx	lr

08000668 <kusoOutputCompare>:
extern void kusoOutputCompare(TIM_HandleTypeDef *htim, uint32_t Channel);
extern uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len);
}

uint32_t ARRMax = 300 ;
void kusoOutputCompare(TIM_HandleTypeDef *htim, uint32_t Channel){
 8000668:	b580      	push	{r7, lr}
 800066a:	b082      	sub	sp, #8
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]
 8000670:	6039      	str	r1, [r7, #0]
	HAL_TIM_OC_Start (&htim1, Channel);
 8000672:	6839      	ldr	r1, [r7, #0]
 8000674:	4821      	ldr	r0, [pc, #132]	; (80006fc <kusoOutputCompare+0x94>)
 8000676:	f002 fd79 	bl	800316c <HAL_TIM_OC_Start>
	TIM_CHANNEL_STATE_SET(&htim1, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800067a:	683b      	ldr	r3, [r7, #0]
 800067c:	2b00      	cmp	r3, #0
 800067e:	d104      	bne.n	800068a <kusoOutputCompare+0x22>
 8000680:	4b1e      	ldr	r3, [pc, #120]	; (80006fc <kusoOutputCompare+0x94>)
 8000682:	2201      	movs	r2, #1
 8000684:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8000688:	e013      	b.n	80006b2 <kusoOutputCompare+0x4a>
 800068a:	683b      	ldr	r3, [r7, #0]
 800068c:	2b04      	cmp	r3, #4
 800068e:	d104      	bne.n	800069a <kusoOutputCompare+0x32>
 8000690:	4b1a      	ldr	r3, [pc, #104]	; (80006fc <kusoOutputCompare+0x94>)
 8000692:	2201      	movs	r2, #1
 8000694:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8000698:	e00b      	b.n	80006b2 <kusoOutputCompare+0x4a>
 800069a:	683b      	ldr	r3, [r7, #0]
 800069c:	2b08      	cmp	r3, #8
 800069e:	d104      	bne.n	80006aa <kusoOutputCompare+0x42>
 80006a0:	4b16      	ldr	r3, [pc, #88]	; (80006fc <kusoOutputCompare+0x94>)
 80006a2:	2201      	movs	r2, #1
 80006a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80006a8:	e003      	b.n	80006b2 <kusoOutputCompare+0x4a>
 80006aa:	4b14      	ldr	r3, [pc, #80]	; (80006fc <kusoOutputCompare+0x94>)
 80006ac:	2201      	movs	r2, #1
 80006ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	HAL_TIMEx_OCN_Start(&htim1, Channel);
 80006b2:	6839      	ldr	r1, [r7, #0]
 80006b4:	4811      	ldr	r0, [pc, #68]	; (80006fc <kusoOutputCompare+0x94>)
 80006b6:	f003 f9bb 	bl	8003a30 <HAL_TIMEx_OCN_Start>
	TIM_CHANNEL_N_STATE_SET(&htim1, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80006ba:	683b      	ldr	r3, [r7, #0]
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d104      	bne.n	80006ca <kusoOutputCompare+0x62>
 80006c0:	4b0e      	ldr	r3, [pc, #56]	; (80006fc <kusoOutputCompare+0x94>)
 80006c2:	2201      	movs	r2, #1
 80006c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
}
 80006c8:	e013      	b.n	80006f2 <kusoOutputCompare+0x8a>
	TIM_CHANNEL_N_STATE_SET(&htim1, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80006ca:	683b      	ldr	r3, [r7, #0]
 80006cc:	2b04      	cmp	r3, #4
 80006ce:	d104      	bne.n	80006da <kusoOutputCompare+0x72>
 80006d0:	4b0a      	ldr	r3, [pc, #40]	; (80006fc <kusoOutputCompare+0x94>)
 80006d2:	2201      	movs	r2, #1
 80006d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
}
 80006d8:	e00b      	b.n	80006f2 <kusoOutputCompare+0x8a>
	TIM_CHANNEL_N_STATE_SET(&htim1, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80006da:	683b      	ldr	r3, [r7, #0]
 80006dc:	2b08      	cmp	r3, #8
 80006de:	d104      	bne.n	80006ea <kusoOutputCompare+0x82>
 80006e0:	4b06      	ldr	r3, [pc, #24]	; (80006fc <kusoOutputCompare+0x94>)
 80006e2:	2201      	movs	r2, #1
 80006e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
}
 80006e8:	e003      	b.n	80006f2 <kusoOutputCompare+0x8a>
	TIM_CHANNEL_N_STATE_SET(&htim1, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80006ea:	4b04      	ldr	r3, [pc, #16]	; (80006fc <kusoOutputCompare+0x94>)
 80006ec:	2201      	movs	r2, #1
 80006ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
}
 80006f2:	bf00      	nop
 80006f4:	3708      	adds	r7, #8
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	200001fc 	.word	0x200001fc

08000700 <main_cpp>:

    return static_cast<uint8_t>(value & UINT8_MAX);
}

void main_cpp(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	af00      	add	r7, sp, #0
	kusoOutputCompare(&htim1, TIM_CHANNEL_1);
 8000704:	2100      	movs	r1, #0
 8000706:	4806      	ldr	r0, [pc, #24]	; (8000720 <main_cpp+0x20>)
 8000708:	f7ff ffae 	bl	8000668 <kusoOutputCompare>
	kusoOutputCompare(&htim1, TIM_CHANNEL_2);
 800070c:	2104      	movs	r1, #4
 800070e:	4804      	ldr	r0, [pc, #16]	; (8000720 <main_cpp+0x20>)
 8000710:	f7ff ffaa 	bl	8000668 <kusoOutputCompare>
	kusoOutputCompare(&htim1, TIM_CHANNEL_3);
 8000714:	2108      	movs	r1, #8
 8000716:	4802      	ldr	r0, [pc, #8]	; (8000720 <main_cpp+0x20>)
 8000718:	f7ff ffa6 	bl	8000668 <kusoOutputCompare>
/*	while(true){
		CDC_Transmit_FS((uint8_t*)ARRMax, 32);
		HAL_Delay(1000);
	}
*/
}
 800071c:	bf00      	nop
 800071e:	bd80      	pop	{r7, pc}
 8000720:	200001fc 	.word	0x200001fc

08000724 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000724:	480c      	ldr	r0, [pc, #48]	; (8000758 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000726:	490d      	ldr	r1, [pc, #52]	; (800075c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000728:	4a0d      	ldr	r2, [pc, #52]	; (8000760 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800072a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800072c:	e002      	b.n	8000734 <LoopCopyDataInit>

0800072e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800072e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000730:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000732:	3304      	adds	r3, #4

08000734 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000734:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000736:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000738:	d3f9      	bcc.n	800072e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800073a:	4a0a      	ldr	r2, [pc, #40]	; (8000764 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800073c:	4c0a      	ldr	r4, [pc, #40]	; (8000768 <LoopFillZerobss+0x22>)
  movs r3, #0
 800073e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000740:	e001      	b.n	8000746 <LoopFillZerobss>

08000742 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000742:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000744:	3204      	adds	r2, #4

08000746 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000746:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000748:	d3fb      	bcc.n	8000742 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800074a:	f7ff ff87 	bl	800065c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800074e:	f008 f8ef 	bl	8008930 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000752:	f7ff fd03 	bl	800015c <main>
  bx lr
 8000756:	4770      	bx	lr
  ldr r0, =_sdata
 8000758:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800075c:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8000760:	0800933c 	.word	0x0800933c
  ldr r2, =_sbss
 8000764:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8000768:	20001458 	.word	0x20001458

0800076c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800076c:	e7fe      	b.n	800076c <ADC1_2_IRQHandler>
	...

08000770 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000774:	4b08      	ldr	r3, [pc, #32]	; (8000798 <HAL_Init+0x28>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	4a07      	ldr	r2, [pc, #28]	; (8000798 <HAL_Init+0x28>)
 800077a:	f043 0310 	orr.w	r3, r3, #16
 800077e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000780:	2003      	movs	r0, #3
 8000782:	f000 f923 	bl	80009cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000786:	200f      	movs	r0, #15
 8000788:	f000 f808 	bl	800079c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800078c:	f7ff fe4c 	bl	8000428 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000790:	2300      	movs	r3, #0
}
 8000792:	4618      	mov	r0, r3
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	40022000 	.word	0x40022000

0800079c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b082      	sub	sp, #8
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80007a4:	4b12      	ldr	r3, [pc, #72]	; (80007f0 <HAL_InitTick+0x54>)
 80007a6:	681a      	ldr	r2, [r3, #0]
 80007a8:	4b12      	ldr	r3, [pc, #72]	; (80007f4 <HAL_InitTick+0x58>)
 80007aa:	781b      	ldrb	r3, [r3, #0]
 80007ac:	4619      	mov	r1, r3
 80007ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80007b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80007ba:	4618      	mov	r0, r3
 80007bc:	f000 f93b 	bl	8000a36 <HAL_SYSTICK_Config>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80007c6:	2301      	movs	r3, #1
 80007c8:	e00e      	b.n	80007e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	2b0f      	cmp	r3, #15
 80007ce:	d80a      	bhi.n	80007e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007d0:	2200      	movs	r2, #0
 80007d2:	6879      	ldr	r1, [r7, #4]
 80007d4:	f04f 30ff 	mov.w	r0, #4294967295
 80007d8:	f000 f903 	bl	80009e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80007dc:	4a06      	ldr	r2, [pc, #24]	; (80007f8 <HAL_InitTick+0x5c>)
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80007e2:	2300      	movs	r3, #0
 80007e4:	e000      	b.n	80007e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80007e6:	2301      	movs	r3, #1
}
 80007e8:	4618      	mov	r0, r3
 80007ea:	3708      	adds	r7, #8
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd80      	pop	{r7, pc}
 80007f0:	20000000 	.word	0x20000000
 80007f4:	20000008 	.word	0x20000008
 80007f8:	20000004 	.word	0x20000004

080007fc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007fc:	b480      	push	{r7}
 80007fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000800:	4b05      	ldr	r3, [pc, #20]	; (8000818 <HAL_IncTick+0x1c>)
 8000802:	781b      	ldrb	r3, [r3, #0]
 8000804:	461a      	mov	r2, r3
 8000806:	4b05      	ldr	r3, [pc, #20]	; (800081c <HAL_IncTick+0x20>)
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	4413      	add	r3, r2
 800080c:	4a03      	ldr	r2, [pc, #12]	; (800081c <HAL_IncTick+0x20>)
 800080e:	6013      	str	r3, [r2, #0]
}
 8000810:	bf00      	nop
 8000812:	46bd      	mov	sp, r7
 8000814:	bc80      	pop	{r7}
 8000816:	4770      	bx	lr
 8000818:	20000008 	.word	0x20000008
 800081c:	20000248 	.word	0x20000248

08000820 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000820:	b480      	push	{r7}
 8000822:	af00      	add	r7, sp, #0
  return uwTick;
 8000824:	4b02      	ldr	r3, [pc, #8]	; (8000830 <HAL_GetTick+0x10>)
 8000826:	681b      	ldr	r3, [r3, #0]
}
 8000828:	4618      	mov	r0, r3
 800082a:	46bd      	mov	sp, r7
 800082c:	bc80      	pop	{r7}
 800082e:	4770      	bx	lr
 8000830:	20000248 	.word	0x20000248

08000834 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000834:	b480      	push	{r7}
 8000836:	b085      	sub	sp, #20
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	f003 0307 	and.w	r3, r3, #7
 8000842:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000844:	4b0c      	ldr	r3, [pc, #48]	; (8000878 <__NVIC_SetPriorityGrouping+0x44>)
 8000846:	68db      	ldr	r3, [r3, #12]
 8000848:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800084a:	68ba      	ldr	r2, [r7, #8]
 800084c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000850:	4013      	ands	r3, r2
 8000852:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000854:	68fb      	ldr	r3, [r7, #12]
 8000856:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000858:	68bb      	ldr	r3, [r7, #8]
 800085a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800085c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000860:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000864:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000866:	4a04      	ldr	r2, [pc, #16]	; (8000878 <__NVIC_SetPriorityGrouping+0x44>)
 8000868:	68bb      	ldr	r3, [r7, #8]
 800086a:	60d3      	str	r3, [r2, #12]
}
 800086c:	bf00      	nop
 800086e:	3714      	adds	r7, #20
 8000870:	46bd      	mov	sp, r7
 8000872:	bc80      	pop	{r7}
 8000874:	4770      	bx	lr
 8000876:	bf00      	nop
 8000878:	e000ed00 	.word	0xe000ed00

0800087c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800087c:	b480      	push	{r7}
 800087e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000880:	4b04      	ldr	r3, [pc, #16]	; (8000894 <__NVIC_GetPriorityGrouping+0x18>)
 8000882:	68db      	ldr	r3, [r3, #12]
 8000884:	0a1b      	lsrs	r3, r3, #8
 8000886:	f003 0307 	and.w	r3, r3, #7
}
 800088a:	4618      	mov	r0, r3
 800088c:	46bd      	mov	sp, r7
 800088e:	bc80      	pop	{r7}
 8000890:	4770      	bx	lr
 8000892:	bf00      	nop
 8000894:	e000ed00 	.word	0xe000ed00

08000898 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000898:	b480      	push	{r7}
 800089a:	b083      	sub	sp, #12
 800089c:	af00      	add	r7, sp, #0
 800089e:	4603      	mov	r3, r0
 80008a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	db0b      	blt.n	80008c2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80008aa:	79fb      	ldrb	r3, [r7, #7]
 80008ac:	f003 021f 	and.w	r2, r3, #31
 80008b0:	4906      	ldr	r1, [pc, #24]	; (80008cc <__NVIC_EnableIRQ+0x34>)
 80008b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008b6:	095b      	lsrs	r3, r3, #5
 80008b8:	2001      	movs	r0, #1
 80008ba:	fa00 f202 	lsl.w	r2, r0, r2
 80008be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80008c2:	bf00      	nop
 80008c4:	370c      	adds	r7, #12
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bc80      	pop	{r7}
 80008ca:	4770      	bx	lr
 80008cc:	e000e100 	.word	0xe000e100

080008d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008d0:	b480      	push	{r7}
 80008d2:	b083      	sub	sp, #12
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	4603      	mov	r3, r0
 80008d8:	6039      	str	r1, [r7, #0]
 80008da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	db0a      	blt.n	80008fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008e4:	683b      	ldr	r3, [r7, #0]
 80008e6:	b2da      	uxtb	r2, r3
 80008e8:	490c      	ldr	r1, [pc, #48]	; (800091c <__NVIC_SetPriority+0x4c>)
 80008ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008ee:	0112      	lsls	r2, r2, #4
 80008f0:	b2d2      	uxtb	r2, r2
 80008f2:	440b      	add	r3, r1
 80008f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80008f8:	e00a      	b.n	8000910 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008fa:	683b      	ldr	r3, [r7, #0]
 80008fc:	b2da      	uxtb	r2, r3
 80008fe:	4908      	ldr	r1, [pc, #32]	; (8000920 <__NVIC_SetPriority+0x50>)
 8000900:	79fb      	ldrb	r3, [r7, #7]
 8000902:	f003 030f 	and.w	r3, r3, #15
 8000906:	3b04      	subs	r3, #4
 8000908:	0112      	lsls	r2, r2, #4
 800090a:	b2d2      	uxtb	r2, r2
 800090c:	440b      	add	r3, r1
 800090e:	761a      	strb	r2, [r3, #24]
}
 8000910:	bf00      	nop
 8000912:	370c      	adds	r7, #12
 8000914:	46bd      	mov	sp, r7
 8000916:	bc80      	pop	{r7}
 8000918:	4770      	bx	lr
 800091a:	bf00      	nop
 800091c:	e000e100 	.word	0xe000e100
 8000920:	e000ed00 	.word	0xe000ed00

08000924 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000924:	b480      	push	{r7}
 8000926:	b089      	sub	sp, #36	; 0x24
 8000928:	af00      	add	r7, sp, #0
 800092a:	60f8      	str	r0, [r7, #12]
 800092c:	60b9      	str	r1, [r7, #8]
 800092e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000930:	68fb      	ldr	r3, [r7, #12]
 8000932:	f003 0307 	and.w	r3, r3, #7
 8000936:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000938:	69fb      	ldr	r3, [r7, #28]
 800093a:	f1c3 0307 	rsb	r3, r3, #7
 800093e:	2b04      	cmp	r3, #4
 8000940:	bf28      	it	cs
 8000942:	2304      	movcs	r3, #4
 8000944:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000946:	69fb      	ldr	r3, [r7, #28]
 8000948:	3304      	adds	r3, #4
 800094a:	2b06      	cmp	r3, #6
 800094c:	d902      	bls.n	8000954 <NVIC_EncodePriority+0x30>
 800094e:	69fb      	ldr	r3, [r7, #28]
 8000950:	3b03      	subs	r3, #3
 8000952:	e000      	b.n	8000956 <NVIC_EncodePriority+0x32>
 8000954:	2300      	movs	r3, #0
 8000956:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000958:	f04f 32ff 	mov.w	r2, #4294967295
 800095c:	69bb      	ldr	r3, [r7, #24]
 800095e:	fa02 f303 	lsl.w	r3, r2, r3
 8000962:	43da      	mvns	r2, r3
 8000964:	68bb      	ldr	r3, [r7, #8]
 8000966:	401a      	ands	r2, r3
 8000968:	697b      	ldr	r3, [r7, #20]
 800096a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800096c:	f04f 31ff 	mov.w	r1, #4294967295
 8000970:	697b      	ldr	r3, [r7, #20]
 8000972:	fa01 f303 	lsl.w	r3, r1, r3
 8000976:	43d9      	mvns	r1, r3
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800097c:	4313      	orrs	r3, r2
         );
}
 800097e:	4618      	mov	r0, r3
 8000980:	3724      	adds	r7, #36	; 0x24
 8000982:	46bd      	mov	sp, r7
 8000984:	bc80      	pop	{r7}
 8000986:	4770      	bx	lr

08000988 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b082      	sub	sp, #8
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	3b01      	subs	r3, #1
 8000994:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000998:	d301      	bcc.n	800099e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800099a:	2301      	movs	r3, #1
 800099c:	e00f      	b.n	80009be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800099e:	4a0a      	ldr	r2, [pc, #40]	; (80009c8 <SysTick_Config+0x40>)
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	3b01      	subs	r3, #1
 80009a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80009a6:	210f      	movs	r1, #15
 80009a8:	f04f 30ff 	mov.w	r0, #4294967295
 80009ac:	f7ff ff90 	bl	80008d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009b0:	4b05      	ldr	r3, [pc, #20]	; (80009c8 <SysTick_Config+0x40>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009b6:	4b04      	ldr	r3, [pc, #16]	; (80009c8 <SysTick_Config+0x40>)
 80009b8:	2207      	movs	r2, #7
 80009ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80009bc:	2300      	movs	r3, #0
}
 80009be:	4618      	mov	r0, r3
 80009c0:	3708      	adds	r7, #8
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	e000e010 	.word	0xe000e010

080009cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b082      	sub	sp, #8
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80009d4:	6878      	ldr	r0, [r7, #4]
 80009d6:	f7ff ff2d 	bl	8000834 <__NVIC_SetPriorityGrouping>
}
 80009da:	bf00      	nop
 80009dc:	3708      	adds	r7, #8
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}

080009e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80009e2:	b580      	push	{r7, lr}
 80009e4:	b086      	sub	sp, #24
 80009e6:	af00      	add	r7, sp, #0
 80009e8:	4603      	mov	r3, r0
 80009ea:	60b9      	str	r1, [r7, #8]
 80009ec:	607a      	str	r2, [r7, #4]
 80009ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80009f0:	2300      	movs	r3, #0
 80009f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80009f4:	f7ff ff42 	bl	800087c <__NVIC_GetPriorityGrouping>
 80009f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80009fa:	687a      	ldr	r2, [r7, #4]
 80009fc:	68b9      	ldr	r1, [r7, #8]
 80009fe:	6978      	ldr	r0, [r7, #20]
 8000a00:	f7ff ff90 	bl	8000924 <NVIC_EncodePriority>
 8000a04:	4602      	mov	r2, r0
 8000a06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a0a:	4611      	mov	r1, r2
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	f7ff ff5f 	bl	80008d0 <__NVIC_SetPriority>
}
 8000a12:	bf00      	nop
 8000a14:	3718      	adds	r7, #24
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}

08000a1a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a1a:	b580      	push	{r7, lr}
 8000a1c:	b082      	sub	sp, #8
 8000a1e:	af00      	add	r7, sp, #0
 8000a20:	4603      	mov	r3, r0
 8000a22:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a28:	4618      	mov	r0, r3
 8000a2a:	f7ff ff35 	bl	8000898 <__NVIC_EnableIRQ>
}
 8000a2e:	bf00      	nop
 8000a30:	3708      	adds	r7, #8
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}

08000a36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a36:	b580      	push	{r7, lr}
 8000a38:	b082      	sub	sp, #8
 8000a3a:	af00      	add	r7, sp, #0
 8000a3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a3e:	6878      	ldr	r0, [r7, #4]
 8000a40:	f7ff ffa2 	bl	8000988 <SysTick_Config>
 8000a44:	4603      	mov	r3, r0
}
 8000a46:	4618      	mov	r0, r3
 8000a48:	3708      	adds	r7, #8
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}
	...

08000a50 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a50:	b480      	push	{r7}
 8000a52:	b08b      	sub	sp, #44	; 0x2c
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
 8000a58:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a62:	e169      	b.n	8000d38 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000a64:	2201      	movs	r2, #1
 8000a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a68:	fa02 f303 	lsl.w	r3, r2, r3
 8000a6c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000a6e:	683b      	ldr	r3, [r7, #0]
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	69fa      	ldr	r2, [r7, #28]
 8000a74:	4013      	ands	r3, r2
 8000a76:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000a78:	69ba      	ldr	r2, [r7, #24]
 8000a7a:	69fb      	ldr	r3, [r7, #28]
 8000a7c:	429a      	cmp	r2, r3
 8000a7e:	f040 8158 	bne.w	8000d32 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000a82:	683b      	ldr	r3, [r7, #0]
 8000a84:	685b      	ldr	r3, [r3, #4]
 8000a86:	4a9a      	ldr	r2, [pc, #616]	; (8000cf0 <HAL_GPIO_Init+0x2a0>)
 8000a88:	4293      	cmp	r3, r2
 8000a8a:	d05e      	beq.n	8000b4a <HAL_GPIO_Init+0xfa>
 8000a8c:	4a98      	ldr	r2, [pc, #608]	; (8000cf0 <HAL_GPIO_Init+0x2a0>)
 8000a8e:	4293      	cmp	r3, r2
 8000a90:	d875      	bhi.n	8000b7e <HAL_GPIO_Init+0x12e>
 8000a92:	4a98      	ldr	r2, [pc, #608]	; (8000cf4 <HAL_GPIO_Init+0x2a4>)
 8000a94:	4293      	cmp	r3, r2
 8000a96:	d058      	beq.n	8000b4a <HAL_GPIO_Init+0xfa>
 8000a98:	4a96      	ldr	r2, [pc, #600]	; (8000cf4 <HAL_GPIO_Init+0x2a4>)
 8000a9a:	4293      	cmp	r3, r2
 8000a9c:	d86f      	bhi.n	8000b7e <HAL_GPIO_Init+0x12e>
 8000a9e:	4a96      	ldr	r2, [pc, #600]	; (8000cf8 <HAL_GPIO_Init+0x2a8>)
 8000aa0:	4293      	cmp	r3, r2
 8000aa2:	d052      	beq.n	8000b4a <HAL_GPIO_Init+0xfa>
 8000aa4:	4a94      	ldr	r2, [pc, #592]	; (8000cf8 <HAL_GPIO_Init+0x2a8>)
 8000aa6:	4293      	cmp	r3, r2
 8000aa8:	d869      	bhi.n	8000b7e <HAL_GPIO_Init+0x12e>
 8000aaa:	4a94      	ldr	r2, [pc, #592]	; (8000cfc <HAL_GPIO_Init+0x2ac>)
 8000aac:	4293      	cmp	r3, r2
 8000aae:	d04c      	beq.n	8000b4a <HAL_GPIO_Init+0xfa>
 8000ab0:	4a92      	ldr	r2, [pc, #584]	; (8000cfc <HAL_GPIO_Init+0x2ac>)
 8000ab2:	4293      	cmp	r3, r2
 8000ab4:	d863      	bhi.n	8000b7e <HAL_GPIO_Init+0x12e>
 8000ab6:	4a92      	ldr	r2, [pc, #584]	; (8000d00 <HAL_GPIO_Init+0x2b0>)
 8000ab8:	4293      	cmp	r3, r2
 8000aba:	d046      	beq.n	8000b4a <HAL_GPIO_Init+0xfa>
 8000abc:	4a90      	ldr	r2, [pc, #576]	; (8000d00 <HAL_GPIO_Init+0x2b0>)
 8000abe:	4293      	cmp	r3, r2
 8000ac0:	d85d      	bhi.n	8000b7e <HAL_GPIO_Init+0x12e>
 8000ac2:	2b12      	cmp	r3, #18
 8000ac4:	d82a      	bhi.n	8000b1c <HAL_GPIO_Init+0xcc>
 8000ac6:	2b12      	cmp	r3, #18
 8000ac8:	d859      	bhi.n	8000b7e <HAL_GPIO_Init+0x12e>
 8000aca:	a201      	add	r2, pc, #4	; (adr r2, 8000ad0 <HAL_GPIO_Init+0x80>)
 8000acc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ad0:	08000b4b 	.word	0x08000b4b
 8000ad4:	08000b25 	.word	0x08000b25
 8000ad8:	08000b37 	.word	0x08000b37
 8000adc:	08000b79 	.word	0x08000b79
 8000ae0:	08000b7f 	.word	0x08000b7f
 8000ae4:	08000b7f 	.word	0x08000b7f
 8000ae8:	08000b7f 	.word	0x08000b7f
 8000aec:	08000b7f 	.word	0x08000b7f
 8000af0:	08000b7f 	.word	0x08000b7f
 8000af4:	08000b7f 	.word	0x08000b7f
 8000af8:	08000b7f 	.word	0x08000b7f
 8000afc:	08000b7f 	.word	0x08000b7f
 8000b00:	08000b7f 	.word	0x08000b7f
 8000b04:	08000b7f 	.word	0x08000b7f
 8000b08:	08000b7f 	.word	0x08000b7f
 8000b0c:	08000b7f 	.word	0x08000b7f
 8000b10:	08000b7f 	.word	0x08000b7f
 8000b14:	08000b2d 	.word	0x08000b2d
 8000b18:	08000b41 	.word	0x08000b41
 8000b1c:	4a79      	ldr	r2, [pc, #484]	; (8000d04 <HAL_GPIO_Init+0x2b4>)
 8000b1e:	4293      	cmp	r3, r2
 8000b20:	d013      	beq.n	8000b4a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000b22:	e02c      	b.n	8000b7e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000b24:	683b      	ldr	r3, [r7, #0]
 8000b26:	68db      	ldr	r3, [r3, #12]
 8000b28:	623b      	str	r3, [r7, #32]
          break;
 8000b2a:	e029      	b.n	8000b80 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000b2c:	683b      	ldr	r3, [r7, #0]
 8000b2e:	68db      	ldr	r3, [r3, #12]
 8000b30:	3304      	adds	r3, #4
 8000b32:	623b      	str	r3, [r7, #32]
          break;
 8000b34:	e024      	b.n	8000b80 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000b36:	683b      	ldr	r3, [r7, #0]
 8000b38:	68db      	ldr	r3, [r3, #12]
 8000b3a:	3308      	adds	r3, #8
 8000b3c:	623b      	str	r3, [r7, #32]
          break;
 8000b3e:	e01f      	b.n	8000b80 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000b40:	683b      	ldr	r3, [r7, #0]
 8000b42:	68db      	ldr	r3, [r3, #12]
 8000b44:	330c      	adds	r3, #12
 8000b46:	623b      	str	r3, [r7, #32]
          break;
 8000b48:	e01a      	b.n	8000b80 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000b4a:	683b      	ldr	r3, [r7, #0]
 8000b4c:	689b      	ldr	r3, [r3, #8]
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d102      	bne.n	8000b58 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000b52:	2304      	movs	r3, #4
 8000b54:	623b      	str	r3, [r7, #32]
          break;
 8000b56:	e013      	b.n	8000b80 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000b58:	683b      	ldr	r3, [r7, #0]
 8000b5a:	689b      	ldr	r3, [r3, #8]
 8000b5c:	2b01      	cmp	r3, #1
 8000b5e:	d105      	bne.n	8000b6c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000b60:	2308      	movs	r3, #8
 8000b62:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	69fa      	ldr	r2, [r7, #28]
 8000b68:	611a      	str	r2, [r3, #16]
          break;
 8000b6a:	e009      	b.n	8000b80 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000b6c:	2308      	movs	r3, #8
 8000b6e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	69fa      	ldr	r2, [r7, #28]
 8000b74:	615a      	str	r2, [r3, #20]
          break;
 8000b76:	e003      	b.n	8000b80 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	623b      	str	r3, [r7, #32]
          break;
 8000b7c:	e000      	b.n	8000b80 <HAL_GPIO_Init+0x130>
          break;
 8000b7e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000b80:	69bb      	ldr	r3, [r7, #24]
 8000b82:	2bff      	cmp	r3, #255	; 0xff
 8000b84:	d801      	bhi.n	8000b8a <HAL_GPIO_Init+0x13a>
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	e001      	b.n	8000b8e <HAL_GPIO_Init+0x13e>
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	3304      	adds	r3, #4
 8000b8e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000b90:	69bb      	ldr	r3, [r7, #24]
 8000b92:	2bff      	cmp	r3, #255	; 0xff
 8000b94:	d802      	bhi.n	8000b9c <HAL_GPIO_Init+0x14c>
 8000b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b98:	009b      	lsls	r3, r3, #2
 8000b9a:	e002      	b.n	8000ba2 <HAL_GPIO_Init+0x152>
 8000b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b9e:	3b08      	subs	r3, #8
 8000ba0:	009b      	lsls	r3, r3, #2
 8000ba2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000ba4:	697b      	ldr	r3, [r7, #20]
 8000ba6:	681a      	ldr	r2, [r3, #0]
 8000ba8:	210f      	movs	r1, #15
 8000baa:	693b      	ldr	r3, [r7, #16]
 8000bac:	fa01 f303 	lsl.w	r3, r1, r3
 8000bb0:	43db      	mvns	r3, r3
 8000bb2:	401a      	ands	r2, r3
 8000bb4:	6a39      	ldr	r1, [r7, #32]
 8000bb6:	693b      	ldr	r3, [r7, #16]
 8000bb8:	fa01 f303 	lsl.w	r3, r1, r3
 8000bbc:	431a      	orrs	r2, r3
 8000bbe:	697b      	ldr	r3, [r7, #20]
 8000bc0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000bc2:	683b      	ldr	r3, [r7, #0]
 8000bc4:	685b      	ldr	r3, [r3, #4]
 8000bc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	f000 80b1 	beq.w	8000d32 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000bd0:	4b4d      	ldr	r3, [pc, #308]	; (8000d08 <HAL_GPIO_Init+0x2b8>)
 8000bd2:	699b      	ldr	r3, [r3, #24]
 8000bd4:	4a4c      	ldr	r2, [pc, #304]	; (8000d08 <HAL_GPIO_Init+0x2b8>)
 8000bd6:	f043 0301 	orr.w	r3, r3, #1
 8000bda:	6193      	str	r3, [r2, #24]
 8000bdc:	4b4a      	ldr	r3, [pc, #296]	; (8000d08 <HAL_GPIO_Init+0x2b8>)
 8000bde:	699b      	ldr	r3, [r3, #24]
 8000be0:	f003 0301 	and.w	r3, r3, #1
 8000be4:	60bb      	str	r3, [r7, #8]
 8000be6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000be8:	4a48      	ldr	r2, [pc, #288]	; (8000d0c <HAL_GPIO_Init+0x2bc>)
 8000bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bec:	089b      	lsrs	r3, r3, #2
 8000bee:	3302      	adds	r3, #2
 8000bf0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bf4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bf8:	f003 0303 	and.w	r3, r3, #3
 8000bfc:	009b      	lsls	r3, r3, #2
 8000bfe:	220f      	movs	r2, #15
 8000c00:	fa02 f303 	lsl.w	r3, r2, r3
 8000c04:	43db      	mvns	r3, r3
 8000c06:	68fa      	ldr	r2, [r7, #12]
 8000c08:	4013      	ands	r3, r2
 8000c0a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	4a40      	ldr	r2, [pc, #256]	; (8000d10 <HAL_GPIO_Init+0x2c0>)
 8000c10:	4293      	cmp	r3, r2
 8000c12:	d013      	beq.n	8000c3c <HAL_GPIO_Init+0x1ec>
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	4a3f      	ldr	r2, [pc, #252]	; (8000d14 <HAL_GPIO_Init+0x2c4>)
 8000c18:	4293      	cmp	r3, r2
 8000c1a:	d00d      	beq.n	8000c38 <HAL_GPIO_Init+0x1e8>
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	4a3e      	ldr	r2, [pc, #248]	; (8000d18 <HAL_GPIO_Init+0x2c8>)
 8000c20:	4293      	cmp	r3, r2
 8000c22:	d007      	beq.n	8000c34 <HAL_GPIO_Init+0x1e4>
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	4a3d      	ldr	r2, [pc, #244]	; (8000d1c <HAL_GPIO_Init+0x2cc>)
 8000c28:	4293      	cmp	r3, r2
 8000c2a:	d101      	bne.n	8000c30 <HAL_GPIO_Init+0x1e0>
 8000c2c:	2303      	movs	r3, #3
 8000c2e:	e006      	b.n	8000c3e <HAL_GPIO_Init+0x1ee>
 8000c30:	2304      	movs	r3, #4
 8000c32:	e004      	b.n	8000c3e <HAL_GPIO_Init+0x1ee>
 8000c34:	2302      	movs	r3, #2
 8000c36:	e002      	b.n	8000c3e <HAL_GPIO_Init+0x1ee>
 8000c38:	2301      	movs	r3, #1
 8000c3a:	e000      	b.n	8000c3e <HAL_GPIO_Init+0x1ee>
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c40:	f002 0203 	and.w	r2, r2, #3
 8000c44:	0092      	lsls	r2, r2, #2
 8000c46:	4093      	lsls	r3, r2
 8000c48:	68fa      	ldr	r2, [r7, #12]
 8000c4a:	4313      	orrs	r3, r2
 8000c4c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000c4e:	492f      	ldr	r1, [pc, #188]	; (8000d0c <HAL_GPIO_Init+0x2bc>)
 8000c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c52:	089b      	lsrs	r3, r3, #2
 8000c54:	3302      	adds	r3, #2
 8000c56:	68fa      	ldr	r2, [r7, #12]
 8000c58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000c5c:	683b      	ldr	r3, [r7, #0]
 8000c5e:	685b      	ldr	r3, [r3, #4]
 8000c60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d006      	beq.n	8000c76 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000c68:	4b2d      	ldr	r3, [pc, #180]	; (8000d20 <HAL_GPIO_Init+0x2d0>)
 8000c6a:	681a      	ldr	r2, [r3, #0]
 8000c6c:	492c      	ldr	r1, [pc, #176]	; (8000d20 <HAL_GPIO_Init+0x2d0>)
 8000c6e:	69bb      	ldr	r3, [r7, #24]
 8000c70:	4313      	orrs	r3, r2
 8000c72:	600b      	str	r3, [r1, #0]
 8000c74:	e006      	b.n	8000c84 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000c76:	4b2a      	ldr	r3, [pc, #168]	; (8000d20 <HAL_GPIO_Init+0x2d0>)
 8000c78:	681a      	ldr	r2, [r3, #0]
 8000c7a:	69bb      	ldr	r3, [r7, #24]
 8000c7c:	43db      	mvns	r3, r3
 8000c7e:	4928      	ldr	r1, [pc, #160]	; (8000d20 <HAL_GPIO_Init+0x2d0>)
 8000c80:	4013      	ands	r3, r2
 8000c82:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000c84:	683b      	ldr	r3, [r7, #0]
 8000c86:	685b      	ldr	r3, [r3, #4]
 8000c88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d006      	beq.n	8000c9e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000c90:	4b23      	ldr	r3, [pc, #140]	; (8000d20 <HAL_GPIO_Init+0x2d0>)
 8000c92:	685a      	ldr	r2, [r3, #4]
 8000c94:	4922      	ldr	r1, [pc, #136]	; (8000d20 <HAL_GPIO_Init+0x2d0>)
 8000c96:	69bb      	ldr	r3, [r7, #24]
 8000c98:	4313      	orrs	r3, r2
 8000c9a:	604b      	str	r3, [r1, #4]
 8000c9c:	e006      	b.n	8000cac <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000c9e:	4b20      	ldr	r3, [pc, #128]	; (8000d20 <HAL_GPIO_Init+0x2d0>)
 8000ca0:	685a      	ldr	r2, [r3, #4]
 8000ca2:	69bb      	ldr	r3, [r7, #24]
 8000ca4:	43db      	mvns	r3, r3
 8000ca6:	491e      	ldr	r1, [pc, #120]	; (8000d20 <HAL_GPIO_Init+0x2d0>)
 8000ca8:	4013      	ands	r3, r2
 8000caa:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000cac:	683b      	ldr	r3, [r7, #0]
 8000cae:	685b      	ldr	r3, [r3, #4]
 8000cb0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d006      	beq.n	8000cc6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000cb8:	4b19      	ldr	r3, [pc, #100]	; (8000d20 <HAL_GPIO_Init+0x2d0>)
 8000cba:	689a      	ldr	r2, [r3, #8]
 8000cbc:	4918      	ldr	r1, [pc, #96]	; (8000d20 <HAL_GPIO_Init+0x2d0>)
 8000cbe:	69bb      	ldr	r3, [r7, #24]
 8000cc0:	4313      	orrs	r3, r2
 8000cc2:	608b      	str	r3, [r1, #8]
 8000cc4:	e006      	b.n	8000cd4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000cc6:	4b16      	ldr	r3, [pc, #88]	; (8000d20 <HAL_GPIO_Init+0x2d0>)
 8000cc8:	689a      	ldr	r2, [r3, #8]
 8000cca:	69bb      	ldr	r3, [r7, #24]
 8000ccc:	43db      	mvns	r3, r3
 8000cce:	4914      	ldr	r1, [pc, #80]	; (8000d20 <HAL_GPIO_Init+0x2d0>)
 8000cd0:	4013      	ands	r3, r2
 8000cd2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000cd4:	683b      	ldr	r3, [r7, #0]
 8000cd6:	685b      	ldr	r3, [r3, #4]
 8000cd8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d021      	beq.n	8000d24 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000ce0:	4b0f      	ldr	r3, [pc, #60]	; (8000d20 <HAL_GPIO_Init+0x2d0>)
 8000ce2:	68da      	ldr	r2, [r3, #12]
 8000ce4:	490e      	ldr	r1, [pc, #56]	; (8000d20 <HAL_GPIO_Init+0x2d0>)
 8000ce6:	69bb      	ldr	r3, [r7, #24]
 8000ce8:	4313      	orrs	r3, r2
 8000cea:	60cb      	str	r3, [r1, #12]
 8000cec:	e021      	b.n	8000d32 <HAL_GPIO_Init+0x2e2>
 8000cee:	bf00      	nop
 8000cf0:	10320000 	.word	0x10320000
 8000cf4:	10310000 	.word	0x10310000
 8000cf8:	10220000 	.word	0x10220000
 8000cfc:	10210000 	.word	0x10210000
 8000d00:	10120000 	.word	0x10120000
 8000d04:	10110000 	.word	0x10110000
 8000d08:	40021000 	.word	0x40021000
 8000d0c:	40010000 	.word	0x40010000
 8000d10:	40010800 	.word	0x40010800
 8000d14:	40010c00 	.word	0x40010c00
 8000d18:	40011000 	.word	0x40011000
 8000d1c:	40011400 	.word	0x40011400
 8000d20:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000d24:	4b0b      	ldr	r3, [pc, #44]	; (8000d54 <HAL_GPIO_Init+0x304>)
 8000d26:	68da      	ldr	r2, [r3, #12]
 8000d28:	69bb      	ldr	r3, [r7, #24]
 8000d2a:	43db      	mvns	r3, r3
 8000d2c:	4909      	ldr	r1, [pc, #36]	; (8000d54 <HAL_GPIO_Init+0x304>)
 8000d2e:	4013      	ands	r3, r2
 8000d30:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d34:	3301      	adds	r3, #1
 8000d36:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	681a      	ldr	r2, [r3, #0]
 8000d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d3e:	fa22 f303 	lsr.w	r3, r2, r3
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	f47f ae8e 	bne.w	8000a64 <HAL_GPIO_Init+0x14>
  }
}
 8000d48:	bf00      	nop
 8000d4a:	bf00      	nop
 8000d4c:	372c      	adds	r7, #44	; 0x2c
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bc80      	pop	{r7}
 8000d52:	4770      	bx	lr
 8000d54:	40010400 	.word	0x40010400

08000d58 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000d58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d5a:	b08b      	sub	sp, #44	; 0x2c
 8000d5c:	af06      	add	r7, sp, #24
 8000d5e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d101      	bne.n	8000d6a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000d66:	2301      	movs	r3, #1
 8000d68:	e0fd      	b.n	8000f66 <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8000d70:	b2db      	uxtb	r3, r3
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d106      	bne.n	8000d84 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	2200      	movs	r2, #0
 8000d7a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000d7e:	6878      	ldr	r0, [r7, #4]
 8000d80:	f007 fb26 	bl	80083d0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	2203      	movs	r2, #3
 8000d88:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	4618      	mov	r0, r3
 8000d92:	f002 ffe4 	bl	8003d5e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	603b      	str	r3, [r7, #0]
 8000d9c:	687e      	ldr	r6, [r7, #4]
 8000d9e:	466d      	mov	r5, sp
 8000da0:	f106 0410 	add.w	r4, r6, #16
 8000da4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000da6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000da8:	6823      	ldr	r3, [r4, #0]
 8000daa:	602b      	str	r3, [r5, #0]
 8000dac:	1d33      	adds	r3, r6, #4
 8000dae:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000db0:	6838      	ldr	r0, [r7, #0]
 8000db2:	f002 ffae 	bl	8003d12 <USB_CoreInit>
 8000db6:	4603      	mov	r3, r0
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d005      	beq.n	8000dc8 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	2202      	movs	r2, #2
 8000dc0:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8000dc4:	2301      	movs	r3, #1
 8000dc6:	e0ce      	b.n	8000f66 <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	2100      	movs	r1, #0
 8000dce:	4618      	mov	r0, r3
 8000dd0:	f002 ffdf 	bl	8003d92 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	73fb      	strb	r3, [r7, #15]
 8000dd8:	e04c      	b.n	8000e74 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000dda:	7bfb      	ldrb	r3, [r7, #15]
 8000ddc:	6879      	ldr	r1, [r7, #4]
 8000dde:	1c5a      	adds	r2, r3, #1
 8000de0:	4613      	mov	r3, r2
 8000de2:	009b      	lsls	r3, r3, #2
 8000de4:	4413      	add	r3, r2
 8000de6:	00db      	lsls	r3, r3, #3
 8000de8:	440b      	add	r3, r1
 8000dea:	3301      	adds	r3, #1
 8000dec:	2201      	movs	r2, #1
 8000dee:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000df0:	7bfb      	ldrb	r3, [r7, #15]
 8000df2:	6879      	ldr	r1, [r7, #4]
 8000df4:	1c5a      	adds	r2, r3, #1
 8000df6:	4613      	mov	r3, r2
 8000df8:	009b      	lsls	r3, r3, #2
 8000dfa:	4413      	add	r3, r2
 8000dfc:	00db      	lsls	r3, r3, #3
 8000dfe:	440b      	add	r3, r1
 8000e00:	7bfa      	ldrb	r2, [r7, #15]
 8000e02:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000e04:	7bfa      	ldrb	r2, [r7, #15]
 8000e06:	7bfb      	ldrb	r3, [r7, #15]
 8000e08:	b298      	uxth	r0, r3
 8000e0a:	6879      	ldr	r1, [r7, #4]
 8000e0c:	4613      	mov	r3, r2
 8000e0e:	009b      	lsls	r3, r3, #2
 8000e10:	4413      	add	r3, r2
 8000e12:	00db      	lsls	r3, r3, #3
 8000e14:	440b      	add	r3, r1
 8000e16:	3336      	adds	r3, #54	; 0x36
 8000e18:	4602      	mov	r2, r0
 8000e1a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000e1c:	7bfb      	ldrb	r3, [r7, #15]
 8000e1e:	6879      	ldr	r1, [r7, #4]
 8000e20:	1c5a      	adds	r2, r3, #1
 8000e22:	4613      	mov	r3, r2
 8000e24:	009b      	lsls	r3, r3, #2
 8000e26:	4413      	add	r3, r2
 8000e28:	00db      	lsls	r3, r3, #3
 8000e2a:	440b      	add	r3, r1
 8000e2c:	3303      	adds	r3, #3
 8000e2e:	2200      	movs	r2, #0
 8000e30:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000e32:	7bfa      	ldrb	r2, [r7, #15]
 8000e34:	6879      	ldr	r1, [r7, #4]
 8000e36:	4613      	mov	r3, r2
 8000e38:	009b      	lsls	r3, r3, #2
 8000e3a:	4413      	add	r3, r2
 8000e3c:	00db      	lsls	r3, r3, #3
 8000e3e:	440b      	add	r3, r1
 8000e40:	3338      	adds	r3, #56	; 0x38
 8000e42:	2200      	movs	r2, #0
 8000e44:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000e46:	7bfa      	ldrb	r2, [r7, #15]
 8000e48:	6879      	ldr	r1, [r7, #4]
 8000e4a:	4613      	mov	r3, r2
 8000e4c:	009b      	lsls	r3, r3, #2
 8000e4e:	4413      	add	r3, r2
 8000e50:	00db      	lsls	r3, r3, #3
 8000e52:	440b      	add	r3, r1
 8000e54:	333c      	adds	r3, #60	; 0x3c
 8000e56:	2200      	movs	r2, #0
 8000e58:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000e5a:	7bfa      	ldrb	r2, [r7, #15]
 8000e5c:	6879      	ldr	r1, [r7, #4]
 8000e5e:	4613      	mov	r3, r2
 8000e60:	009b      	lsls	r3, r3, #2
 8000e62:	4413      	add	r3, r2
 8000e64:	00db      	lsls	r3, r3, #3
 8000e66:	440b      	add	r3, r1
 8000e68:	3340      	adds	r3, #64	; 0x40
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000e6e:	7bfb      	ldrb	r3, [r7, #15]
 8000e70:	3301      	adds	r3, #1
 8000e72:	73fb      	strb	r3, [r7, #15]
 8000e74:	7bfa      	ldrb	r2, [r7, #15]
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	685b      	ldr	r3, [r3, #4]
 8000e7a:	429a      	cmp	r2, r3
 8000e7c:	d3ad      	bcc.n	8000dda <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000e7e:	2300      	movs	r3, #0
 8000e80:	73fb      	strb	r3, [r7, #15]
 8000e82:	e044      	b.n	8000f0e <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000e84:	7bfa      	ldrb	r2, [r7, #15]
 8000e86:	6879      	ldr	r1, [r7, #4]
 8000e88:	4613      	mov	r3, r2
 8000e8a:	009b      	lsls	r3, r3, #2
 8000e8c:	4413      	add	r3, r2
 8000e8e:	00db      	lsls	r3, r3, #3
 8000e90:	440b      	add	r3, r1
 8000e92:	f203 1369 	addw	r3, r3, #361	; 0x169
 8000e96:	2200      	movs	r2, #0
 8000e98:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000e9a:	7bfa      	ldrb	r2, [r7, #15]
 8000e9c:	6879      	ldr	r1, [r7, #4]
 8000e9e:	4613      	mov	r3, r2
 8000ea0:	009b      	lsls	r3, r3, #2
 8000ea2:	4413      	add	r3, r2
 8000ea4:	00db      	lsls	r3, r3, #3
 8000ea6:	440b      	add	r3, r1
 8000ea8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8000eac:	7bfa      	ldrb	r2, [r7, #15]
 8000eae:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000eb0:	7bfa      	ldrb	r2, [r7, #15]
 8000eb2:	6879      	ldr	r1, [r7, #4]
 8000eb4:	4613      	mov	r3, r2
 8000eb6:	009b      	lsls	r3, r3, #2
 8000eb8:	4413      	add	r3, r2
 8000eba:	00db      	lsls	r3, r3, #3
 8000ebc:	440b      	add	r3, r1
 8000ebe:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000ec6:	7bfa      	ldrb	r2, [r7, #15]
 8000ec8:	6879      	ldr	r1, [r7, #4]
 8000eca:	4613      	mov	r3, r2
 8000ecc:	009b      	lsls	r3, r3, #2
 8000ece:	4413      	add	r3, r2
 8000ed0:	00db      	lsls	r3, r3, #3
 8000ed2:	440b      	add	r3, r1
 8000ed4:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8000ed8:	2200      	movs	r2, #0
 8000eda:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000edc:	7bfa      	ldrb	r2, [r7, #15]
 8000ede:	6879      	ldr	r1, [r7, #4]
 8000ee0:	4613      	mov	r3, r2
 8000ee2:	009b      	lsls	r3, r3, #2
 8000ee4:	4413      	add	r3, r2
 8000ee6:	00db      	lsls	r3, r3, #3
 8000ee8:	440b      	add	r3, r1
 8000eea:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8000eee:	2200      	movs	r2, #0
 8000ef0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000ef2:	7bfa      	ldrb	r2, [r7, #15]
 8000ef4:	6879      	ldr	r1, [r7, #4]
 8000ef6:	4613      	mov	r3, r2
 8000ef8:	009b      	lsls	r3, r3, #2
 8000efa:	4413      	add	r3, r2
 8000efc:	00db      	lsls	r3, r3, #3
 8000efe:	440b      	add	r3, r1
 8000f00:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8000f04:	2200      	movs	r2, #0
 8000f06:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f08:	7bfb      	ldrb	r3, [r7, #15]
 8000f0a:	3301      	adds	r3, #1
 8000f0c:	73fb      	strb	r3, [r7, #15]
 8000f0e:	7bfa      	ldrb	r2, [r7, #15]
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	685b      	ldr	r3, [r3, #4]
 8000f14:	429a      	cmp	r2, r3
 8000f16:	d3b5      	bcc.n	8000e84 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	603b      	str	r3, [r7, #0]
 8000f1e:	687e      	ldr	r6, [r7, #4]
 8000f20:	466d      	mov	r5, sp
 8000f22:	f106 0410 	add.w	r4, r6, #16
 8000f26:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f28:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f2a:	6823      	ldr	r3, [r4, #0]
 8000f2c:	602b      	str	r3, [r5, #0]
 8000f2e:	1d33      	adds	r3, r6, #4
 8000f30:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000f32:	6838      	ldr	r0, [r7, #0]
 8000f34:	f002 ff39 	bl	8003daa <USB_DevInit>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d005      	beq.n	8000f4a <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	2202      	movs	r2, #2
 8000f42:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8000f46:	2301      	movs	r3, #1
 8000f48:	e00d      	b.n	8000f66 <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	2201      	movs	r2, #1
 8000f56:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f005 fbec 	bl	800673c <USB_DevDisconnect>

  return HAL_OK;
 8000f64:	2300      	movs	r3, #0
}
 8000f66:	4618      	mov	r0, r3
 8000f68:	3714      	adds	r7, #20
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000f6e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8000f6e:	b580      	push	{r7, lr}
 8000f70:	b082      	sub	sp, #8
 8000f72:	af00      	add	r7, sp, #0
 8000f74:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8000f7c:	2b01      	cmp	r3, #1
 8000f7e:	d101      	bne.n	8000f84 <HAL_PCD_Start+0x16>
 8000f80:	2302      	movs	r3, #2
 8000f82:	e016      	b.n	8000fb2 <HAL_PCD_Start+0x44>
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	2201      	movs	r2, #1
 8000f88:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4618      	mov	r0, r3
 8000f92:	f002 fece 	bl	8003d32 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8000f96:	2101      	movs	r1, #1
 8000f98:	6878      	ldr	r0, [r7, #4]
 8000f9a:	f007 fc8c 	bl	80088b6 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f005 fbc0 	bl	8006728 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	2200      	movs	r2, #0
 8000fac:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8000fb0:	2300      	movs	r3, #0
}
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	3708      	adds	r7, #8
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}

08000fba <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8000fba:	b580      	push	{r7, lr}
 8000fbc:	b088      	sub	sp, #32
 8000fbe:	af00      	add	r7, sp, #0
 8000fc0:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f005 fbc2 	bl	8006750 <USB_ReadInterrupts>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000fd2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000fd6:	d102      	bne.n	8000fde <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8000fd8:	6878      	ldr	r0, [r7, #4]
 8000fda:	f000 fb5f 	bl	800169c <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f005 fbb4 	bl	8006750 <USB_ReadInterrupts>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000fee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000ff2:	d112      	bne.n	800101a <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000ffc:	b29a      	uxth	r2, r3
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001006:	b292      	uxth	r2, r2
 8001008:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800100c:	6878      	ldr	r0, [r7, #4]
 800100e:	f007 fa5a 	bl	80084c6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001012:	2100      	movs	r1, #0
 8001014:	6878      	ldr	r0, [r7, #4]
 8001016:	f000 f923 	bl	8001260 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	4618      	mov	r0, r3
 8001020:	f005 fb96 	bl	8006750 <USB_ReadInterrupts>
 8001024:	4603      	mov	r3, r0
 8001026:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800102a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800102e:	d10b      	bne.n	8001048 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001038:	b29a      	uxth	r2, r3
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001042:	b292      	uxth	r2, r2
 8001044:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4618      	mov	r0, r3
 800104e:	f005 fb7f 	bl	8006750 <USB_ReadInterrupts>
 8001052:	4603      	mov	r3, r0
 8001054:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001058:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800105c:	d10b      	bne.n	8001076 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001066:	b29a      	uxth	r2, r3
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001070:	b292      	uxth	r2, r2
 8001072:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	4618      	mov	r0, r3
 800107c:	f005 fb68 	bl	8006750 <USB_ReadInterrupts>
 8001080:	4603      	mov	r3, r0
 8001082:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001086:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800108a:	d126      	bne.n	80010da <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001094:	b29a      	uxth	r2, r3
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	f022 0204 	bic.w	r2, r2, #4
 800109e:	b292      	uxth	r2, r2
 80010a0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80010ac:	b29a      	uxth	r2, r3
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	f022 0208 	bic.w	r2, r2, #8
 80010b6:	b292      	uxth	r2, r2
 80010b8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80010bc:	6878      	ldr	r0, [r7, #4]
 80010be:	f007 fa3b 	bl	8008538 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80010ca:	b29a      	uxth	r2, r3
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80010d4:	b292      	uxth	r2, r2
 80010d6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	4618      	mov	r0, r3
 80010e0:	f005 fb36 	bl	8006750 <USB_ReadInterrupts>
 80010e4:	4603      	mov	r3, r0
 80010e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80010ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80010ee:	f040 8082 	bne.w	80011f6 <HAL_PCD_IRQHandler+0x23c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 80010f2:	2300      	movs	r3, #0
 80010f4:	77fb      	strb	r3, [r7, #31]
 80010f6:	e010      	b.n	800111a <HAL_PCD_IRQHandler+0x160>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	461a      	mov	r2, r3
 80010fe:	7ffb      	ldrb	r3, [r7, #31]
 8001100:	009b      	lsls	r3, r3, #2
 8001102:	441a      	add	r2, r3
 8001104:	7ffb      	ldrb	r3, [r7, #31]
 8001106:	8812      	ldrh	r2, [r2, #0]
 8001108:	b292      	uxth	r2, r2
 800110a:	005b      	lsls	r3, r3, #1
 800110c:	3320      	adds	r3, #32
 800110e:	443b      	add	r3, r7
 8001110:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8001114:	7ffb      	ldrb	r3, [r7, #31]
 8001116:	3301      	adds	r3, #1
 8001118:	77fb      	strb	r3, [r7, #31]
 800111a:	7ffb      	ldrb	r3, [r7, #31]
 800111c:	2b07      	cmp	r3, #7
 800111e:	d9eb      	bls.n	80010f8 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001128:	b29a      	uxth	r2, r3
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f042 0201 	orr.w	r2, r2, #1
 8001132:	b292      	uxth	r2, r2
 8001134:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001140:	b29a      	uxth	r2, r3
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	f022 0201 	bic.w	r2, r2, #1
 800114a:	b292      	uxth	r2, r2
 800114c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8001150:	bf00      	nop
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800115a:	b29b      	uxth	r3, r3
 800115c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001160:	2b00      	cmp	r3, #0
 8001162:	d0f6      	beq.n	8001152 <HAL_PCD_IRQHandler+0x198>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800116c:	b29a      	uxth	r2, r3
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001176:	b292      	uxth	r2, r2
 8001178:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 800117c:	2300      	movs	r3, #0
 800117e:	77fb      	strb	r3, [r7, #31]
 8001180:	e00f      	b.n	80011a2 <HAL_PCD_IRQHandler+0x1e8>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8001182:	7ffb      	ldrb	r3, [r7, #31]
 8001184:	687a      	ldr	r2, [r7, #4]
 8001186:	6812      	ldr	r2, [r2, #0]
 8001188:	4611      	mov	r1, r2
 800118a:	7ffa      	ldrb	r2, [r7, #31]
 800118c:	0092      	lsls	r2, r2, #2
 800118e:	440a      	add	r2, r1
 8001190:	005b      	lsls	r3, r3, #1
 8001192:	3320      	adds	r3, #32
 8001194:	443b      	add	r3, r7
 8001196:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 800119a:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 800119c:	7ffb      	ldrb	r3, [r7, #31]
 800119e:	3301      	adds	r3, #1
 80011a0:	77fb      	strb	r3, [r7, #31]
 80011a2:	7ffb      	ldrb	r3, [r7, #31]
 80011a4:	2b07      	cmp	r3, #7
 80011a6:	d9ec      	bls.n	8001182 <HAL_PCD_IRQHandler+0x1c8>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80011b0:	b29a      	uxth	r2, r3
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f042 0208 	orr.w	r2, r2, #8
 80011ba:	b292      	uxth	r2, r2
 80011bc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80011c8:	b29a      	uxth	r2, r3
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80011d2:	b292      	uxth	r2, r2
 80011d4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80011e0:	b29a      	uxth	r2, r3
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f042 0204 	orr.w	r2, r2, #4
 80011ea:	b292      	uxth	r2, r2
 80011ec:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80011f0:	6878      	ldr	r0, [r7, #4]
 80011f2:	f007 f987 	bl	8008504 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	4618      	mov	r0, r3
 80011fc:	f005 faa8 	bl	8006750 <USB_ReadInterrupts>
 8001200:	4603      	mov	r3, r0
 8001202:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001206:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800120a:	d10e      	bne.n	800122a <HAL_PCD_IRQHandler+0x270>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001214:	b29a      	uxth	r2, r3
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800121e:	b292      	uxth	r2, r2
 8001220:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001224:	6878      	ldr	r0, [r7, #4]
 8001226:	f007 f940 	bl	80084aa <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	4618      	mov	r0, r3
 8001230:	f005 fa8e 	bl	8006750 <USB_ReadInterrupts>
 8001234:	4603      	mov	r3, r0
 8001236:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800123a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800123e:	d10b      	bne.n	8001258 <HAL_PCD_IRQHandler+0x29e>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001248:	b29a      	uxth	r2, r3
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001252:	b292      	uxth	r2, r2
 8001254:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8001258:	bf00      	nop
 800125a:	3720      	adds	r7, #32
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}

08001260 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b082      	sub	sp, #8
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
 8001268:	460b      	mov	r3, r1
 800126a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001272:	2b01      	cmp	r3, #1
 8001274:	d101      	bne.n	800127a <HAL_PCD_SetAddress+0x1a>
 8001276:	2302      	movs	r3, #2
 8001278:	e013      	b.n	80012a2 <HAL_PCD_SetAddress+0x42>
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	2201      	movs	r2, #1
 800127e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	78fa      	ldrb	r2, [r7, #3]
 8001286:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	78fa      	ldrb	r2, [r7, #3]
 8001290:	4611      	mov	r1, r2
 8001292:	4618      	mov	r0, r3
 8001294:	f005 fa35 	bl	8006702 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	2200      	movs	r2, #0
 800129c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80012a0:	2300      	movs	r3, #0
}
 80012a2:	4618      	mov	r0, r3
 80012a4:	3708      	adds	r7, #8
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}

080012aa <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80012aa:	b580      	push	{r7, lr}
 80012ac:	b084      	sub	sp, #16
 80012ae:	af00      	add	r7, sp, #0
 80012b0:	6078      	str	r0, [r7, #4]
 80012b2:	4608      	mov	r0, r1
 80012b4:	4611      	mov	r1, r2
 80012b6:	461a      	mov	r2, r3
 80012b8:	4603      	mov	r3, r0
 80012ba:	70fb      	strb	r3, [r7, #3]
 80012bc:	460b      	mov	r3, r1
 80012be:	803b      	strh	r3, [r7, #0]
 80012c0:	4613      	mov	r3, r2
 80012c2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80012c4:	2300      	movs	r3, #0
 80012c6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80012c8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	da0e      	bge.n	80012ee <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80012d0:	78fb      	ldrb	r3, [r7, #3]
 80012d2:	f003 0307 	and.w	r3, r3, #7
 80012d6:	1c5a      	adds	r2, r3, #1
 80012d8:	4613      	mov	r3, r2
 80012da:	009b      	lsls	r3, r3, #2
 80012dc:	4413      	add	r3, r2
 80012de:	00db      	lsls	r3, r3, #3
 80012e0:	687a      	ldr	r2, [r7, #4]
 80012e2:	4413      	add	r3, r2
 80012e4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	2201      	movs	r2, #1
 80012ea:	705a      	strb	r2, [r3, #1]
 80012ec:	e00e      	b.n	800130c <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80012ee:	78fb      	ldrb	r3, [r7, #3]
 80012f0:	f003 0207 	and.w	r2, r3, #7
 80012f4:	4613      	mov	r3, r2
 80012f6:	009b      	lsls	r3, r3, #2
 80012f8:	4413      	add	r3, r2
 80012fa:	00db      	lsls	r3, r3, #3
 80012fc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001300:	687a      	ldr	r2, [r7, #4]
 8001302:	4413      	add	r3, r2
 8001304:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	2200      	movs	r2, #0
 800130a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800130c:	78fb      	ldrb	r3, [r7, #3]
 800130e:	f003 0307 	and.w	r3, r3, #7
 8001312:	b2da      	uxtb	r2, r3
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001318:	883a      	ldrh	r2, [r7, #0]
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	78ba      	ldrb	r2, [r7, #2]
 8001322:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	785b      	ldrb	r3, [r3, #1]
 8001328:	2b00      	cmp	r3, #0
 800132a:	d004      	beq.n	8001336 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	781b      	ldrb	r3, [r3, #0]
 8001330:	b29a      	uxth	r2, r3
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001336:	78bb      	ldrb	r3, [r7, #2]
 8001338:	2b02      	cmp	r3, #2
 800133a:	d102      	bne.n	8001342 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	2200      	movs	r2, #0
 8001340:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001348:	2b01      	cmp	r3, #1
 800134a:	d101      	bne.n	8001350 <HAL_PCD_EP_Open+0xa6>
 800134c:	2302      	movs	r3, #2
 800134e:	e00e      	b.n	800136e <HAL_PCD_EP_Open+0xc4>
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	2201      	movs	r2, #1
 8001354:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	68f9      	ldr	r1, [r7, #12]
 800135e:	4618      	mov	r0, r3
 8001360:	f002 fd44 	bl	8003dec <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	2200      	movs	r2, #0
 8001368:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 800136c:	7afb      	ldrb	r3, [r7, #11]
}
 800136e:	4618      	mov	r0, r3
 8001370:	3710      	adds	r7, #16
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}

08001376 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001376:	b580      	push	{r7, lr}
 8001378:	b084      	sub	sp, #16
 800137a:	af00      	add	r7, sp, #0
 800137c:	6078      	str	r0, [r7, #4]
 800137e:	460b      	mov	r3, r1
 8001380:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001382:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001386:	2b00      	cmp	r3, #0
 8001388:	da0e      	bge.n	80013a8 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800138a:	78fb      	ldrb	r3, [r7, #3]
 800138c:	f003 0307 	and.w	r3, r3, #7
 8001390:	1c5a      	adds	r2, r3, #1
 8001392:	4613      	mov	r3, r2
 8001394:	009b      	lsls	r3, r3, #2
 8001396:	4413      	add	r3, r2
 8001398:	00db      	lsls	r3, r3, #3
 800139a:	687a      	ldr	r2, [r7, #4]
 800139c:	4413      	add	r3, r2
 800139e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	2201      	movs	r2, #1
 80013a4:	705a      	strb	r2, [r3, #1]
 80013a6:	e00e      	b.n	80013c6 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80013a8:	78fb      	ldrb	r3, [r7, #3]
 80013aa:	f003 0207 	and.w	r2, r3, #7
 80013ae:	4613      	mov	r3, r2
 80013b0:	009b      	lsls	r3, r3, #2
 80013b2:	4413      	add	r3, r2
 80013b4:	00db      	lsls	r3, r3, #3
 80013b6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80013ba:	687a      	ldr	r2, [r7, #4]
 80013bc:	4413      	add	r3, r2
 80013be:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	2200      	movs	r2, #0
 80013c4:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80013c6:	78fb      	ldrb	r3, [r7, #3]
 80013c8:	f003 0307 	and.w	r3, r3, #7
 80013cc:	b2da      	uxtb	r2, r3
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80013d8:	2b01      	cmp	r3, #1
 80013da:	d101      	bne.n	80013e0 <HAL_PCD_EP_Close+0x6a>
 80013dc:	2302      	movs	r3, #2
 80013de:	e00e      	b.n	80013fe <HAL_PCD_EP_Close+0x88>
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	2201      	movs	r2, #1
 80013e4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	68f9      	ldr	r1, [r7, #12]
 80013ee:	4618      	mov	r0, r3
 80013f0:	f003 f866 	bl	80044c0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	2200      	movs	r2, #0
 80013f8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 80013fc:	2300      	movs	r3, #0
}
 80013fe:	4618      	mov	r0, r3
 8001400:	3710      	adds	r7, #16
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}

08001406 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001406:	b580      	push	{r7, lr}
 8001408:	b086      	sub	sp, #24
 800140a:	af00      	add	r7, sp, #0
 800140c:	60f8      	str	r0, [r7, #12]
 800140e:	607a      	str	r2, [r7, #4]
 8001410:	603b      	str	r3, [r7, #0]
 8001412:	460b      	mov	r3, r1
 8001414:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001416:	7afb      	ldrb	r3, [r7, #11]
 8001418:	f003 0207 	and.w	r2, r3, #7
 800141c:	4613      	mov	r3, r2
 800141e:	009b      	lsls	r3, r3, #2
 8001420:	4413      	add	r3, r2
 8001422:	00db      	lsls	r3, r3, #3
 8001424:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001428:	68fa      	ldr	r2, [r7, #12]
 800142a:	4413      	add	r3, r2
 800142c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800142e:	697b      	ldr	r3, [r7, #20]
 8001430:	687a      	ldr	r2, [r7, #4]
 8001432:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001434:	697b      	ldr	r3, [r7, #20]
 8001436:	683a      	ldr	r2, [r7, #0]
 8001438:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800143a:	697b      	ldr	r3, [r7, #20]
 800143c:	2200      	movs	r2, #0
 800143e:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001440:	697b      	ldr	r3, [r7, #20]
 8001442:	2200      	movs	r2, #0
 8001444:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001446:	7afb      	ldrb	r3, [r7, #11]
 8001448:	f003 0307 	and.w	r3, r3, #7
 800144c:	b2da      	uxtb	r2, r3
 800144e:	697b      	ldr	r3, [r7, #20]
 8001450:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001452:	7afb      	ldrb	r3, [r7, #11]
 8001454:	f003 0307 	and.w	r3, r3, #7
 8001458:	2b00      	cmp	r3, #0
 800145a:	d106      	bne.n	800146a <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	6979      	ldr	r1, [r7, #20]
 8001462:	4618      	mov	r0, r3
 8001464:	f003 fa18 	bl	8004898 <USB_EPStartXfer>
 8001468:	e005      	b.n	8001476 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	6979      	ldr	r1, [r7, #20]
 8001470:	4618      	mov	r0, r3
 8001472:	f003 fa11 	bl	8004898 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001476:	2300      	movs	r3, #0
}
 8001478:	4618      	mov	r0, r3
 800147a:	3718      	adds	r7, #24
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}

08001480 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001480:	b480      	push	{r7}
 8001482:	b083      	sub	sp, #12
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
 8001488:	460b      	mov	r3, r1
 800148a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800148c:	78fb      	ldrb	r3, [r7, #3]
 800148e:	f003 0207 	and.w	r2, r3, #7
 8001492:	6879      	ldr	r1, [r7, #4]
 8001494:	4613      	mov	r3, r2
 8001496:	009b      	lsls	r3, r3, #2
 8001498:	4413      	add	r3, r2
 800149a:	00db      	lsls	r3, r3, #3
 800149c:	440b      	add	r3, r1
 800149e:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80014a2:	681b      	ldr	r3, [r3, #0]
}
 80014a4:	4618      	mov	r0, r3
 80014a6:	370c      	adds	r7, #12
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bc80      	pop	{r7}
 80014ac:	4770      	bx	lr

080014ae <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80014ae:	b580      	push	{r7, lr}
 80014b0:	b086      	sub	sp, #24
 80014b2:	af00      	add	r7, sp, #0
 80014b4:	60f8      	str	r0, [r7, #12]
 80014b6:	607a      	str	r2, [r7, #4]
 80014b8:	603b      	str	r3, [r7, #0]
 80014ba:	460b      	mov	r3, r1
 80014bc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80014be:	7afb      	ldrb	r3, [r7, #11]
 80014c0:	f003 0307 	and.w	r3, r3, #7
 80014c4:	1c5a      	adds	r2, r3, #1
 80014c6:	4613      	mov	r3, r2
 80014c8:	009b      	lsls	r3, r3, #2
 80014ca:	4413      	add	r3, r2
 80014cc:	00db      	lsls	r3, r3, #3
 80014ce:	68fa      	ldr	r2, [r7, #12]
 80014d0:	4413      	add	r3, r2
 80014d2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80014d4:	697b      	ldr	r3, [r7, #20]
 80014d6:	687a      	ldr	r2, [r7, #4]
 80014d8:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80014da:	697b      	ldr	r3, [r7, #20]
 80014dc:	683a      	ldr	r2, [r7, #0]
 80014de:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 80014e0:	697b      	ldr	r3, [r7, #20]
 80014e2:	2201      	movs	r2, #1
 80014e4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80014e8:	697b      	ldr	r3, [r7, #20]
 80014ea:	683a      	ldr	r2, [r7, #0]
 80014ec:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80014ee:	697b      	ldr	r3, [r7, #20]
 80014f0:	2200      	movs	r2, #0
 80014f2:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80014f4:	697b      	ldr	r3, [r7, #20]
 80014f6:	2201      	movs	r2, #1
 80014f8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80014fa:	7afb      	ldrb	r3, [r7, #11]
 80014fc:	f003 0307 	and.w	r3, r3, #7
 8001500:	b2da      	uxtb	r2, r3
 8001502:	697b      	ldr	r3, [r7, #20]
 8001504:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001506:	7afb      	ldrb	r3, [r7, #11]
 8001508:	f003 0307 	and.w	r3, r3, #7
 800150c:	2b00      	cmp	r3, #0
 800150e:	d106      	bne.n	800151e <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	6979      	ldr	r1, [r7, #20]
 8001516:	4618      	mov	r0, r3
 8001518:	f003 f9be 	bl	8004898 <USB_EPStartXfer>
 800151c:	e005      	b.n	800152a <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	6979      	ldr	r1, [r7, #20]
 8001524:	4618      	mov	r0, r3
 8001526:	f003 f9b7 	bl	8004898 <USB_EPStartXfer>
  }

  return HAL_OK;
 800152a:	2300      	movs	r3, #0
}
 800152c:	4618      	mov	r0, r3
 800152e:	3718      	adds	r7, #24
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}

08001534 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b084      	sub	sp, #16
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
 800153c:	460b      	mov	r3, r1
 800153e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001540:	78fb      	ldrb	r3, [r7, #3]
 8001542:	f003 0207 	and.w	r2, r3, #7
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	685b      	ldr	r3, [r3, #4]
 800154a:	429a      	cmp	r2, r3
 800154c:	d901      	bls.n	8001552 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800154e:	2301      	movs	r3, #1
 8001550:	e04c      	b.n	80015ec <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001552:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001556:	2b00      	cmp	r3, #0
 8001558:	da0e      	bge.n	8001578 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800155a:	78fb      	ldrb	r3, [r7, #3]
 800155c:	f003 0307 	and.w	r3, r3, #7
 8001560:	1c5a      	adds	r2, r3, #1
 8001562:	4613      	mov	r3, r2
 8001564:	009b      	lsls	r3, r3, #2
 8001566:	4413      	add	r3, r2
 8001568:	00db      	lsls	r3, r3, #3
 800156a:	687a      	ldr	r2, [r7, #4]
 800156c:	4413      	add	r3, r2
 800156e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	2201      	movs	r2, #1
 8001574:	705a      	strb	r2, [r3, #1]
 8001576:	e00c      	b.n	8001592 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001578:	78fa      	ldrb	r2, [r7, #3]
 800157a:	4613      	mov	r3, r2
 800157c:	009b      	lsls	r3, r3, #2
 800157e:	4413      	add	r3, r2
 8001580:	00db      	lsls	r3, r3, #3
 8001582:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001586:	687a      	ldr	r2, [r7, #4]
 8001588:	4413      	add	r3, r2
 800158a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	2200      	movs	r2, #0
 8001590:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	2201      	movs	r2, #1
 8001596:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001598:	78fb      	ldrb	r3, [r7, #3]
 800159a:	f003 0307 	and.w	r3, r3, #7
 800159e:	b2da      	uxtb	r2, r3
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80015aa:	2b01      	cmp	r3, #1
 80015ac:	d101      	bne.n	80015b2 <HAL_PCD_EP_SetStall+0x7e>
 80015ae:	2302      	movs	r3, #2
 80015b0:	e01c      	b.n	80015ec <HAL_PCD_EP_SetStall+0xb8>
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	2201      	movs	r2, #1
 80015b6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	68f9      	ldr	r1, [r7, #12]
 80015c0:	4618      	mov	r0, r3
 80015c2:	f004 ffa1 	bl	8006508 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80015c6:	78fb      	ldrb	r3, [r7, #3]
 80015c8:	f003 0307 	and.w	r3, r3, #7
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d108      	bne.n	80015e2 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681a      	ldr	r2, [r3, #0]
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80015da:	4619      	mov	r1, r3
 80015dc:	4610      	mov	r0, r2
 80015de:	f005 f8c6 	bl	800676e <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	2200      	movs	r2, #0
 80015e6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80015ea:	2300      	movs	r3, #0
}
 80015ec:	4618      	mov	r0, r3
 80015ee:	3710      	adds	r7, #16
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}

080015f4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b084      	sub	sp, #16
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
 80015fc:	460b      	mov	r3, r1
 80015fe:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001600:	78fb      	ldrb	r3, [r7, #3]
 8001602:	f003 020f 	and.w	r2, r3, #15
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	685b      	ldr	r3, [r3, #4]
 800160a:	429a      	cmp	r2, r3
 800160c:	d901      	bls.n	8001612 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800160e:	2301      	movs	r3, #1
 8001610:	e040      	b.n	8001694 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001612:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001616:	2b00      	cmp	r3, #0
 8001618:	da0e      	bge.n	8001638 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800161a:	78fb      	ldrb	r3, [r7, #3]
 800161c:	f003 0307 	and.w	r3, r3, #7
 8001620:	1c5a      	adds	r2, r3, #1
 8001622:	4613      	mov	r3, r2
 8001624:	009b      	lsls	r3, r3, #2
 8001626:	4413      	add	r3, r2
 8001628:	00db      	lsls	r3, r3, #3
 800162a:	687a      	ldr	r2, [r7, #4]
 800162c:	4413      	add	r3, r2
 800162e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	2201      	movs	r2, #1
 8001634:	705a      	strb	r2, [r3, #1]
 8001636:	e00e      	b.n	8001656 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001638:	78fb      	ldrb	r3, [r7, #3]
 800163a:	f003 0207 	and.w	r2, r3, #7
 800163e:	4613      	mov	r3, r2
 8001640:	009b      	lsls	r3, r3, #2
 8001642:	4413      	add	r3, r2
 8001644:	00db      	lsls	r3, r3, #3
 8001646:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800164a:	687a      	ldr	r2, [r7, #4]
 800164c:	4413      	add	r3, r2
 800164e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	2200      	movs	r2, #0
 8001654:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	2200      	movs	r2, #0
 800165a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800165c:	78fb      	ldrb	r3, [r7, #3]
 800165e:	f003 0307 	and.w	r3, r3, #7
 8001662:	b2da      	uxtb	r2, r3
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800166e:	2b01      	cmp	r3, #1
 8001670:	d101      	bne.n	8001676 <HAL_PCD_EP_ClrStall+0x82>
 8001672:	2302      	movs	r3, #2
 8001674:	e00e      	b.n	8001694 <HAL_PCD_EP_ClrStall+0xa0>
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	2201      	movs	r2, #1
 800167a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	68f9      	ldr	r1, [r7, #12]
 8001684:	4618      	mov	r0, r3
 8001686:	f004 ff8f 	bl	80065a8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	2200      	movs	r2, #0
 800168e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001692:	2300      	movs	r3, #0
}
 8001694:	4618      	mov	r0, r3
 8001696:	3710      	adds	r7, #16
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}

0800169c <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b08e      	sub	sp, #56	; 0x38
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80016a4:	e2ec      	b.n	8001c80 <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80016ae:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80016b0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80016b2:	b2db      	uxtb	r3, r3
 80016b4:	f003 030f 	and.w	r3, r3, #15
 80016b8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 80016bc:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	f040 8161 	bne.w	8001988 <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80016c6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80016c8:	f003 0310 	and.w	r3, r3, #16
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d152      	bne.n	8001776 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	881b      	ldrh	r3, [r3, #0]
 80016d6:	b29b      	uxth	r3, r3
 80016d8:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80016dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80016e0:	81fb      	strh	r3, [r7, #14]
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681a      	ldr	r2, [r3, #0]
 80016e6:	89fb      	ldrh	r3, [r7, #14]
 80016e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80016ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80016f0:	b29b      	uxth	r3, r3
 80016f2:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	3328      	adds	r3, #40	; 0x28
 80016f8:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001702:	b29b      	uxth	r3, r3
 8001704:	461a      	mov	r2, r3
 8001706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001708:	781b      	ldrb	r3, [r3, #0]
 800170a:	00db      	lsls	r3, r3, #3
 800170c:	4413      	add	r3, r2
 800170e:	3302      	adds	r3, #2
 8001710:	005b      	lsls	r3, r3, #1
 8001712:	687a      	ldr	r2, [r7, #4]
 8001714:	6812      	ldr	r2, [r2, #0]
 8001716:	4413      	add	r3, r2
 8001718:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800171c:	881b      	ldrh	r3, [r3, #0]
 800171e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001724:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001728:	695a      	ldr	r2, [r3, #20]
 800172a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800172c:	69db      	ldr	r3, [r3, #28]
 800172e:	441a      	add	r2, r3
 8001730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001732:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001734:	2100      	movs	r1, #0
 8001736:	6878      	ldr	r0, [r7, #4]
 8001738:	f006 fe9d 	bl	8008476 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001742:	b2db      	uxtb	r3, r3
 8001744:	2b00      	cmp	r3, #0
 8001746:	f000 829b 	beq.w	8001c80 <PCD_EP_ISR_Handler+0x5e4>
 800174a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800174c:	699b      	ldr	r3, [r3, #24]
 800174e:	2b00      	cmp	r3, #0
 8001750:	f040 8296 	bne.w	8001c80 <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800175a:	b2db      	uxtb	r3, r3
 800175c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001760:	b2da      	uxtb	r2, r3
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	b292      	uxth	r2, r2
 8001768:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	2200      	movs	r2, #0
 8001770:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001774:	e284      	b.n	8001c80 <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800177c:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	881b      	ldrh	r3, [r3, #0]
 8001784:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001786:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001788:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800178c:	2b00      	cmp	r3, #0
 800178e:	d034      	beq.n	80017fa <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001798:	b29b      	uxth	r3, r3
 800179a:	461a      	mov	r2, r3
 800179c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800179e:	781b      	ldrb	r3, [r3, #0]
 80017a0:	00db      	lsls	r3, r3, #3
 80017a2:	4413      	add	r3, r2
 80017a4:	3306      	adds	r3, #6
 80017a6:	005b      	lsls	r3, r3, #1
 80017a8:	687a      	ldr	r2, [r7, #4]
 80017aa:	6812      	ldr	r2, [r2, #0]
 80017ac:	4413      	add	r3, r2
 80017ae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80017b2:	881b      	ldrh	r3, [r3, #0]
 80017b4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80017b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ba:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6818      	ldr	r0, [r3, #0]
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 80017c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017c8:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80017ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017cc:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80017ce:	b29b      	uxth	r3, r3
 80017d0:	f005 f81d 	bl	800680e <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	881b      	ldrh	r3, [r3, #0]
 80017da:	b29a      	uxth	r2, r3
 80017dc:	f640 738f 	movw	r3, #3983	; 0xf8f
 80017e0:	4013      	ands	r3, r2
 80017e2:	823b      	strh	r3, [r7, #16]
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	8a3a      	ldrh	r2, [r7, #16]
 80017ea:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80017ee:	b292      	uxth	r2, r2
 80017f0:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80017f2:	6878      	ldr	r0, [r7, #4]
 80017f4:	f006 fe12 	bl	800841c <HAL_PCD_SetupStageCallback>
 80017f8:	e242      	b.n	8001c80 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80017fa:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80017fe:	2b00      	cmp	r3, #0
 8001800:	f280 823e 	bge.w	8001c80 <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	881b      	ldrh	r3, [r3, #0]
 800180a:	b29a      	uxth	r2, r3
 800180c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001810:	4013      	ands	r3, r2
 8001812:	83bb      	strh	r3, [r7, #28]
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	8bba      	ldrh	r2, [r7, #28]
 800181a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800181e:	b292      	uxth	r2, r2
 8001820:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800182a:	b29b      	uxth	r3, r3
 800182c:	461a      	mov	r2, r3
 800182e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001830:	781b      	ldrb	r3, [r3, #0]
 8001832:	00db      	lsls	r3, r3, #3
 8001834:	4413      	add	r3, r2
 8001836:	3306      	adds	r3, #6
 8001838:	005b      	lsls	r3, r3, #1
 800183a:	687a      	ldr	r2, [r7, #4]
 800183c:	6812      	ldr	r2, [r2, #0]
 800183e:	4413      	add	r3, r2
 8001840:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001844:	881b      	ldrh	r3, [r3, #0]
 8001846:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800184a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800184c:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800184e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001850:	69db      	ldr	r3, [r3, #28]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d019      	beq.n	800188a <PCD_EP_ISR_Handler+0x1ee>
 8001856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001858:	695b      	ldr	r3, [r3, #20]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d015      	beq.n	800188a <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6818      	ldr	r0, [r3, #0]
 8001862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001864:	6959      	ldr	r1, [r3, #20]
 8001866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001868:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800186a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800186c:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800186e:	b29b      	uxth	r3, r3
 8001870:	f004 ffcd 	bl	800680e <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001876:	695a      	ldr	r2, [r3, #20]
 8001878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800187a:	69db      	ldr	r3, [r3, #28]
 800187c:	441a      	add	r2, r3
 800187e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001880:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001882:	2100      	movs	r1, #0
 8001884:	6878      	ldr	r0, [r7, #4]
 8001886:	f006 fddb 	bl	8008440 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	881b      	ldrh	r3, [r3, #0]
 8001890:	b29b      	uxth	r3, r3
 8001892:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001896:	2b00      	cmp	r3, #0
 8001898:	f040 81f2 	bne.w	8001c80 <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	61bb      	str	r3, [r7, #24]
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80018aa:	b29b      	uxth	r3, r3
 80018ac:	461a      	mov	r2, r3
 80018ae:	69bb      	ldr	r3, [r7, #24]
 80018b0:	4413      	add	r3, r2
 80018b2:	61bb      	str	r3, [r7, #24]
 80018b4:	69bb      	ldr	r3, [r7, #24]
 80018b6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80018ba:	617b      	str	r3, [r7, #20]
 80018bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018be:	691b      	ldr	r3, [r3, #16]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d112      	bne.n	80018ea <PCD_EP_ISR_Handler+0x24e>
 80018c4:	697b      	ldr	r3, [r7, #20]
 80018c6:	881b      	ldrh	r3, [r3, #0]
 80018c8:	b29b      	uxth	r3, r3
 80018ca:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80018ce:	b29a      	uxth	r2, r3
 80018d0:	697b      	ldr	r3, [r7, #20]
 80018d2:	801a      	strh	r2, [r3, #0]
 80018d4:	697b      	ldr	r3, [r7, #20]
 80018d6:	881b      	ldrh	r3, [r3, #0]
 80018d8:	b29b      	uxth	r3, r3
 80018da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80018de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80018e2:	b29a      	uxth	r2, r3
 80018e4:	697b      	ldr	r3, [r7, #20]
 80018e6:	801a      	strh	r2, [r3, #0]
 80018e8:	e02f      	b.n	800194a <PCD_EP_ISR_Handler+0x2ae>
 80018ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ec:	691b      	ldr	r3, [r3, #16]
 80018ee:	2b3e      	cmp	r3, #62	; 0x3e
 80018f0:	d813      	bhi.n	800191a <PCD_EP_ISR_Handler+0x27e>
 80018f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f4:	691b      	ldr	r3, [r3, #16]
 80018f6:	085b      	lsrs	r3, r3, #1
 80018f8:	633b      	str	r3, [r7, #48]	; 0x30
 80018fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018fc:	691b      	ldr	r3, [r3, #16]
 80018fe:	f003 0301 	and.w	r3, r3, #1
 8001902:	2b00      	cmp	r3, #0
 8001904:	d002      	beq.n	800190c <PCD_EP_ISR_Handler+0x270>
 8001906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001908:	3301      	adds	r3, #1
 800190a:	633b      	str	r3, [r7, #48]	; 0x30
 800190c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800190e:	b29b      	uxth	r3, r3
 8001910:	029b      	lsls	r3, r3, #10
 8001912:	b29a      	uxth	r2, r3
 8001914:	697b      	ldr	r3, [r7, #20]
 8001916:	801a      	strh	r2, [r3, #0]
 8001918:	e017      	b.n	800194a <PCD_EP_ISR_Handler+0x2ae>
 800191a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800191c:	691b      	ldr	r3, [r3, #16]
 800191e:	095b      	lsrs	r3, r3, #5
 8001920:	633b      	str	r3, [r7, #48]	; 0x30
 8001922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001924:	691b      	ldr	r3, [r3, #16]
 8001926:	f003 031f 	and.w	r3, r3, #31
 800192a:	2b00      	cmp	r3, #0
 800192c:	d102      	bne.n	8001934 <PCD_EP_ISR_Handler+0x298>
 800192e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001930:	3b01      	subs	r3, #1
 8001932:	633b      	str	r3, [r7, #48]	; 0x30
 8001934:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001936:	b29b      	uxth	r3, r3
 8001938:	029b      	lsls	r3, r3, #10
 800193a:	b29b      	uxth	r3, r3
 800193c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001940:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001944:	b29a      	uxth	r2, r3
 8001946:	697b      	ldr	r3, [r7, #20]
 8001948:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	881b      	ldrh	r3, [r3, #0]
 8001950:	b29b      	uxth	r3, r3
 8001952:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001956:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800195a:	827b      	strh	r3, [r7, #18]
 800195c:	8a7b      	ldrh	r3, [r7, #18]
 800195e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8001962:	827b      	strh	r3, [r7, #18]
 8001964:	8a7b      	ldrh	r3, [r7, #18]
 8001966:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800196a:	827b      	strh	r3, [r7, #18]
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681a      	ldr	r2, [r3, #0]
 8001970:	8a7b      	ldrh	r3, [r7, #18]
 8001972:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001976:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800197a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800197e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001982:	b29b      	uxth	r3, r3
 8001984:	8013      	strh	r3, [r2, #0]
 8001986:	e17b      	b.n	8001c80 <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	461a      	mov	r2, r3
 800198e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001992:	009b      	lsls	r3, r3, #2
 8001994:	4413      	add	r3, r2
 8001996:	881b      	ldrh	r3, [r3, #0]
 8001998:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800199a:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800199e:	2b00      	cmp	r3, #0
 80019a0:	f280 80ea 	bge.w	8001b78 <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	461a      	mov	r2, r3
 80019aa:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80019ae:	009b      	lsls	r3, r3, #2
 80019b0:	4413      	add	r3, r2
 80019b2:	881b      	ldrh	r3, [r3, #0]
 80019b4:	b29a      	uxth	r2, r3
 80019b6:	f640 738f 	movw	r3, #3983	; 0xf8f
 80019ba:	4013      	ands	r3, r2
 80019bc:	853b      	strh	r3, [r7, #40]	; 0x28
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	461a      	mov	r2, r3
 80019c4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80019c8:	009b      	lsls	r3, r3, #2
 80019ca:	4413      	add	r3, r2
 80019cc:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80019ce:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80019d2:	b292      	uxth	r2, r2
 80019d4:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80019d6:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80019da:	4613      	mov	r3, r2
 80019dc:	009b      	lsls	r3, r3, #2
 80019de:	4413      	add	r3, r2
 80019e0:	00db      	lsls	r3, r3, #3
 80019e2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80019e6:	687a      	ldr	r2, [r7, #4]
 80019e8:	4413      	add	r3, r2
 80019ea:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80019ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ee:	7b1b      	ldrb	r3, [r3, #12]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d122      	bne.n	8001a3a <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80019fc:	b29b      	uxth	r3, r3
 80019fe:	461a      	mov	r2, r3
 8001a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a02:	781b      	ldrb	r3, [r3, #0]
 8001a04:	00db      	lsls	r3, r3, #3
 8001a06:	4413      	add	r3, r2
 8001a08:	3306      	adds	r3, #6
 8001a0a:	005b      	lsls	r3, r3, #1
 8001a0c:	687a      	ldr	r2, [r7, #4]
 8001a0e:	6812      	ldr	r2, [r2, #0]
 8001a10:	4413      	add	r3, r2
 8001a12:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001a16:	881b      	ldrh	r3, [r3, #0]
 8001a18:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001a1c:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8001a1e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	f000 8087 	beq.w	8001b34 <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6818      	ldr	r0, [r3, #0]
 8001a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a2c:	6959      	ldr	r1, [r3, #20]
 8001a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a30:	88da      	ldrh	r2, [r3, #6]
 8001a32:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001a34:	f004 feeb 	bl	800680e <USB_ReadPMA>
 8001a38:	e07c      	b.n	8001b34 <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8001a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a3c:	78db      	ldrb	r3, [r3, #3]
 8001a3e:	2b02      	cmp	r3, #2
 8001a40:	d108      	bne.n	8001a54 <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001a42:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001a44:	461a      	mov	r2, r3
 8001a46:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001a48:	6878      	ldr	r0, [r7, #4]
 8001a4a:	f000 f927 	bl	8001c9c <HAL_PCD_EP_DB_Receive>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	86fb      	strh	r3, [r7, #54]	; 0x36
 8001a52:	e06f      	b.n	8001b34 <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	461a      	mov	r2, r3
 8001a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a5c:	781b      	ldrb	r3, [r3, #0]
 8001a5e:	009b      	lsls	r3, r3, #2
 8001a60:	4413      	add	r3, r2
 8001a62:	881b      	ldrh	r3, [r3, #0]
 8001a64:	b29b      	uxth	r3, r3
 8001a66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001a6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001a6e:	847b      	strh	r3, [r7, #34]	; 0x22
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	461a      	mov	r2, r3
 8001a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a78:	781b      	ldrb	r3, [r3, #0]
 8001a7a:	009b      	lsls	r3, r3, #2
 8001a7c:	441a      	add	r2, r3
 8001a7e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001a80:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001a84:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001a88:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a8c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001a90:	b29b      	uxth	r3, r3
 8001a92:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	461a      	mov	r2, r3
 8001a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a9c:	781b      	ldrb	r3, [r3, #0]
 8001a9e:	009b      	lsls	r3, r3, #2
 8001aa0:	4413      	add	r3, r2
 8001aa2:	881b      	ldrh	r3, [r3, #0]
 8001aa4:	b29b      	uxth	r3, r3
 8001aa6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d021      	beq.n	8001af2 <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001ab6:	b29b      	uxth	r3, r3
 8001ab8:	461a      	mov	r2, r3
 8001aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001abc:	781b      	ldrb	r3, [r3, #0]
 8001abe:	00db      	lsls	r3, r3, #3
 8001ac0:	4413      	add	r3, r2
 8001ac2:	3302      	adds	r3, #2
 8001ac4:	005b      	lsls	r3, r3, #1
 8001ac6:	687a      	ldr	r2, [r7, #4]
 8001ac8:	6812      	ldr	r2, [r2, #0]
 8001aca:	4413      	add	r3, r2
 8001acc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001ad0:	881b      	ldrh	r3, [r3, #0]
 8001ad2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001ad6:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8001ad8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d02a      	beq.n	8001b34 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6818      	ldr	r0, [r3, #0]
 8001ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae4:	6959      	ldr	r1, [r3, #20]
 8001ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae8:	891a      	ldrh	r2, [r3, #8]
 8001aea:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001aec:	f004 fe8f 	bl	800680e <USB_ReadPMA>
 8001af0:	e020      	b.n	8001b34 <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001afa:	b29b      	uxth	r3, r3
 8001afc:	461a      	mov	r2, r3
 8001afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b00:	781b      	ldrb	r3, [r3, #0]
 8001b02:	00db      	lsls	r3, r3, #3
 8001b04:	4413      	add	r3, r2
 8001b06:	3306      	adds	r3, #6
 8001b08:	005b      	lsls	r3, r3, #1
 8001b0a:	687a      	ldr	r2, [r7, #4]
 8001b0c:	6812      	ldr	r2, [r2, #0]
 8001b0e:	4413      	add	r3, r2
 8001b10:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001b14:	881b      	ldrh	r3, [r3, #0]
 8001b16:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001b1a:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8001b1c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d008      	beq.n	8001b34 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6818      	ldr	r0, [r3, #0]
 8001b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b28:	6959      	ldr	r1, [r3, #20]
 8001b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b2c:	895a      	ldrh	r2, [r3, #10]
 8001b2e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001b30:	f004 fe6d 	bl	800680e <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8001b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b36:	69da      	ldr	r2, [r3, #28]
 8001b38:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001b3a:	441a      	add	r2, r3
 8001b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b3e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b42:	695a      	ldr	r2, [r3, #20]
 8001b44:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001b46:	441a      	add	r2, r3
 8001b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b4a:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b4e:	699b      	ldr	r3, [r3, #24]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d004      	beq.n	8001b5e <PCD_EP_ISR_Handler+0x4c2>
 8001b54:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b58:	691b      	ldr	r3, [r3, #16]
 8001b5a:	429a      	cmp	r2, r3
 8001b5c:	d206      	bcs.n	8001b6c <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b60:	781b      	ldrb	r3, [r3, #0]
 8001b62:	4619      	mov	r1, r3
 8001b64:	6878      	ldr	r0, [r7, #4]
 8001b66:	f006 fc6b 	bl	8008440 <HAL_PCD_DataOutStageCallback>
 8001b6a:	e005      	b.n	8001b78 <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001b72:	4618      	mov	r0, r3
 8001b74:	f002 fe90 	bl	8004898 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001b78:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001b7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d07e      	beq.n	8001c80 <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 8001b82:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001b86:	1c5a      	adds	r2, r3, #1
 8001b88:	4613      	mov	r3, r2
 8001b8a:	009b      	lsls	r3, r3, #2
 8001b8c:	4413      	add	r3, r2
 8001b8e:	00db      	lsls	r3, r3, #3
 8001b90:	687a      	ldr	r2, [r7, #4]
 8001b92:	4413      	add	r3, r2
 8001b94:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	461a      	mov	r2, r3
 8001b9c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001ba0:	009b      	lsls	r3, r3, #2
 8001ba2:	4413      	add	r3, r2
 8001ba4:	881b      	ldrh	r3, [r3, #0]
 8001ba6:	b29b      	uxth	r3, r3
 8001ba8:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001bac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001bb0:	843b      	strh	r3, [r7, #32]
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	461a      	mov	r2, r3
 8001bb8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001bbc:	009b      	lsls	r3, r3, #2
 8001bbe:	441a      	add	r2, r3
 8001bc0:	8c3b      	ldrh	r3, [r7, #32]
 8001bc2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001bc6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001bca:	b29b      	uxth	r3, r3
 8001bcc:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8001bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bd0:	78db      	ldrb	r3, [r3, #3]
 8001bd2:	2b03      	cmp	r3, #3
 8001bd4:	d00c      	beq.n	8001bf0 <PCD_EP_ISR_Handler+0x554>
 8001bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bd8:	78db      	ldrb	r3, [r3, #3]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d008      	beq.n	8001bf0 <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8001bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001be0:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8001be2:	2b02      	cmp	r3, #2
 8001be4:	d146      	bne.n	8001c74 <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8001be6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001be8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d141      	bne.n	8001c74 <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001bf8:	b29b      	uxth	r3, r3
 8001bfa:	461a      	mov	r2, r3
 8001bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bfe:	781b      	ldrb	r3, [r3, #0]
 8001c00:	00db      	lsls	r3, r3, #3
 8001c02:	4413      	add	r3, r2
 8001c04:	3302      	adds	r3, #2
 8001c06:	005b      	lsls	r3, r3, #1
 8001c08:	687a      	ldr	r2, [r7, #4]
 8001c0a:	6812      	ldr	r2, [r2, #0]
 8001c0c:	4413      	add	r3, r2
 8001c0e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001c12:	881b      	ldrh	r3, [r3, #0]
 8001c14:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001c18:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8001c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c1c:	699a      	ldr	r2, [r3, #24]
 8001c1e:	8bfb      	ldrh	r3, [r7, #30]
 8001c20:	429a      	cmp	r2, r3
 8001c22:	d906      	bls.n	8001c32 <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 8001c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c26:	699a      	ldr	r2, [r3, #24]
 8001c28:	8bfb      	ldrh	r3, [r7, #30]
 8001c2a:	1ad2      	subs	r2, r2, r3
 8001c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c2e:	619a      	str	r2, [r3, #24]
 8001c30:	e002      	b.n	8001c38 <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 8001c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c34:	2200      	movs	r2, #0
 8001c36:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8001c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c3a:	699b      	ldr	r3, [r3, #24]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d106      	bne.n	8001c4e <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c42:	781b      	ldrb	r3, [r3, #0]
 8001c44:	4619      	mov	r1, r3
 8001c46:	6878      	ldr	r0, [r7, #4]
 8001c48:	f006 fc15 	bl	8008476 <HAL_PCD_DataInStageCallback>
 8001c4c:	e018      	b.n	8001c80 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8001c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c50:	695a      	ldr	r2, [r3, #20]
 8001c52:	8bfb      	ldrh	r3, [r7, #30]
 8001c54:	441a      	add	r2, r3
 8001c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c58:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8001c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c5c:	69da      	ldr	r2, [r3, #28]
 8001c5e:	8bfb      	ldrh	r3, [r7, #30]
 8001c60:	441a      	add	r2, r3
 8001c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c64:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	f002 fe13 	bl	8004898 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8001c72:	e005      	b.n	8001c80 <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8001c74:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001c76:	461a      	mov	r2, r3
 8001c78:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001c7a:	6878      	ldr	r0, [r7, #4]
 8001c7c:	f000 f91b 	bl	8001eb6 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001c88:	b29b      	uxth	r3, r3
 8001c8a:	b21b      	sxth	r3, r3
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	f6ff ad0a 	blt.w	80016a6 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8001c92:	2300      	movs	r3, #0
}
 8001c94:	4618      	mov	r0, r3
 8001c96:	3738      	adds	r7, #56	; 0x38
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bd80      	pop	{r7, pc}

08001c9c <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b088      	sub	sp, #32
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	60f8      	str	r0, [r7, #12]
 8001ca4:	60b9      	str	r1, [r7, #8]
 8001ca6:	4613      	mov	r3, r2
 8001ca8:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001caa:	88fb      	ldrh	r3, [r7, #6]
 8001cac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d07e      	beq.n	8001db2 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001cbc:	b29b      	uxth	r3, r3
 8001cbe:	461a      	mov	r2, r3
 8001cc0:	68bb      	ldr	r3, [r7, #8]
 8001cc2:	781b      	ldrb	r3, [r3, #0]
 8001cc4:	00db      	lsls	r3, r3, #3
 8001cc6:	4413      	add	r3, r2
 8001cc8:	3302      	adds	r3, #2
 8001cca:	005b      	lsls	r3, r3, #1
 8001ccc:	68fa      	ldr	r2, [r7, #12]
 8001cce:	6812      	ldr	r2, [r2, #0]
 8001cd0:	4413      	add	r3, r2
 8001cd2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001cd6:	881b      	ldrh	r3, [r3, #0]
 8001cd8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001cdc:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001cde:	68bb      	ldr	r3, [r7, #8]
 8001ce0:	699a      	ldr	r2, [r3, #24]
 8001ce2:	8b7b      	ldrh	r3, [r7, #26]
 8001ce4:	429a      	cmp	r2, r3
 8001ce6:	d306      	bcc.n	8001cf6 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8001ce8:	68bb      	ldr	r3, [r7, #8]
 8001cea:	699a      	ldr	r2, [r3, #24]
 8001cec:	8b7b      	ldrh	r3, [r7, #26]
 8001cee:	1ad2      	subs	r2, r2, r3
 8001cf0:	68bb      	ldr	r3, [r7, #8]
 8001cf2:	619a      	str	r2, [r3, #24]
 8001cf4:	e002      	b.n	8001cfc <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8001cf6:	68bb      	ldr	r3, [r7, #8]
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001cfc:	68bb      	ldr	r3, [r7, #8]
 8001cfe:	699b      	ldr	r3, [r3, #24]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d123      	bne.n	8001d4c <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	461a      	mov	r2, r3
 8001d0a:	68bb      	ldr	r3, [r7, #8]
 8001d0c:	781b      	ldrb	r3, [r3, #0]
 8001d0e:	009b      	lsls	r3, r3, #2
 8001d10:	4413      	add	r3, r2
 8001d12:	881b      	ldrh	r3, [r3, #0]
 8001d14:	b29b      	uxth	r3, r3
 8001d16:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001d1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d1e:	833b      	strh	r3, [r7, #24]
 8001d20:	8b3b      	ldrh	r3, [r7, #24]
 8001d22:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001d26:	833b      	strh	r3, [r7, #24]
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	461a      	mov	r2, r3
 8001d2e:	68bb      	ldr	r3, [r7, #8]
 8001d30:	781b      	ldrb	r3, [r3, #0]
 8001d32:	009b      	lsls	r3, r3, #2
 8001d34:	441a      	add	r2, r3
 8001d36:	8b3b      	ldrh	r3, [r7, #24]
 8001d38:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001d3c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001d40:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d48:	b29b      	uxth	r3, r3
 8001d4a:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001d4c:	88fb      	ldrh	r3, [r7, #6]
 8001d4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d01f      	beq.n	8001d96 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	461a      	mov	r2, r3
 8001d5c:	68bb      	ldr	r3, [r7, #8]
 8001d5e:	781b      	ldrb	r3, [r3, #0]
 8001d60:	009b      	lsls	r3, r3, #2
 8001d62:	4413      	add	r3, r2
 8001d64:	881b      	ldrh	r3, [r3, #0]
 8001d66:	b29b      	uxth	r3, r3
 8001d68:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001d6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d70:	82fb      	strh	r3, [r7, #22]
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	461a      	mov	r2, r3
 8001d78:	68bb      	ldr	r3, [r7, #8]
 8001d7a:	781b      	ldrb	r3, [r3, #0]
 8001d7c:	009b      	lsls	r3, r3, #2
 8001d7e:	441a      	add	r2, r3
 8001d80:	8afb      	ldrh	r3, [r7, #22]
 8001d82:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001d86:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001d8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d8e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001d92:	b29b      	uxth	r3, r3
 8001d94:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8001d96:	8b7b      	ldrh	r3, [r7, #26]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	f000 8087 	beq.w	8001eac <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	6818      	ldr	r0, [r3, #0]
 8001da2:	68bb      	ldr	r3, [r7, #8]
 8001da4:	6959      	ldr	r1, [r3, #20]
 8001da6:	68bb      	ldr	r3, [r7, #8]
 8001da8:	891a      	ldrh	r2, [r3, #8]
 8001daa:	8b7b      	ldrh	r3, [r7, #26]
 8001dac:	f004 fd2f 	bl	800680e <USB_ReadPMA>
 8001db0:	e07c      	b.n	8001eac <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001dba:	b29b      	uxth	r3, r3
 8001dbc:	461a      	mov	r2, r3
 8001dbe:	68bb      	ldr	r3, [r7, #8]
 8001dc0:	781b      	ldrb	r3, [r3, #0]
 8001dc2:	00db      	lsls	r3, r3, #3
 8001dc4:	4413      	add	r3, r2
 8001dc6:	3306      	adds	r3, #6
 8001dc8:	005b      	lsls	r3, r3, #1
 8001dca:	68fa      	ldr	r2, [r7, #12]
 8001dcc:	6812      	ldr	r2, [r2, #0]
 8001dce:	4413      	add	r3, r2
 8001dd0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001dd4:	881b      	ldrh	r3, [r3, #0]
 8001dd6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001dda:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001ddc:	68bb      	ldr	r3, [r7, #8]
 8001dde:	699a      	ldr	r2, [r3, #24]
 8001de0:	8b7b      	ldrh	r3, [r7, #26]
 8001de2:	429a      	cmp	r2, r3
 8001de4:	d306      	bcc.n	8001df4 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8001de6:	68bb      	ldr	r3, [r7, #8]
 8001de8:	699a      	ldr	r2, [r3, #24]
 8001dea:	8b7b      	ldrh	r3, [r7, #26]
 8001dec:	1ad2      	subs	r2, r2, r3
 8001dee:	68bb      	ldr	r3, [r7, #8]
 8001df0:	619a      	str	r2, [r3, #24]
 8001df2:	e002      	b.n	8001dfa <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8001df4:	68bb      	ldr	r3, [r7, #8]
 8001df6:	2200      	movs	r2, #0
 8001df8:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001dfa:	68bb      	ldr	r3, [r7, #8]
 8001dfc:	699b      	ldr	r3, [r3, #24]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d123      	bne.n	8001e4a <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	461a      	mov	r2, r3
 8001e08:	68bb      	ldr	r3, [r7, #8]
 8001e0a:	781b      	ldrb	r3, [r3, #0]
 8001e0c:	009b      	lsls	r3, r3, #2
 8001e0e:	4413      	add	r3, r2
 8001e10:	881b      	ldrh	r3, [r3, #0]
 8001e12:	b29b      	uxth	r3, r3
 8001e14:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001e18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e1c:	83fb      	strh	r3, [r7, #30]
 8001e1e:	8bfb      	ldrh	r3, [r7, #30]
 8001e20:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001e24:	83fb      	strh	r3, [r7, #30]
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	461a      	mov	r2, r3
 8001e2c:	68bb      	ldr	r3, [r7, #8]
 8001e2e:	781b      	ldrb	r3, [r3, #0]
 8001e30:	009b      	lsls	r3, r3, #2
 8001e32:	441a      	add	r2, r3
 8001e34:	8bfb      	ldrh	r3, [r7, #30]
 8001e36:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001e3a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001e3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e46:	b29b      	uxth	r3, r3
 8001e48:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8001e4a:	88fb      	ldrh	r3, [r7, #6]
 8001e4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d11f      	bne.n	8001e94 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	461a      	mov	r2, r3
 8001e5a:	68bb      	ldr	r3, [r7, #8]
 8001e5c:	781b      	ldrb	r3, [r3, #0]
 8001e5e:	009b      	lsls	r3, r3, #2
 8001e60:	4413      	add	r3, r2
 8001e62:	881b      	ldrh	r3, [r3, #0]
 8001e64:	b29b      	uxth	r3, r3
 8001e66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001e6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e6e:	83bb      	strh	r3, [r7, #28]
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	461a      	mov	r2, r3
 8001e76:	68bb      	ldr	r3, [r7, #8]
 8001e78:	781b      	ldrb	r3, [r3, #0]
 8001e7a:	009b      	lsls	r3, r3, #2
 8001e7c:	441a      	add	r2, r3
 8001e7e:	8bbb      	ldrh	r3, [r7, #28]
 8001e80:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001e84:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001e88:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e8c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001e90:	b29b      	uxth	r3, r3
 8001e92:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8001e94:	8b7b      	ldrh	r3, [r7, #26]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d008      	beq.n	8001eac <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	6818      	ldr	r0, [r3, #0]
 8001e9e:	68bb      	ldr	r3, [r7, #8]
 8001ea0:	6959      	ldr	r1, [r3, #20]
 8001ea2:	68bb      	ldr	r3, [r7, #8]
 8001ea4:	895a      	ldrh	r2, [r3, #10]
 8001ea6:	8b7b      	ldrh	r3, [r7, #26]
 8001ea8:	f004 fcb1 	bl	800680e <USB_ReadPMA>
    }
  }

  return count;
 8001eac:	8b7b      	ldrh	r3, [r7, #26]
}
 8001eae:	4618      	mov	r0, r3
 8001eb0:	3720      	adds	r7, #32
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}

08001eb6 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001eb6:	b580      	push	{r7, lr}
 8001eb8:	b0a2      	sub	sp, #136	; 0x88
 8001eba:	af00      	add	r7, sp, #0
 8001ebc:	60f8      	str	r0, [r7, #12]
 8001ebe:	60b9      	str	r1, [r7, #8]
 8001ec0:	4613      	mov	r3, r2
 8001ec2:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001ec4:	88fb      	ldrh	r3, [r7, #6]
 8001ec6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	f000 81c7 	beq.w	800225e <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001ed8:	b29b      	uxth	r3, r3
 8001eda:	461a      	mov	r2, r3
 8001edc:	68bb      	ldr	r3, [r7, #8]
 8001ede:	781b      	ldrb	r3, [r3, #0]
 8001ee0:	00db      	lsls	r3, r3, #3
 8001ee2:	4413      	add	r3, r2
 8001ee4:	3302      	adds	r3, #2
 8001ee6:	005b      	lsls	r3, r3, #1
 8001ee8:	68fa      	ldr	r2, [r7, #12]
 8001eea:	6812      	ldr	r2, [r2, #0]
 8001eec:	4413      	add	r3, r2
 8001eee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001ef2:	881b      	ldrh	r3, [r3, #0]
 8001ef4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001ef8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 8001efc:	68bb      	ldr	r3, [r7, #8]
 8001efe:	699a      	ldr	r2, [r3, #24]
 8001f00:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001f04:	429a      	cmp	r2, r3
 8001f06:	d907      	bls.n	8001f18 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8001f08:	68bb      	ldr	r3, [r7, #8]
 8001f0a:	699a      	ldr	r2, [r3, #24]
 8001f0c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001f10:	1ad2      	subs	r2, r2, r3
 8001f12:	68bb      	ldr	r3, [r7, #8]
 8001f14:	619a      	str	r2, [r3, #24]
 8001f16:	e002      	b.n	8001f1e <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8001f18:	68bb      	ldr	r3, [r7, #8]
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8001f1e:	68bb      	ldr	r3, [r7, #8]
 8001f20:	699b      	ldr	r3, [r3, #24]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	f040 80b9 	bne.w	800209a <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001f28:	68bb      	ldr	r3, [r7, #8]
 8001f2a:	785b      	ldrb	r3, [r3, #1]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d126      	bne.n	8001f7e <HAL_PCD_EP_DB_Transmit+0xc8>
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	62bb      	str	r3, [r7, #40]	; 0x28
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f3e:	b29b      	uxth	r3, r3
 8001f40:	461a      	mov	r2, r3
 8001f42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f44:	4413      	add	r3, r2
 8001f46:	62bb      	str	r3, [r7, #40]	; 0x28
 8001f48:	68bb      	ldr	r3, [r7, #8]
 8001f4a:	781b      	ldrb	r3, [r3, #0]
 8001f4c:	011a      	lsls	r2, r3, #4
 8001f4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f50:	4413      	add	r3, r2
 8001f52:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001f56:	627b      	str	r3, [r7, #36]	; 0x24
 8001f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f5a:	881b      	ldrh	r3, [r3, #0]
 8001f5c:	b29b      	uxth	r3, r3
 8001f5e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001f62:	b29a      	uxth	r2, r3
 8001f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f66:	801a      	strh	r2, [r3, #0]
 8001f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f6a:	881b      	ldrh	r3, [r3, #0]
 8001f6c:	b29b      	uxth	r3, r3
 8001f6e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001f72:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001f76:	b29a      	uxth	r2, r3
 8001f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f7a:	801a      	strh	r2, [r3, #0]
 8001f7c:	e01a      	b.n	8001fb4 <HAL_PCD_EP_DB_Transmit+0xfe>
 8001f7e:	68bb      	ldr	r3, [r7, #8]
 8001f80:	785b      	ldrb	r3, [r3, #1]
 8001f82:	2b01      	cmp	r3, #1
 8001f84:	d116      	bne.n	8001fb4 <HAL_PCD_EP_DB_Transmit+0xfe>
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	633b      	str	r3, [r7, #48]	; 0x30
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f94:	b29b      	uxth	r3, r3
 8001f96:	461a      	mov	r2, r3
 8001f98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f9a:	4413      	add	r3, r2
 8001f9c:	633b      	str	r3, [r7, #48]	; 0x30
 8001f9e:	68bb      	ldr	r3, [r7, #8]
 8001fa0:	781b      	ldrb	r3, [r3, #0]
 8001fa2:	011a      	lsls	r2, r3, #4
 8001fa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fa6:	4413      	add	r3, r2
 8001fa8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001fac:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001fae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	623b      	str	r3, [r7, #32]
 8001fba:	68bb      	ldr	r3, [r7, #8]
 8001fbc:	785b      	ldrb	r3, [r3, #1]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d126      	bne.n	8002010 <HAL_PCD_EP_DB_Transmit+0x15a>
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	61bb      	str	r3, [r7, #24]
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001fd0:	b29b      	uxth	r3, r3
 8001fd2:	461a      	mov	r2, r3
 8001fd4:	69bb      	ldr	r3, [r7, #24]
 8001fd6:	4413      	add	r3, r2
 8001fd8:	61bb      	str	r3, [r7, #24]
 8001fda:	68bb      	ldr	r3, [r7, #8]
 8001fdc:	781b      	ldrb	r3, [r3, #0]
 8001fde:	011a      	lsls	r2, r3, #4
 8001fe0:	69bb      	ldr	r3, [r7, #24]
 8001fe2:	4413      	add	r3, r2
 8001fe4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001fe8:	617b      	str	r3, [r7, #20]
 8001fea:	697b      	ldr	r3, [r7, #20]
 8001fec:	881b      	ldrh	r3, [r3, #0]
 8001fee:	b29b      	uxth	r3, r3
 8001ff0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001ff4:	b29a      	uxth	r2, r3
 8001ff6:	697b      	ldr	r3, [r7, #20]
 8001ff8:	801a      	strh	r2, [r3, #0]
 8001ffa:	697b      	ldr	r3, [r7, #20]
 8001ffc:	881b      	ldrh	r3, [r3, #0]
 8001ffe:	b29b      	uxth	r3, r3
 8002000:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002004:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002008:	b29a      	uxth	r2, r3
 800200a:	697b      	ldr	r3, [r7, #20]
 800200c:	801a      	strh	r2, [r3, #0]
 800200e:	e017      	b.n	8002040 <HAL_PCD_EP_DB_Transmit+0x18a>
 8002010:	68bb      	ldr	r3, [r7, #8]
 8002012:	785b      	ldrb	r3, [r3, #1]
 8002014:	2b01      	cmp	r3, #1
 8002016:	d113      	bne.n	8002040 <HAL_PCD_EP_DB_Transmit+0x18a>
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002020:	b29b      	uxth	r3, r3
 8002022:	461a      	mov	r2, r3
 8002024:	6a3b      	ldr	r3, [r7, #32]
 8002026:	4413      	add	r3, r2
 8002028:	623b      	str	r3, [r7, #32]
 800202a:	68bb      	ldr	r3, [r7, #8]
 800202c:	781b      	ldrb	r3, [r3, #0]
 800202e:	011a      	lsls	r2, r3, #4
 8002030:	6a3b      	ldr	r3, [r7, #32]
 8002032:	4413      	add	r3, r2
 8002034:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002038:	61fb      	str	r3, [r7, #28]
 800203a:	69fb      	ldr	r3, [r7, #28]
 800203c:	2200      	movs	r2, #0
 800203e:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002040:	68bb      	ldr	r3, [r7, #8]
 8002042:	781b      	ldrb	r3, [r3, #0]
 8002044:	4619      	mov	r1, r3
 8002046:	68f8      	ldr	r0, [r7, #12]
 8002048:	f006 fa15 	bl	8008476 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800204c:	88fb      	ldrh	r3, [r7, #6]
 800204e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002052:	2b00      	cmp	r3, #0
 8002054:	f000 82d4 	beq.w	8002600 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	461a      	mov	r2, r3
 800205e:	68bb      	ldr	r3, [r7, #8]
 8002060:	781b      	ldrb	r3, [r3, #0]
 8002062:	009b      	lsls	r3, r3, #2
 8002064:	4413      	add	r3, r2
 8002066:	881b      	ldrh	r3, [r3, #0]
 8002068:	b29b      	uxth	r3, r3
 800206a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800206e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002072:	827b      	strh	r3, [r7, #18]
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	461a      	mov	r2, r3
 800207a:	68bb      	ldr	r3, [r7, #8]
 800207c:	781b      	ldrb	r3, [r3, #0]
 800207e:	009b      	lsls	r3, r3, #2
 8002080:	441a      	add	r2, r3
 8002082:	8a7b      	ldrh	r3, [r7, #18]
 8002084:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002088:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800208c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002090:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002094:	b29b      	uxth	r3, r3
 8002096:	8013      	strh	r3, [r2, #0]
 8002098:	e2b2      	b.n	8002600 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800209a:	88fb      	ldrh	r3, [r7, #6]
 800209c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d021      	beq.n	80020e8 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	461a      	mov	r2, r3
 80020aa:	68bb      	ldr	r3, [r7, #8]
 80020ac:	781b      	ldrb	r3, [r3, #0]
 80020ae:	009b      	lsls	r3, r3, #2
 80020b0:	4413      	add	r3, r2
 80020b2:	881b      	ldrh	r3, [r3, #0]
 80020b4:	b29b      	uxth	r3, r3
 80020b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80020ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020be:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	461a      	mov	r2, r3
 80020c8:	68bb      	ldr	r3, [r7, #8]
 80020ca:	781b      	ldrb	r3, [r3, #0]
 80020cc:	009b      	lsls	r3, r3, #2
 80020ce:	441a      	add	r2, r3
 80020d0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80020d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80020d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80020dc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80020e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020e4:	b29b      	uxth	r3, r3
 80020e6:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80020e8:	68bb      	ldr	r3, [r7, #8]
 80020ea:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80020ee:	2b01      	cmp	r3, #1
 80020f0:	f040 8286 	bne.w	8002600 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 80020f4:	68bb      	ldr	r3, [r7, #8]
 80020f6:	695a      	ldr	r2, [r3, #20]
 80020f8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80020fc:	441a      	add	r2, r3
 80020fe:	68bb      	ldr	r3, [r7, #8]
 8002100:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002102:	68bb      	ldr	r3, [r7, #8]
 8002104:	69da      	ldr	r2, [r3, #28]
 8002106:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800210a:	441a      	add	r2, r3
 800210c:	68bb      	ldr	r3, [r7, #8]
 800210e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002110:	68bb      	ldr	r3, [r7, #8]
 8002112:	6a1a      	ldr	r2, [r3, #32]
 8002114:	68bb      	ldr	r3, [r7, #8]
 8002116:	691b      	ldr	r3, [r3, #16]
 8002118:	429a      	cmp	r2, r3
 800211a:	d309      	bcc.n	8002130 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 800211c:	68bb      	ldr	r3, [r7, #8]
 800211e:	691b      	ldr	r3, [r3, #16]
 8002120:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8002122:	68bb      	ldr	r3, [r7, #8]
 8002124:	6a1a      	ldr	r2, [r3, #32]
 8002126:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002128:	1ad2      	subs	r2, r2, r3
 800212a:	68bb      	ldr	r3, [r7, #8]
 800212c:	621a      	str	r2, [r3, #32]
 800212e:	e015      	b.n	800215c <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8002130:	68bb      	ldr	r3, [r7, #8]
 8002132:	6a1b      	ldr	r3, [r3, #32]
 8002134:	2b00      	cmp	r3, #0
 8002136:	d107      	bne.n	8002148 <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 8002138:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800213c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 800213e:	68bb      	ldr	r3, [r7, #8]
 8002140:	2200      	movs	r2, #0
 8002142:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002146:	e009      	b.n	800215c <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002148:	68bb      	ldr	r3, [r7, #8]
 800214a:	2200      	movs	r2, #0
 800214c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8002150:	68bb      	ldr	r3, [r7, #8]
 8002152:	6a1b      	ldr	r3, [r3, #32]
 8002154:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8002156:	68bb      	ldr	r3, [r7, #8]
 8002158:	2200      	movs	r2, #0
 800215a:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800215c:	68bb      	ldr	r3, [r7, #8]
 800215e:	785b      	ldrb	r3, [r3, #1]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d155      	bne.n	8002210 <HAL_PCD_EP_DB_Transmit+0x35a>
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	63bb      	str	r3, [r7, #56]	; 0x38
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002172:	b29b      	uxth	r3, r3
 8002174:	461a      	mov	r2, r3
 8002176:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002178:	4413      	add	r3, r2
 800217a:	63bb      	str	r3, [r7, #56]	; 0x38
 800217c:	68bb      	ldr	r3, [r7, #8]
 800217e:	781b      	ldrb	r3, [r3, #0]
 8002180:	011a      	lsls	r2, r3, #4
 8002182:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002184:	4413      	add	r3, r2
 8002186:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800218a:	637b      	str	r3, [r7, #52]	; 0x34
 800218c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800218e:	2b00      	cmp	r3, #0
 8002190:	d112      	bne.n	80021b8 <HAL_PCD_EP_DB_Transmit+0x302>
 8002192:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002194:	881b      	ldrh	r3, [r3, #0]
 8002196:	b29b      	uxth	r3, r3
 8002198:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800219c:	b29a      	uxth	r2, r3
 800219e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021a0:	801a      	strh	r2, [r3, #0]
 80021a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021a4:	881b      	ldrh	r3, [r3, #0]
 80021a6:	b29b      	uxth	r3, r3
 80021a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80021ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80021b0:	b29a      	uxth	r2, r3
 80021b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021b4:	801a      	strh	r2, [r3, #0]
 80021b6:	e047      	b.n	8002248 <HAL_PCD_EP_DB_Transmit+0x392>
 80021b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80021ba:	2b3e      	cmp	r3, #62	; 0x3e
 80021bc:	d811      	bhi.n	80021e2 <HAL_PCD_EP_DB_Transmit+0x32c>
 80021be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80021c0:	085b      	lsrs	r3, r3, #1
 80021c2:	64bb      	str	r3, [r7, #72]	; 0x48
 80021c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80021c6:	f003 0301 	and.w	r3, r3, #1
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d002      	beq.n	80021d4 <HAL_PCD_EP_DB_Transmit+0x31e>
 80021ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80021d0:	3301      	adds	r3, #1
 80021d2:	64bb      	str	r3, [r7, #72]	; 0x48
 80021d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80021d6:	b29b      	uxth	r3, r3
 80021d8:	029b      	lsls	r3, r3, #10
 80021da:	b29a      	uxth	r2, r3
 80021dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021de:	801a      	strh	r2, [r3, #0]
 80021e0:	e032      	b.n	8002248 <HAL_PCD_EP_DB_Transmit+0x392>
 80021e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80021e4:	095b      	lsrs	r3, r3, #5
 80021e6:	64bb      	str	r3, [r7, #72]	; 0x48
 80021e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80021ea:	f003 031f 	and.w	r3, r3, #31
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d102      	bne.n	80021f8 <HAL_PCD_EP_DB_Transmit+0x342>
 80021f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80021f4:	3b01      	subs	r3, #1
 80021f6:	64bb      	str	r3, [r7, #72]	; 0x48
 80021f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80021fa:	b29b      	uxth	r3, r3
 80021fc:	029b      	lsls	r3, r3, #10
 80021fe:	b29b      	uxth	r3, r3
 8002200:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002204:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002208:	b29a      	uxth	r2, r3
 800220a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800220c:	801a      	strh	r2, [r3, #0]
 800220e:	e01b      	b.n	8002248 <HAL_PCD_EP_DB_Transmit+0x392>
 8002210:	68bb      	ldr	r3, [r7, #8]
 8002212:	785b      	ldrb	r3, [r3, #1]
 8002214:	2b01      	cmp	r3, #1
 8002216:	d117      	bne.n	8002248 <HAL_PCD_EP_DB_Transmit+0x392>
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	643b      	str	r3, [r7, #64]	; 0x40
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002226:	b29b      	uxth	r3, r3
 8002228:	461a      	mov	r2, r3
 800222a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800222c:	4413      	add	r3, r2
 800222e:	643b      	str	r3, [r7, #64]	; 0x40
 8002230:	68bb      	ldr	r3, [r7, #8]
 8002232:	781b      	ldrb	r3, [r3, #0]
 8002234:	011a      	lsls	r2, r3, #4
 8002236:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002238:	4413      	add	r3, r2
 800223a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800223e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002240:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002242:	b29a      	uxth	r2, r3
 8002244:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002246:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	6818      	ldr	r0, [r3, #0]
 800224c:	68bb      	ldr	r3, [r7, #8]
 800224e:	6959      	ldr	r1, [r3, #20]
 8002250:	68bb      	ldr	r3, [r7, #8]
 8002252:	891a      	ldrh	r2, [r3, #8]
 8002254:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002256:	b29b      	uxth	r3, r3
 8002258:	f004 fa94 	bl	8006784 <USB_WritePMA>
 800225c:	e1d0      	b.n	8002600 <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002266:	b29b      	uxth	r3, r3
 8002268:	461a      	mov	r2, r3
 800226a:	68bb      	ldr	r3, [r7, #8]
 800226c:	781b      	ldrb	r3, [r3, #0]
 800226e:	00db      	lsls	r3, r3, #3
 8002270:	4413      	add	r3, r2
 8002272:	3306      	adds	r3, #6
 8002274:	005b      	lsls	r3, r3, #1
 8002276:	68fa      	ldr	r2, [r7, #12]
 8002278:	6812      	ldr	r2, [r2, #0]
 800227a:	4413      	add	r3, r2
 800227c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002280:	881b      	ldrh	r3, [r3, #0]
 8002282:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002286:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 800228a:	68bb      	ldr	r3, [r7, #8]
 800228c:	699a      	ldr	r2, [r3, #24]
 800228e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002292:	429a      	cmp	r2, r3
 8002294:	d307      	bcc.n	80022a6 <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 8002296:	68bb      	ldr	r3, [r7, #8]
 8002298:	699a      	ldr	r2, [r3, #24]
 800229a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800229e:	1ad2      	subs	r2, r2, r3
 80022a0:	68bb      	ldr	r3, [r7, #8]
 80022a2:	619a      	str	r2, [r3, #24]
 80022a4:	e002      	b.n	80022ac <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 80022a6:	68bb      	ldr	r3, [r7, #8]
 80022a8:	2200      	movs	r2, #0
 80022aa:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80022ac:	68bb      	ldr	r3, [r7, #8]
 80022ae:	699b      	ldr	r3, [r3, #24]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	f040 80c4 	bne.w	800243e <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80022b6:	68bb      	ldr	r3, [r7, #8]
 80022b8:	785b      	ldrb	r3, [r3, #1]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d126      	bne.n	800230c <HAL_PCD_EP_DB_Transmit+0x456>
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80022cc:	b29b      	uxth	r3, r3
 80022ce:	461a      	mov	r2, r3
 80022d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80022d2:	4413      	add	r3, r2
 80022d4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80022d6:	68bb      	ldr	r3, [r7, #8]
 80022d8:	781b      	ldrb	r3, [r3, #0]
 80022da:	011a      	lsls	r2, r3, #4
 80022dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80022de:	4413      	add	r3, r2
 80022e0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80022e4:	66bb      	str	r3, [r7, #104]	; 0x68
 80022e6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80022e8:	881b      	ldrh	r3, [r3, #0]
 80022ea:	b29b      	uxth	r3, r3
 80022ec:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80022f0:	b29a      	uxth	r2, r3
 80022f2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80022f4:	801a      	strh	r2, [r3, #0]
 80022f6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80022f8:	881b      	ldrh	r3, [r3, #0]
 80022fa:	b29b      	uxth	r3, r3
 80022fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002300:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002304:	b29a      	uxth	r2, r3
 8002306:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002308:	801a      	strh	r2, [r3, #0]
 800230a:	e01a      	b.n	8002342 <HAL_PCD_EP_DB_Transmit+0x48c>
 800230c:	68bb      	ldr	r3, [r7, #8]
 800230e:	785b      	ldrb	r3, [r3, #1]
 8002310:	2b01      	cmp	r3, #1
 8002312:	d116      	bne.n	8002342 <HAL_PCD_EP_DB_Transmit+0x48c>
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	677b      	str	r3, [r7, #116]	; 0x74
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002322:	b29b      	uxth	r3, r3
 8002324:	461a      	mov	r2, r3
 8002326:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002328:	4413      	add	r3, r2
 800232a:	677b      	str	r3, [r7, #116]	; 0x74
 800232c:	68bb      	ldr	r3, [r7, #8]
 800232e:	781b      	ldrb	r3, [r3, #0]
 8002330:	011a      	lsls	r2, r3, #4
 8002332:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002334:	4413      	add	r3, r2
 8002336:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800233a:	673b      	str	r3, [r7, #112]	; 0x70
 800233c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800233e:	2200      	movs	r2, #0
 8002340:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	67bb      	str	r3, [r7, #120]	; 0x78
 8002348:	68bb      	ldr	r3, [r7, #8]
 800234a:	785b      	ldrb	r3, [r3, #1]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d12f      	bne.n	80023b0 <HAL_PCD_EP_DB_Transmit+0x4fa>
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002360:	b29b      	uxth	r3, r3
 8002362:	461a      	mov	r2, r3
 8002364:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002368:	4413      	add	r3, r2
 800236a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800236e:	68bb      	ldr	r3, [r7, #8]
 8002370:	781b      	ldrb	r3, [r3, #0]
 8002372:	011a      	lsls	r2, r3, #4
 8002374:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002378:	4413      	add	r3, r2
 800237a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800237e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002382:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002386:	881b      	ldrh	r3, [r3, #0]
 8002388:	b29b      	uxth	r3, r3
 800238a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800238e:	b29a      	uxth	r2, r3
 8002390:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002394:	801a      	strh	r2, [r3, #0]
 8002396:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800239a:	881b      	ldrh	r3, [r3, #0]
 800239c:	b29b      	uxth	r3, r3
 800239e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80023a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80023a6:	b29a      	uxth	r2, r3
 80023a8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80023ac:	801a      	strh	r2, [r3, #0]
 80023ae:	e017      	b.n	80023e0 <HAL_PCD_EP_DB_Transmit+0x52a>
 80023b0:	68bb      	ldr	r3, [r7, #8]
 80023b2:	785b      	ldrb	r3, [r3, #1]
 80023b4:	2b01      	cmp	r3, #1
 80023b6:	d113      	bne.n	80023e0 <HAL_PCD_EP_DB_Transmit+0x52a>
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80023c0:	b29b      	uxth	r3, r3
 80023c2:	461a      	mov	r2, r3
 80023c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80023c6:	4413      	add	r3, r2
 80023c8:	67bb      	str	r3, [r7, #120]	; 0x78
 80023ca:	68bb      	ldr	r3, [r7, #8]
 80023cc:	781b      	ldrb	r3, [r3, #0]
 80023ce:	011a      	lsls	r2, r3, #4
 80023d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80023d2:	4413      	add	r3, r2
 80023d4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80023d8:	67fb      	str	r3, [r7, #124]	; 0x7c
 80023da:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80023dc:	2200      	movs	r2, #0
 80023de:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80023e0:	68bb      	ldr	r3, [r7, #8]
 80023e2:	781b      	ldrb	r3, [r3, #0]
 80023e4:	4619      	mov	r1, r3
 80023e6:	68f8      	ldr	r0, [r7, #12]
 80023e8:	f006 f845 	bl	8008476 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80023ec:	88fb      	ldrh	r3, [r7, #6]
 80023ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	f040 8104 	bne.w	8002600 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	461a      	mov	r2, r3
 80023fe:	68bb      	ldr	r3, [r7, #8]
 8002400:	781b      	ldrb	r3, [r3, #0]
 8002402:	009b      	lsls	r3, r3, #2
 8002404:	4413      	add	r3, r2
 8002406:	881b      	ldrh	r3, [r3, #0]
 8002408:	b29b      	uxth	r3, r3
 800240a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800240e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002412:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	461a      	mov	r2, r3
 800241c:	68bb      	ldr	r3, [r7, #8]
 800241e:	781b      	ldrb	r3, [r3, #0]
 8002420:	009b      	lsls	r3, r3, #2
 8002422:	441a      	add	r2, r3
 8002424:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8002428:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800242c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002430:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002434:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002438:	b29b      	uxth	r3, r3
 800243a:	8013      	strh	r3, [r2, #0]
 800243c:	e0e0      	b.n	8002600 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800243e:	88fb      	ldrh	r3, [r7, #6]
 8002440:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002444:	2b00      	cmp	r3, #0
 8002446:	d121      	bne.n	800248c <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	461a      	mov	r2, r3
 800244e:	68bb      	ldr	r3, [r7, #8]
 8002450:	781b      	ldrb	r3, [r3, #0]
 8002452:	009b      	lsls	r3, r3, #2
 8002454:	4413      	add	r3, r2
 8002456:	881b      	ldrh	r3, [r3, #0]
 8002458:	b29b      	uxth	r3, r3
 800245a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800245e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002462:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	461a      	mov	r2, r3
 800246c:	68bb      	ldr	r3, [r7, #8]
 800246e:	781b      	ldrb	r3, [r3, #0]
 8002470:	009b      	lsls	r3, r3, #2
 8002472:	441a      	add	r2, r3
 8002474:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002478:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800247c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002480:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002484:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002488:	b29b      	uxth	r3, r3
 800248a:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800248c:	68bb      	ldr	r3, [r7, #8]
 800248e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002492:	2b01      	cmp	r3, #1
 8002494:	f040 80b4 	bne.w	8002600 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8002498:	68bb      	ldr	r3, [r7, #8]
 800249a:	695a      	ldr	r2, [r3, #20]
 800249c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80024a0:	441a      	add	r2, r3
 80024a2:	68bb      	ldr	r3, [r7, #8]
 80024a4:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80024a6:	68bb      	ldr	r3, [r7, #8]
 80024a8:	69da      	ldr	r2, [r3, #28]
 80024aa:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80024ae:	441a      	add	r2, r3
 80024b0:	68bb      	ldr	r3, [r7, #8]
 80024b2:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80024b4:	68bb      	ldr	r3, [r7, #8]
 80024b6:	6a1a      	ldr	r2, [r3, #32]
 80024b8:	68bb      	ldr	r3, [r7, #8]
 80024ba:	691b      	ldr	r3, [r3, #16]
 80024bc:	429a      	cmp	r2, r3
 80024be:	d309      	bcc.n	80024d4 <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 80024c0:	68bb      	ldr	r3, [r7, #8]
 80024c2:	691b      	ldr	r3, [r3, #16]
 80024c4:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80024c6:	68bb      	ldr	r3, [r7, #8]
 80024c8:	6a1a      	ldr	r2, [r3, #32]
 80024ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80024cc:	1ad2      	subs	r2, r2, r3
 80024ce:	68bb      	ldr	r3, [r7, #8]
 80024d0:	621a      	str	r2, [r3, #32]
 80024d2:	e015      	b.n	8002500 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 80024d4:	68bb      	ldr	r3, [r7, #8]
 80024d6:	6a1b      	ldr	r3, [r3, #32]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d107      	bne.n	80024ec <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 80024dc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80024e0:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 80024e2:	68bb      	ldr	r3, [r7, #8]
 80024e4:	2200      	movs	r2, #0
 80024e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80024ea:	e009      	b.n	8002500 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	6a1b      	ldr	r3, [r3, #32]
 80024f0:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80024f2:	68bb      	ldr	r3, [r7, #8]
 80024f4:	2200      	movs	r2, #0
 80024f6:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80024f8:	68bb      	ldr	r3, [r7, #8]
 80024fa:	2200      	movs	r2, #0
 80024fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	667b      	str	r3, [r7, #100]	; 0x64
 8002506:	68bb      	ldr	r3, [r7, #8]
 8002508:	785b      	ldrb	r3, [r3, #1]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d155      	bne.n	80025ba <HAL_PCD_EP_DB_Transmit+0x704>
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800251c:	b29b      	uxth	r3, r3
 800251e:	461a      	mov	r2, r3
 8002520:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002522:	4413      	add	r3, r2
 8002524:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002526:	68bb      	ldr	r3, [r7, #8]
 8002528:	781b      	ldrb	r3, [r3, #0]
 800252a:	011a      	lsls	r2, r3, #4
 800252c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800252e:	4413      	add	r3, r2
 8002530:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002534:	65bb      	str	r3, [r7, #88]	; 0x58
 8002536:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002538:	2b00      	cmp	r3, #0
 800253a:	d112      	bne.n	8002562 <HAL_PCD_EP_DB_Transmit+0x6ac>
 800253c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800253e:	881b      	ldrh	r3, [r3, #0]
 8002540:	b29b      	uxth	r3, r3
 8002542:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002546:	b29a      	uxth	r2, r3
 8002548:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800254a:	801a      	strh	r2, [r3, #0]
 800254c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800254e:	881b      	ldrh	r3, [r3, #0]
 8002550:	b29b      	uxth	r3, r3
 8002552:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002556:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800255a:	b29a      	uxth	r2, r3
 800255c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800255e:	801a      	strh	r2, [r3, #0]
 8002560:	e044      	b.n	80025ec <HAL_PCD_EP_DB_Transmit+0x736>
 8002562:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002564:	2b3e      	cmp	r3, #62	; 0x3e
 8002566:	d811      	bhi.n	800258c <HAL_PCD_EP_DB_Transmit+0x6d6>
 8002568:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800256a:	085b      	lsrs	r3, r3, #1
 800256c:	657b      	str	r3, [r7, #84]	; 0x54
 800256e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002570:	f003 0301 	and.w	r3, r3, #1
 8002574:	2b00      	cmp	r3, #0
 8002576:	d002      	beq.n	800257e <HAL_PCD_EP_DB_Transmit+0x6c8>
 8002578:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800257a:	3301      	adds	r3, #1
 800257c:	657b      	str	r3, [r7, #84]	; 0x54
 800257e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002580:	b29b      	uxth	r3, r3
 8002582:	029b      	lsls	r3, r3, #10
 8002584:	b29a      	uxth	r2, r3
 8002586:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002588:	801a      	strh	r2, [r3, #0]
 800258a:	e02f      	b.n	80025ec <HAL_PCD_EP_DB_Transmit+0x736>
 800258c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800258e:	095b      	lsrs	r3, r3, #5
 8002590:	657b      	str	r3, [r7, #84]	; 0x54
 8002592:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002594:	f003 031f 	and.w	r3, r3, #31
 8002598:	2b00      	cmp	r3, #0
 800259a:	d102      	bne.n	80025a2 <HAL_PCD_EP_DB_Transmit+0x6ec>
 800259c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800259e:	3b01      	subs	r3, #1
 80025a0:	657b      	str	r3, [r7, #84]	; 0x54
 80025a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025a4:	b29b      	uxth	r3, r3
 80025a6:	029b      	lsls	r3, r3, #10
 80025a8:	b29b      	uxth	r3, r3
 80025aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80025ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80025b2:	b29a      	uxth	r2, r3
 80025b4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80025b6:	801a      	strh	r2, [r3, #0]
 80025b8:	e018      	b.n	80025ec <HAL_PCD_EP_DB_Transmit+0x736>
 80025ba:	68bb      	ldr	r3, [r7, #8]
 80025bc:	785b      	ldrb	r3, [r3, #1]
 80025be:	2b01      	cmp	r3, #1
 80025c0:	d114      	bne.n	80025ec <HAL_PCD_EP_DB_Transmit+0x736>
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80025ca:	b29b      	uxth	r3, r3
 80025cc:	461a      	mov	r2, r3
 80025ce:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80025d0:	4413      	add	r3, r2
 80025d2:	667b      	str	r3, [r7, #100]	; 0x64
 80025d4:	68bb      	ldr	r3, [r7, #8]
 80025d6:	781b      	ldrb	r3, [r3, #0]
 80025d8:	011a      	lsls	r2, r3, #4
 80025da:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80025dc:	4413      	add	r3, r2
 80025de:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80025e2:	663b      	str	r3, [r7, #96]	; 0x60
 80025e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80025e6:	b29a      	uxth	r2, r3
 80025e8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80025ea:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	6818      	ldr	r0, [r3, #0]
 80025f0:	68bb      	ldr	r3, [r7, #8]
 80025f2:	6959      	ldr	r1, [r3, #20]
 80025f4:	68bb      	ldr	r3, [r7, #8]
 80025f6:	895a      	ldrh	r2, [r3, #10]
 80025f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80025fa:	b29b      	uxth	r3, r3
 80025fc:	f004 f8c2 	bl	8006784 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	461a      	mov	r2, r3
 8002606:	68bb      	ldr	r3, [r7, #8]
 8002608:	781b      	ldrb	r3, [r3, #0]
 800260a:	009b      	lsls	r3, r3, #2
 800260c:	4413      	add	r3, r2
 800260e:	881b      	ldrh	r3, [r3, #0]
 8002610:	b29b      	uxth	r3, r3
 8002612:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002616:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800261a:	823b      	strh	r3, [r7, #16]
 800261c:	8a3b      	ldrh	r3, [r7, #16]
 800261e:	f083 0310 	eor.w	r3, r3, #16
 8002622:	823b      	strh	r3, [r7, #16]
 8002624:	8a3b      	ldrh	r3, [r7, #16]
 8002626:	f083 0320 	eor.w	r3, r3, #32
 800262a:	823b      	strh	r3, [r7, #16]
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	461a      	mov	r2, r3
 8002632:	68bb      	ldr	r3, [r7, #8]
 8002634:	781b      	ldrb	r3, [r3, #0]
 8002636:	009b      	lsls	r3, r3, #2
 8002638:	441a      	add	r2, r3
 800263a:	8a3b      	ldrh	r3, [r7, #16]
 800263c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002640:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002644:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002648:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800264c:	b29b      	uxth	r3, r3
 800264e:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002650:	2300      	movs	r3, #0
}
 8002652:	4618      	mov	r0, r3
 8002654:	3788      	adds	r7, #136	; 0x88
 8002656:	46bd      	mov	sp, r7
 8002658:	bd80      	pop	{r7, pc}

0800265a <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800265a:	b480      	push	{r7}
 800265c:	b087      	sub	sp, #28
 800265e:	af00      	add	r7, sp, #0
 8002660:	60f8      	str	r0, [r7, #12]
 8002662:	607b      	str	r3, [r7, #4]
 8002664:	460b      	mov	r3, r1
 8002666:	817b      	strh	r3, [r7, #10]
 8002668:	4613      	mov	r3, r2
 800266a:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800266c:	897b      	ldrh	r3, [r7, #10]
 800266e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002672:	b29b      	uxth	r3, r3
 8002674:	2b00      	cmp	r3, #0
 8002676:	d00b      	beq.n	8002690 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002678:	897b      	ldrh	r3, [r7, #10]
 800267a:	f003 0307 	and.w	r3, r3, #7
 800267e:	1c5a      	adds	r2, r3, #1
 8002680:	4613      	mov	r3, r2
 8002682:	009b      	lsls	r3, r3, #2
 8002684:	4413      	add	r3, r2
 8002686:	00db      	lsls	r3, r3, #3
 8002688:	68fa      	ldr	r2, [r7, #12]
 800268a:	4413      	add	r3, r2
 800268c:	617b      	str	r3, [r7, #20]
 800268e:	e009      	b.n	80026a4 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002690:	897a      	ldrh	r2, [r7, #10]
 8002692:	4613      	mov	r3, r2
 8002694:	009b      	lsls	r3, r3, #2
 8002696:	4413      	add	r3, r2
 8002698:	00db      	lsls	r3, r3, #3
 800269a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800269e:	68fa      	ldr	r2, [r7, #12]
 80026a0:	4413      	add	r3, r2
 80026a2:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80026a4:	893b      	ldrh	r3, [r7, #8]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d107      	bne.n	80026ba <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80026aa:	697b      	ldr	r3, [r7, #20]
 80026ac:	2200      	movs	r2, #0
 80026ae:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	b29a      	uxth	r2, r3
 80026b4:	697b      	ldr	r3, [r7, #20]
 80026b6:	80da      	strh	r2, [r3, #6]
 80026b8:	e00b      	b.n	80026d2 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80026ba:	697b      	ldr	r3, [r7, #20]
 80026bc:	2201      	movs	r2, #1
 80026be:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	b29a      	uxth	r2, r3
 80026c4:	697b      	ldr	r3, [r7, #20]
 80026c6:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	0c1b      	lsrs	r3, r3, #16
 80026cc:	b29a      	uxth	r2, r3
 80026ce:	697b      	ldr	r3, [r7, #20]
 80026d0:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 80026d2:	2300      	movs	r3, #0
}
 80026d4:	4618      	mov	r0, r3
 80026d6:	371c      	adds	r7, #28
 80026d8:	46bd      	mov	sp, r7
 80026da:	bc80      	pop	{r7}
 80026dc:	4770      	bx	lr
	...

080026e0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b086      	sub	sp, #24
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d101      	bne.n	80026f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80026ee:	2301      	movs	r3, #1
 80026f0:	e272      	b.n	8002bd8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f003 0301 	and.w	r3, r3, #1
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	f000 8087 	beq.w	800280e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002700:	4b92      	ldr	r3, [pc, #584]	; (800294c <HAL_RCC_OscConfig+0x26c>)
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	f003 030c 	and.w	r3, r3, #12
 8002708:	2b04      	cmp	r3, #4
 800270a:	d00c      	beq.n	8002726 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800270c:	4b8f      	ldr	r3, [pc, #572]	; (800294c <HAL_RCC_OscConfig+0x26c>)
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	f003 030c 	and.w	r3, r3, #12
 8002714:	2b08      	cmp	r3, #8
 8002716:	d112      	bne.n	800273e <HAL_RCC_OscConfig+0x5e>
 8002718:	4b8c      	ldr	r3, [pc, #560]	; (800294c <HAL_RCC_OscConfig+0x26c>)
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002720:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002724:	d10b      	bne.n	800273e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002726:	4b89      	ldr	r3, [pc, #548]	; (800294c <HAL_RCC_OscConfig+0x26c>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800272e:	2b00      	cmp	r3, #0
 8002730:	d06c      	beq.n	800280c <HAL_RCC_OscConfig+0x12c>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d168      	bne.n	800280c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800273a:	2301      	movs	r3, #1
 800273c:	e24c      	b.n	8002bd8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002746:	d106      	bne.n	8002756 <HAL_RCC_OscConfig+0x76>
 8002748:	4b80      	ldr	r3, [pc, #512]	; (800294c <HAL_RCC_OscConfig+0x26c>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a7f      	ldr	r2, [pc, #508]	; (800294c <HAL_RCC_OscConfig+0x26c>)
 800274e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002752:	6013      	str	r3, [r2, #0]
 8002754:	e02e      	b.n	80027b4 <HAL_RCC_OscConfig+0xd4>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d10c      	bne.n	8002778 <HAL_RCC_OscConfig+0x98>
 800275e:	4b7b      	ldr	r3, [pc, #492]	; (800294c <HAL_RCC_OscConfig+0x26c>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4a7a      	ldr	r2, [pc, #488]	; (800294c <HAL_RCC_OscConfig+0x26c>)
 8002764:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002768:	6013      	str	r3, [r2, #0]
 800276a:	4b78      	ldr	r3, [pc, #480]	; (800294c <HAL_RCC_OscConfig+0x26c>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4a77      	ldr	r2, [pc, #476]	; (800294c <HAL_RCC_OscConfig+0x26c>)
 8002770:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002774:	6013      	str	r3, [r2, #0]
 8002776:	e01d      	b.n	80027b4 <HAL_RCC_OscConfig+0xd4>
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002780:	d10c      	bne.n	800279c <HAL_RCC_OscConfig+0xbc>
 8002782:	4b72      	ldr	r3, [pc, #456]	; (800294c <HAL_RCC_OscConfig+0x26c>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4a71      	ldr	r2, [pc, #452]	; (800294c <HAL_RCC_OscConfig+0x26c>)
 8002788:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800278c:	6013      	str	r3, [r2, #0]
 800278e:	4b6f      	ldr	r3, [pc, #444]	; (800294c <HAL_RCC_OscConfig+0x26c>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4a6e      	ldr	r2, [pc, #440]	; (800294c <HAL_RCC_OscConfig+0x26c>)
 8002794:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002798:	6013      	str	r3, [r2, #0]
 800279a:	e00b      	b.n	80027b4 <HAL_RCC_OscConfig+0xd4>
 800279c:	4b6b      	ldr	r3, [pc, #428]	; (800294c <HAL_RCC_OscConfig+0x26c>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a6a      	ldr	r2, [pc, #424]	; (800294c <HAL_RCC_OscConfig+0x26c>)
 80027a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027a6:	6013      	str	r3, [r2, #0]
 80027a8:	4b68      	ldr	r3, [pc, #416]	; (800294c <HAL_RCC_OscConfig+0x26c>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a67      	ldr	r2, [pc, #412]	; (800294c <HAL_RCC_OscConfig+0x26c>)
 80027ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027b2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d013      	beq.n	80027e4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027bc:	f7fe f830 	bl	8000820 <HAL_GetTick>
 80027c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027c2:	e008      	b.n	80027d6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027c4:	f7fe f82c 	bl	8000820 <HAL_GetTick>
 80027c8:	4602      	mov	r2, r0
 80027ca:	693b      	ldr	r3, [r7, #16]
 80027cc:	1ad3      	subs	r3, r2, r3
 80027ce:	2b64      	cmp	r3, #100	; 0x64
 80027d0:	d901      	bls.n	80027d6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80027d2:	2303      	movs	r3, #3
 80027d4:	e200      	b.n	8002bd8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027d6:	4b5d      	ldr	r3, [pc, #372]	; (800294c <HAL_RCC_OscConfig+0x26c>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d0f0      	beq.n	80027c4 <HAL_RCC_OscConfig+0xe4>
 80027e2:	e014      	b.n	800280e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027e4:	f7fe f81c 	bl	8000820 <HAL_GetTick>
 80027e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027ea:	e008      	b.n	80027fe <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027ec:	f7fe f818 	bl	8000820 <HAL_GetTick>
 80027f0:	4602      	mov	r2, r0
 80027f2:	693b      	ldr	r3, [r7, #16]
 80027f4:	1ad3      	subs	r3, r2, r3
 80027f6:	2b64      	cmp	r3, #100	; 0x64
 80027f8:	d901      	bls.n	80027fe <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80027fa:	2303      	movs	r3, #3
 80027fc:	e1ec      	b.n	8002bd8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027fe:	4b53      	ldr	r3, [pc, #332]	; (800294c <HAL_RCC_OscConfig+0x26c>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002806:	2b00      	cmp	r3, #0
 8002808:	d1f0      	bne.n	80027ec <HAL_RCC_OscConfig+0x10c>
 800280a:	e000      	b.n	800280e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800280c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f003 0302 	and.w	r3, r3, #2
 8002816:	2b00      	cmp	r3, #0
 8002818:	d063      	beq.n	80028e2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800281a:	4b4c      	ldr	r3, [pc, #304]	; (800294c <HAL_RCC_OscConfig+0x26c>)
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	f003 030c 	and.w	r3, r3, #12
 8002822:	2b00      	cmp	r3, #0
 8002824:	d00b      	beq.n	800283e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002826:	4b49      	ldr	r3, [pc, #292]	; (800294c <HAL_RCC_OscConfig+0x26c>)
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	f003 030c 	and.w	r3, r3, #12
 800282e:	2b08      	cmp	r3, #8
 8002830:	d11c      	bne.n	800286c <HAL_RCC_OscConfig+0x18c>
 8002832:	4b46      	ldr	r3, [pc, #280]	; (800294c <HAL_RCC_OscConfig+0x26c>)
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800283a:	2b00      	cmp	r3, #0
 800283c:	d116      	bne.n	800286c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800283e:	4b43      	ldr	r3, [pc, #268]	; (800294c <HAL_RCC_OscConfig+0x26c>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f003 0302 	and.w	r3, r3, #2
 8002846:	2b00      	cmp	r3, #0
 8002848:	d005      	beq.n	8002856 <HAL_RCC_OscConfig+0x176>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	691b      	ldr	r3, [r3, #16]
 800284e:	2b01      	cmp	r3, #1
 8002850:	d001      	beq.n	8002856 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002852:	2301      	movs	r3, #1
 8002854:	e1c0      	b.n	8002bd8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002856:	4b3d      	ldr	r3, [pc, #244]	; (800294c <HAL_RCC_OscConfig+0x26c>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	695b      	ldr	r3, [r3, #20]
 8002862:	00db      	lsls	r3, r3, #3
 8002864:	4939      	ldr	r1, [pc, #228]	; (800294c <HAL_RCC_OscConfig+0x26c>)
 8002866:	4313      	orrs	r3, r2
 8002868:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800286a:	e03a      	b.n	80028e2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	691b      	ldr	r3, [r3, #16]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d020      	beq.n	80028b6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002874:	4b36      	ldr	r3, [pc, #216]	; (8002950 <HAL_RCC_OscConfig+0x270>)
 8002876:	2201      	movs	r2, #1
 8002878:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800287a:	f7fd ffd1 	bl	8000820 <HAL_GetTick>
 800287e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002880:	e008      	b.n	8002894 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002882:	f7fd ffcd 	bl	8000820 <HAL_GetTick>
 8002886:	4602      	mov	r2, r0
 8002888:	693b      	ldr	r3, [r7, #16]
 800288a:	1ad3      	subs	r3, r2, r3
 800288c:	2b02      	cmp	r3, #2
 800288e:	d901      	bls.n	8002894 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002890:	2303      	movs	r3, #3
 8002892:	e1a1      	b.n	8002bd8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002894:	4b2d      	ldr	r3, [pc, #180]	; (800294c <HAL_RCC_OscConfig+0x26c>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f003 0302 	and.w	r3, r3, #2
 800289c:	2b00      	cmp	r3, #0
 800289e:	d0f0      	beq.n	8002882 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028a0:	4b2a      	ldr	r3, [pc, #168]	; (800294c <HAL_RCC_OscConfig+0x26c>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	695b      	ldr	r3, [r3, #20]
 80028ac:	00db      	lsls	r3, r3, #3
 80028ae:	4927      	ldr	r1, [pc, #156]	; (800294c <HAL_RCC_OscConfig+0x26c>)
 80028b0:	4313      	orrs	r3, r2
 80028b2:	600b      	str	r3, [r1, #0]
 80028b4:	e015      	b.n	80028e2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028b6:	4b26      	ldr	r3, [pc, #152]	; (8002950 <HAL_RCC_OscConfig+0x270>)
 80028b8:	2200      	movs	r2, #0
 80028ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028bc:	f7fd ffb0 	bl	8000820 <HAL_GetTick>
 80028c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028c2:	e008      	b.n	80028d6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028c4:	f7fd ffac 	bl	8000820 <HAL_GetTick>
 80028c8:	4602      	mov	r2, r0
 80028ca:	693b      	ldr	r3, [r7, #16]
 80028cc:	1ad3      	subs	r3, r2, r3
 80028ce:	2b02      	cmp	r3, #2
 80028d0:	d901      	bls.n	80028d6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80028d2:	2303      	movs	r3, #3
 80028d4:	e180      	b.n	8002bd8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028d6:	4b1d      	ldr	r3, [pc, #116]	; (800294c <HAL_RCC_OscConfig+0x26c>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f003 0302 	and.w	r3, r3, #2
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d1f0      	bne.n	80028c4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f003 0308 	and.w	r3, r3, #8
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d03a      	beq.n	8002964 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	699b      	ldr	r3, [r3, #24]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d019      	beq.n	800292a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028f6:	4b17      	ldr	r3, [pc, #92]	; (8002954 <HAL_RCC_OscConfig+0x274>)
 80028f8:	2201      	movs	r2, #1
 80028fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028fc:	f7fd ff90 	bl	8000820 <HAL_GetTick>
 8002900:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002902:	e008      	b.n	8002916 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002904:	f7fd ff8c 	bl	8000820 <HAL_GetTick>
 8002908:	4602      	mov	r2, r0
 800290a:	693b      	ldr	r3, [r7, #16]
 800290c:	1ad3      	subs	r3, r2, r3
 800290e:	2b02      	cmp	r3, #2
 8002910:	d901      	bls.n	8002916 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002912:	2303      	movs	r3, #3
 8002914:	e160      	b.n	8002bd8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002916:	4b0d      	ldr	r3, [pc, #52]	; (800294c <HAL_RCC_OscConfig+0x26c>)
 8002918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800291a:	f003 0302 	and.w	r3, r3, #2
 800291e:	2b00      	cmp	r3, #0
 8002920:	d0f0      	beq.n	8002904 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002922:	2001      	movs	r0, #1
 8002924:	f000 faa6 	bl	8002e74 <RCC_Delay>
 8002928:	e01c      	b.n	8002964 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800292a:	4b0a      	ldr	r3, [pc, #40]	; (8002954 <HAL_RCC_OscConfig+0x274>)
 800292c:	2200      	movs	r2, #0
 800292e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002930:	f7fd ff76 	bl	8000820 <HAL_GetTick>
 8002934:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002936:	e00f      	b.n	8002958 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002938:	f7fd ff72 	bl	8000820 <HAL_GetTick>
 800293c:	4602      	mov	r2, r0
 800293e:	693b      	ldr	r3, [r7, #16]
 8002940:	1ad3      	subs	r3, r2, r3
 8002942:	2b02      	cmp	r3, #2
 8002944:	d908      	bls.n	8002958 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002946:	2303      	movs	r3, #3
 8002948:	e146      	b.n	8002bd8 <HAL_RCC_OscConfig+0x4f8>
 800294a:	bf00      	nop
 800294c:	40021000 	.word	0x40021000
 8002950:	42420000 	.word	0x42420000
 8002954:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002958:	4b92      	ldr	r3, [pc, #584]	; (8002ba4 <HAL_RCC_OscConfig+0x4c4>)
 800295a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800295c:	f003 0302 	and.w	r3, r3, #2
 8002960:	2b00      	cmp	r3, #0
 8002962:	d1e9      	bne.n	8002938 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f003 0304 	and.w	r3, r3, #4
 800296c:	2b00      	cmp	r3, #0
 800296e:	f000 80a6 	beq.w	8002abe <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002972:	2300      	movs	r3, #0
 8002974:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002976:	4b8b      	ldr	r3, [pc, #556]	; (8002ba4 <HAL_RCC_OscConfig+0x4c4>)
 8002978:	69db      	ldr	r3, [r3, #28]
 800297a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800297e:	2b00      	cmp	r3, #0
 8002980:	d10d      	bne.n	800299e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002982:	4b88      	ldr	r3, [pc, #544]	; (8002ba4 <HAL_RCC_OscConfig+0x4c4>)
 8002984:	69db      	ldr	r3, [r3, #28]
 8002986:	4a87      	ldr	r2, [pc, #540]	; (8002ba4 <HAL_RCC_OscConfig+0x4c4>)
 8002988:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800298c:	61d3      	str	r3, [r2, #28]
 800298e:	4b85      	ldr	r3, [pc, #532]	; (8002ba4 <HAL_RCC_OscConfig+0x4c4>)
 8002990:	69db      	ldr	r3, [r3, #28]
 8002992:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002996:	60bb      	str	r3, [r7, #8]
 8002998:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800299a:	2301      	movs	r3, #1
 800299c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800299e:	4b82      	ldr	r3, [pc, #520]	; (8002ba8 <HAL_RCC_OscConfig+0x4c8>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d118      	bne.n	80029dc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80029aa:	4b7f      	ldr	r3, [pc, #508]	; (8002ba8 <HAL_RCC_OscConfig+0x4c8>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4a7e      	ldr	r2, [pc, #504]	; (8002ba8 <HAL_RCC_OscConfig+0x4c8>)
 80029b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029b6:	f7fd ff33 	bl	8000820 <HAL_GetTick>
 80029ba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029bc:	e008      	b.n	80029d0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029be:	f7fd ff2f 	bl	8000820 <HAL_GetTick>
 80029c2:	4602      	mov	r2, r0
 80029c4:	693b      	ldr	r3, [r7, #16]
 80029c6:	1ad3      	subs	r3, r2, r3
 80029c8:	2b64      	cmp	r3, #100	; 0x64
 80029ca:	d901      	bls.n	80029d0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80029cc:	2303      	movs	r3, #3
 80029ce:	e103      	b.n	8002bd8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029d0:	4b75      	ldr	r3, [pc, #468]	; (8002ba8 <HAL_RCC_OscConfig+0x4c8>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d0f0      	beq.n	80029be <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	68db      	ldr	r3, [r3, #12]
 80029e0:	2b01      	cmp	r3, #1
 80029e2:	d106      	bne.n	80029f2 <HAL_RCC_OscConfig+0x312>
 80029e4:	4b6f      	ldr	r3, [pc, #444]	; (8002ba4 <HAL_RCC_OscConfig+0x4c4>)
 80029e6:	6a1b      	ldr	r3, [r3, #32]
 80029e8:	4a6e      	ldr	r2, [pc, #440]	; (8002ba4 <HAL_RCC_OscConfig+0x4c4>)
 80029ea:	f043 0301 	orr.w	r3, r3, #1
 80029ee:	6213      	str	r3, [r2, #32]
 80029f0:	e02d      	b.n	8002a4e <HAL_RCC_OscConfig+0x36e>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	68db      	ldr	r3, [r3, #12]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d10c      	bne.n	8002a14 <HAL_RCC_OscConfig+0x334>
 80029fa:	4b6a      	ldr	r3, [pc, #424]	; (8002ba4 <HAL_RCC_OscConfig+0x4c4>)
 80029fc:	6a1b      	ldr	r3, [r3, #32]
 80029fe:	4a69      	ldr	r2, [pc, #420]	; (8002ba4 <HAL_RCC_OscConfig+0x4c4>)
 8002a00:	f023 0301 	bic.w	r3, r3, #1
 8002a04:	6213      	str	r3, [r2, #32]
 8002a06:	4b67      	ldr	r3, [pc, #412]	; (8002ba4 <HAL_RCC_OscConfig+0x4c4>)
 8002a08:	6a1b      	ldr	r3, [r3, #32]
 8002a0a:	4a66      	ldr	r2, [pc, #408]	; (8002ba4 <HAL_RCC_OscConfig+0x4c4>)
 8002a0c:	f023 0304 	bic.w	r3, r3, #4
 8002a10:	6213      	str	r3, [r2, #32]
 8002a12:	e01c      	b.n	8002a4e <HAL_RCC_OscConfig+0x36e>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	68db      	ldr	r3, [r3, #12]
 8002a18:	2b05      	cmp	r3, #5
 8002a1a:	d10c      	bne.n	8002a36 <HAL_RCC_OscConfig+0x356>
 8002a1c:	4b61      	ldr	r3, [pc, #388]	; (8002ba4 <HAL_RCC_OscConfig+0x4c4>)
 8002a1e:	6a1b      	ldr	r3, [r3, #32]
 8002a20:	4a60      	ldr	r2, [pc, #384]	; (8002ba4 <HAL_RCC_OscConfig+0x4c4>)
 8002a22:	f043 0304 	orr.w	r3, r3, #4
 8002a26:	6213      	str	r3, [r2, #32]
 8002a28:	4b5e      	ldr	r3, [pc, #376]	; (8002ba4 <HAL_RCC_OscConfig+0x4c4>)
 8002a2a:	6a1b      	ldr	r3, [r3, #32]
 8002a2c:	4a5d      	ldr	r2, [pc, #372]	; (8002ba4 <HAL_RCC_OscConfig+0x4c4>)
 8002a2e:	f043 0301 	orr.w	r3, r3, #1
 8002a32:	6213      	str	r3, [r2, #32]
 8002a34:	e00b      	b.n	8002a4e <HAL_RCC_OscConfig+0x36e>
 8002a36:	4b5b      	ldr	r3, [pc, #364]	; (8002ba4 <HAL_RCC_OscConfig+0x4c4>)
 8002a38:	6a1b      	ldr	r3, [r3, #32]
 8002a3a:	4a5a      	ldr	r2, [pc, #360]	; (8002ba4 <HAL_RCC_OscConfig+0x4c4>)
 8002a3c:	f023 0301 	bic.w	r3, r3, #1
 8002a40:	6213      	str	r3, [r2, #32]
 8002a42:	4b58      	ldr	r3, [pc, #352]	; (8002ba4 <HAL_RCC_OscConfig+0x4c4>)
 8002a44:	6a1b      	ldr	r3, [r3, #32]
 8002a46:	4a57      	ldr	r2, [pc, #348]	; (8002ba4 <HAL_RCC_OscConfig+0x4c4>)
 8002a48:	f023 0304 	bic.w	r3, r3, #4
 8002a4c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	68db      	ldr	r3, [r3, #12]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d015      	beq.n	8002a82 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a56:	f7fd fee3 	bl	8000820 <HAL_GetTick>
 8002a5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a5c:	e00a      	b.n	8002a74 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a5e:	f7fd fedf 	bl	8000820 <HAL_GetTick>
 8002a62:	4602      	mov	r2, r0
 8002a64:	693b      	ldr	r3, [r7, #16]
 8002a66:	1ad3      	subs	r3, r2, r3
 8002a68:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d901      	bls.n	8002a74 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002a70:	2303      	movs	r3, #3
 8002a72:	e0b1      	b.n	8002bd8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a74:	4b4b      	ldr	r3, [pc, #300]	; (8002ba4 <HAL_RCC_OscConfig+0x4c4>)
 8002a76:	6a1b      	ldr	r3, [r3, #32]
 8002a78:	f003 0302 	and.w	r3, r3, #2
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d0ee      	beq.n	8002a5e <HAL_RCC_OscConfig+0x37e>
 8002a80:	e014      	b.n	8002aac <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a82:	f7fd fecd 	bl	8000820 <HAL_GetTick>
 8002a86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a88:	e00a      	b.n	8002aa0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a8a:	f7fd fec9 	bl	8000820 <HAL_GetTick>
 8002a8e:	4602      	mov	r2, r0
 8002a90:	693b      	ldr	r3, [r7, #16]
 8002a92:	1ad3      	subs	r3, r2, r3
 8002a94:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d901      	bls.n	8002aa0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002a9c:	2303      	movs	r3, #3
 8002a9e:	e09b      	b.n	8002bd8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002aa0:	4b40      	ldr	r3, [pc, #256]	; (8002ba4 <HAL_RCC_OscConfig+0x4c4>)
 8002aa2:	6a1b      	ldr	r3, [r3, #32]
 8002aa4:	f003 0302 	and.w	r3, r3, #2
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d1ee      	bne.n	8002a8a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002aac:	7dfb      	ldrb	r3, [r7, #23]
 8002aae:	2b01      	cmp	r3, #1
 8002ab0:	d105      	bne.n	8002abe <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ab2:	4b3c      	ldr	r3, [pc, #240]	; (8002ba4 <HAL_RCC_OscConfig+0x4c4>)
 8002ab4:	69db      	ldr	r3, [r3, #28]
 8002ab6:	4a3b      	ldr	r2, [pc, #236]	; (8002ba4 <HAL_RCC_OscConfig+0x4c4>)
 8002ab8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002abc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	69db      	ldr	r3, [r3, #28]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	f000 8087 	beq.w	8002bd6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002ac8:	4b36      	ldr	r3, [pc, #216]	; (8002ba4 <HAL_RCC_OscConfig+0x4c4>)
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	f003 030c 	and.w	r3, r3, #12
 8002ad0:	2b08      	cmp	r3, #8
 8002ad2:	d061      	beq.n	8002b98 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	69db      	ldr	r3, [r3, #28]
 8002ad8:	2b02      	cmp	r3, #2
 8002ada:	d146      	bne.n	8002b6a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002adc:	4b33      	ldr	r3, [pc, #204]	; (8002bac <HAL_RCC_OscConfig+0x4cc>)
 8002ade:	2200      	movs	r2, #0
 8002ae0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ae2:	f7fd fe9d 	bl	8000820 <HAL_GetTick>
 8002ae6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ae8:	e008      	b.n	8002afc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002aea:	f7fd fe99 	bl	8000820 <HAL_GetTick>
 8002aee:	4602      	mov	r2, r0
 8002af0:	693b      	ldr	r3, [r7, #16]
 8002af2:	1ad3      	subs	r3, r2, r3
 8002af4:	2b02      	cmp	r3, #2
 8002af6:	d901      	bls.n	8002afc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002af8:	2303      	movs	r3, #3
 8002afa:	e06d      	b.n	8002bd8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002afc:	4b29      	ldr	r3, [pc, #164]	; (8002ba4 <HAL_RCC_OscConfig+0x4c4>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d1f0      	bne.n	8002aea <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6a1b      	ldr	r3, [r3, #32]
 8002b0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b10:	d108      	bne.n	8002b24 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002b12:	4b24      	ldr	r3, [pc, #144]	; (8002ba4 <HAL_RCC_OscConfig+0x4c4>)
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	689b      	ldr	r3, [r3, #8]
 8002b1e:	4921      	ldr	r1, [pc, #132]	; (8002ba4 <HAL_RCC_OscConfig+0x4c4>)
 8002b20:	4313      	orrs	r3, r2
 8002b22:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b24:	4b1f      	ldr	r3, [pc, #124]	; (8002ba4 <HAL_RCC_OscConfig+0x4c4>)
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6a19      	ldr	r1, [r3, #32]
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b34:	430b      	orrs	r3, r1
 8002b36:	491b      	ldr	r1, [pc, #108]	; (8002ba4 <HAL_RCC_OscConfig+0x4c4>)
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b3c:	4b1b      	ldr	r3, [pc, #108]	; (8002bac <HAL_RCC_OscConfig+0x4cc>)
 8002b3e:	2201      	movs	r2, #1
 8002b40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b42:	f7fd fe6d 	bl	8000820 <HAL_GetTick>
 8002b46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002b48:	e008      	b.n	8002b5c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b4a:	f7fd fe69 	bl	8000820 <HAL_GetTick>
 8002b4e:	4602      	mov	r2, r0
 8002b50:	693b      	ldr	r3, [r7, #16]
 8002b52:	1ad3      	subs	r3, r2, r3
 8002b54:	2b02      	cmp	r3, #2
 8002b56:	d901      	bls.n	8002b5c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002b58:	2303      	movs	r3, #3
 8002b5a:	e03d      	b.n	8002bd8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002b5c:	4b11      	ldr	r3, [pc, #68]	; (8002ba4 <HAL_RCC_OscConfig+0x4c4>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d0f0      	beq.n	8002b4a <HAL_RCC_OscConfig+0x46a>
 8002b68:	e035      	b.n	8002bd6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b6a:	4b10      	ldr	r3, [pc, #64]	; (8002bac <HAL_RCC_OscConfig+0x4cc>)
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b70:	f7fd fe56 	bl	8000820 <HAL_GetTick>
 8002b74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b76:	e008      	b.n	8002b8a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b78:	f7fd fe52 	bl	8000820 <HAL_GetTick>
 8002b7c:	4602      	mov	r2, r0
 8002b7e:	693b      	ldr	r3, [r7, #16]
 8002b80:	1ad3      	subs	r3, r2, r3
 8002b82:	2b02      	cmp	r3, #2
 8002b84:	d901      	bls.n	8002b8a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002b86:	2303      	movs	r3, #3
 8002b88:	e026      	b.n	8002bd8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b8a:	4b06      	ldr	r3, [pc, #24]	; (8002ba4 <HAL_RCC_OscConfig+0x4c4>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d1f0      	bne.n	8002b78 <HAL_RCC_OscConfig+0x498>
 8002b96:	e01e      	b.n	8002bd6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	69db      	ldr	r3, [r3, #28]
 8002b9c:	2b01      	cmp	r3, #1
 8002b9e:	d107      	bne.n	8002bb0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	e019      	b.n	8002bd8 <HAL_RCC_OscConfig+0x4f8>
 8002ba4:	40021000 	.word	0x40021000
 8002ba8:	40007000 	.word	0x40007000
 8002bac:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002bb0:	4b0b      	ldr	r3, [pc, #44]	; (8002be0 <HAL_RCC_OscConfig+0x500>)
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6a1b      	ldr	r3, [r3, #32]
 8002bc0:	429a      	cmp	r2, r3
 8002bc2:	d106      	bne.n	8002bd2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bce:	429a      	cmp	r2, r3
 8002bd0:	d001      	beq.n	8002bd6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	e000      	b.n	8002bd8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002bd6:	2300      	movs	r3, #0
}
 8002bd8:	4618      	mov	r0, r3
 8002bda:	3718      	adds	r7, #24
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bd80      	pop	{r7, pc}
 8002be0:	40021000 	.word	0x40021000

08002be4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b084      	sub	sp, #16
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
 8002bec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d101      	bne.n	8002bf8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	e0d0      	b.n	8002d9a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002bf8:	4b6a      	ldr	r3, [pc, #424]	; (8002da4 <HAL_RCC_ClockConfig+0x1c0>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f003 0307 	and.w	r3, r3, #7
 8002c00:	683a      	ldr	r2, [r7, #0]
 8002c02:	429a      	cmp	r2, r3
 8002c04:	d910      	bls.n	8002c28 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c06:	4b67      	ldr	r3, [pc, #412]	; (8002da4 <HAL_RCC_ClockConfig+0x1c0>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f023 0207 	bic.w	r2, r3, #7
 8002c0e:	4965      	ldr	r1, [pc, #404]	; (8002da4 <HAL_RCC_ClockConfig+0x1c0>)
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	4313      	orrs	r3, r2
 8002c14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c16:	4b63      	ldr	r3, [pc, #396]	; (8002da4 <HAL_RCC_ClockConfig+0x1c0>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f003 0307 	and.w	r3, r3, #7
 8002c1e:	683a      	ldr	r2, [r7, #0]
 8002c20:	429a      	cmp	r2, r3
 8002c22:	d001      	beq.n	8002c28 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002c24:	2301      	movs	r3, #1
 8002c26:	e0b8      	b.n	8002d9a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f003 0302 	and.w	r3, r3, #2
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d020      	beq.n	8002c76 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f003 0304 	and.w	r3, r3, #4
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d005      	beq.n	8002c4c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c40:	4b59      	ldr	r3, [pc, #356]	; (8002da8 <HAL_RCC_ClockConfig+0x1c4>)
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	4a58      	ldr	r2, [pc, #352]	; (8002da8 <HAL_RCC_ClockConfig+0x1c4>)
 8002c46:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002c4a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f003 0308 	and.w	r3, r3, #8
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d005      	beq.n	8002c64 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c58:	4b53      	ldr	r3, [pc, #332]	; (8002da8 <HAL_RCC_ClockConfig+0x1c4>)
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	4a52      	ldr	r2, [pc, #328]	; (8002da8 <HAL_RCC_ClockConfig+0x1c4>)
 8002c5e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002c62:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c64:	4b50      	ldr	r3, [pc, #320]	; (8002da8 <HAL_RCC_ClockConfig+0x1c4>)
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	689b      	ldr	r3, [r3, #8]
 8002c70:	494d      	ldr	r1, [pc, #308]	; (8002da8 <HAL_RCC_ClockConfig+0x1c4>)
 8002c72:	4313      	orrs	r3, r2
 8002c74:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f003 0301 	and.w	r3, r3, #1
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d040      	beq.n	8002d04 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	2b01      	cmp	r3, #1
 8002c88:	d107      	bne.n	8002c9a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c8a:	4b47      	ldr	r3, [pc, #284]	; (8002da8 <HAL_RCC_ClockConfig+0x1c4>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d115      	bne.n	8002cc2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c96:	2301      	movs	r3, #1
 8002c98:	e07f      	b.n	8002d9a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	2b02      	cmp	r3, #2
 8002ca0:	d107      	bne.n	8002cb2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ca2:	4b41      	ldr	r3, [pc, #260]	; (8002da8 <HAL_RCC_ClockConfig+0x1c4>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d109      	bne.n	8002cc2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	e073      	b.n	8002d9a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cb2:	4b3d      	ldr	r3, [pc, #244]	; (8002da8 <HAL_RCC_ClockConfig+0x1c4>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f003 0302 	and.w	r3, r3, #2
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d101      	bne.n	8002cc2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	e06b      	b.n	8002d9a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002cc2:	4b39      	ldr	r3, [pc, #228]	; (8002da8 <HAL_RCC_ClockConfig+0x1c4>)
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	f023 0203 	bic.w	r2, r3, #3
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	4936      	ldr	r1, [pc, #216]	; (8002da8 <HAL_RCC_ClockConfig+0x1c4>)
 8002cd0:	4313      	orrs	r3, r2
 8002cd2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002cd4:	f7fd fda4 	bl	8000820 <HAL_GetTick>
 8002cd8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cda:	e00a      	b.n	8002cf2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cdc:	f7fd fda0 	bl	8000820 <HAL_GetTick>
 8002ce0:	4602      	mov	r2, r0
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	1ad3      	subs	r3, r2, r3
 8002ce6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d901      	bls.n	8002cf2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002cee:	2303      	movs	r3, #3
 8002cf0:	e053      	b.n	8002d9a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cf2:	4b2d      	ldr	r3, [pc, #180]	; (8002da8 <HAL_RCC_ClockConfig+0x1c4>)
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	f003 020c 	and.w	r2, r3, #12
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	009b      	lsls	r3, r3, #2
 8002d00:	429a      	cmp	r2, r3
 8002d02:	d1eb      	bne.n	8002cdc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002d04:	4b27      	ldr	r3, [pc, #156]	; (8002da4 <HAL_RCC_ClockConfig+0x1c0>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f003 0307 	and.w	r3, r3, #7
 8002d0c:	683a      	ldr	r2, [r7, #0]
 8002d0e:	429a      	cmp	r2, r3
 8002d10:	d210      	bcs.n	8002d34 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d12:	4b24      	ldr	r3, [pc, #144]	; (8002da4 <HAL_RCC_ClockConfig+0x1c0>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f023 0207 	bic.w	r2, r3, #7
 8002d1a:	4922      	ldr	r1, [pc, #136]	; (8002da4 <HAL_RCC_ClockConfig+0x1c0>)
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d22:	4b20      	ldr	r3, [pc, #128]	; (8002da4 <HAL_RCC_ClockConfig+0x1c0>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f003 0307 	and.w	r3, r3, #7
 8002d2a:	683a      	ldr	r2, [r7, #0]
 8002d2c:	429a      	cmp	r2, r3
 8002d2e:	d001      	beq.n	8002d34 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002d30:	2301      	movs	r3, #1
 8002d32:	e032      	b.n	8002d9a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f003 0304 	and.w	r3, r3, #4
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d008      	beq.n	8002d52 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d40:	4b19      	ldr	r3, [pc, #100]	; (8002da8 <HAL_RCC_ClockConfig+0x1c4>)
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	68db      	ldr	r3, [r3, #12]
 8002d4c:	4916      	ldr	r1, [pc, #88]	; (8002da8 <HAL_RCC_ClockConfig+0x1c4>)
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f003 0308 	and.w	r3, r3, #8
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d009      	beq.n	8002d72 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002d5e:	4b12      	ldr	r3, [pc, #72]	; (8002da8 <HAL_RCC_ClockConfig+0x1c4>)
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	691b      	ldr	r3, [r3, #16]
 8002d6a:	00db      	lsls	r3, r3, #3
 8002d6c:	490e      	ldr	r1, [pc, #56]	; (8002da8 <HAL_RCC_ClockConfig+0x1c4>)
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002d72:	f000 f821 	bl	8002db8 <HAL_RCC_GetSysClockFreq>
 8002d76:	4602      	mov	r2, r0
 8002d78:	4b0b      	ldr	r3, [pc, #44]	; (8002da8 <HAL_RCC_ClockConfig+0x1c4>)
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	091b      	lsrs	r3, r3, #4
 8002d7e:	f003 030f 	and.w	r3, r3, #15
 8002d82:	490a      	ldr	r1, [pc, #40]	; (8002dac <HAL_RCC_ClockConfig+0x1c8>)
 8002d84:	5ccb      	ldrb	r3, [r1, r3]
 8002d86:	fa22 f303 	lsr.w	r3, r2, r3
 8002d8a:	4a09      	ldr	r2, [pc, #36]	; (8002db0 <HAL_RCC_ClockConfig+0x1cc>)
 8002d8c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002d8e:	4b09      	ldr	r3, [pc, #36]	; (8002db4 <HAL_RCC_ClockConfig+0x1d0>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4618      	mov	r0, r3
 8002d94:	f7fd fd02 	bl	800079c <HAL_InitTick>

  return HAL_OK;
 8002d98:	2300      	movs	r3, #0
}
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	3710      	adds	r7, #16
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd80      	pop	{r7, pc}
 8002da2:	bf00      	nop
 8002da4:	40022000 	.word	0x40022000
 8002da8:	40021000 	.word	0x40021000
 8002dac:	080092f0 	.word	0x080092f0
 8002db0:	20000000 	.word	0x20000000
 8002db4:	20000004 	.word	0x20000004

08002db8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002db8:	b490      	push	{r4, r7}
 8002dba:	b08a      	sub	sp, #40	; 0x28
 8002dbc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002dbe:	4b29      	ldr	r3, [pc, #164]	; (8002e64 <HAL_RCC_GetSysClockFreq+0xac>)
 8002dc0:	1d3c      	adds	r4, r7, #4
 8002dc2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002dc4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002dc8:	f240 2301 	movw	r3, #513	; 0x201
 8002dcc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002dce:	2300      	movs	r3, #0
 8002dd0:	61fb      	str	r3, [r7, #28]
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	61bb      	str	r3, [r7, #24]
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	627b      	str	r3, [r7, #36]	; 0x24
 8002dda:	2300      	movs	r3, #0
 8002ddc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002dde:	2300      	movs	r3, #0
 8002de0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002de2:	4b21      	ldr	r3, [pc, #132]	; (8002e68 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002de8:	69fb      	ldr	r3, [r7, #28]
 8002dea:	f003 030c 	and.w	r3, r3, #12
 8002dee:	2b04      	cmp	r3, #4
 8002df0:	d002      	beq.n	8002df8 <HAL_RCC_GetSysClockFreq+0x40>
 8002df2:	2b08      	cmp	r3, #8
 8002df4:	d003      	beq.n	8002dfe <HAL_RCC_GetSysClockFreq+0x46>
 8002df6:	e02b      	b.n	8002e50 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002df8:	4b1c      	ldr	r3, [pc, #112]	; (8002e6c <HAL_RCC_GetSysClockFreq+0xb4>)
 8002dfa:	623b      	str	r3, [r7, #32]
      break;
 8002dfc:	e02b      	b.n	8002e56 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002dfe:	69fb      	ldr	r3, [r7, #28]
 8002e00:	0c9b      	lsrs	r3, r3, #18
 8002e02:	f003 030f 	and.w	r3, r3, #15
 8002e06:	3328      	adds	r3, #40	; 0x28
 8002e08:	443b      	add	r3, r7
 8002e0a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002e0e:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002e10:	69fb      	ldr	r3, [r7, #28]
 8002e12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d012      	beq.n	8002e40 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002e1a:	4b13      	ldr	r3, [pc, #76]	; (8002e68 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	0c5b      	lsrs	r3, r3, #17
 8002e20:	f003 0301 	and.w	r3, r3, #1
 8002e24:	3328      	adds	r3, #40	; 0x28
 8002e26:	443b      	add	r3, r7
 8002e28:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002e2c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002e2e:	697b      	ldr	r3, [r7, #20]
 8002e30:	4a0e      	ldr	r2, [pc, #56]	; (8002e6c <HAL_RCC_GetSysClockFreq+0xb4>)
 8002e32:	fb03 f202 	mul.w	r2, r3, r2
 8002e36:	69bb      	ldr	r3, [r7, #24]
 8002e38:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e3c:	627b      	str	r3, [r7, #36]	; 0x24
 8002e3e:	e004      	b.n	8002e4a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002e40:	697b      	ldr	r3, [r7, #20]
 8002e42:	4a0b      	ldr	r2, [pc, #44]	; (8002e70 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002e44:	fb02 f303 	mul.w	r3, r2, r3
 8002e48:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e4c:	623b      	str	r3, [r7, #32]
      break;
 8002e4e:	e002      	b.n	8002e56 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002e50:	4b06      	ldr	r3, [pc, #24]	; (8002e6c <HAL_RCC_GetSysClockFreq+0xb4>)
 8002e52:	623b      	str	r3, [r7, #32]
      break;
 8002e54:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e56:	6a3b      	ldr	r3, [r7, #32]
}
 8002e58:	4618      	mov	r0, r3
 8002e5a:	3728      	adds	r7, #40	; 0x28
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bc90      	pop	{r4, r7}
 8002e60:	4770      	bx	lr
 8002e62:	bf00      	nop
 8002e64:	08009294 	.word	0x08009294
 8002e68:	40021000 	.word	0x40021000
 8002e6c:	007a1200 	.word	0x007a1200
 8002e70:	003d0900 	.word	0x003d0900

08002e74 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002e74:	b480      	push	{r7}
 8002e76:	b085      	sub	sp, #20
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002e7c:	4b0a      	ldr	r3, [pc, #40]	; (8002ea8 <RCC_Delay+0x34>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4a0a      	ldr	r2, [pc, #40]	; (8002eac <RCC_Delay+0x38>)
 8002e82:	fba2 2303 	umull	r2, r3, r2, r3
 8002e86:	0a5b      	lsrs	r3, r3, #9
 8002e88:	687a      	ldr	r2, [r7, #4]
 8002e8a:	fb02 f303 	mul.w	r3, r2, r3
 8002e8e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002e90:	bf00      	nop
  }
  while (Delay --);
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	1e5a      	subs	r2, r3, #1
 8002e96:	60fa      	str	r2, [r7, #12]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d1f9      	bne.n	8002e90 <RCC_Delay+0x1c>
}
 8002e9c:	bf00      	nop
 8002e9e:	bf00      	nop
 8002ea0:	3714      	adds	r7, #20
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bc80      	pop	{r7}
 8002ea6:	4770      	bx	lr
 8002ea8:	20000000 	.word	0x20000000
 8002eac:	10624dd3 	.word	0x10624dd3

08002eb0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b086      	sub	sp, #24
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002eb8:	2300      	movs	r3, #0
 8002eba:	613b      	str	r3, [r7, #16]
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f003 0301 	and.w	r3, r3, #1
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d07d      	beq.n	8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002ecc:	2300      	movs	r3, #0
 8002ece:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ed0:	4b4f      	ldr	r3, [pc, #316]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ed2:	69db      	ldr	r3, [r3, #28]
 8002ed4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d10d      	bne.n	8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002edc:	4b4c      	ldr	r3, [pc, #304]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ede:	69db      	ldr	r3, [r3, #28]
 8002ee0:	4a4b      	ldr	r2, [pc, #300]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ee2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ee6:	61d3      	str	r3, [r2, #28]
 8002ee8:	4b49      	ldr	r3, [pc, #292]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002eea:	69db      	ldr	r3, [r3, #28]
 8002eec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ef0:	60bb      	str	r3, [r7, #8]
 8002ef2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ef8:	4b46      	ldr	r3, [pc, #280]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d118      	bne.n	8002f36 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f04:	4b43      	ldr	r3, [pc, #268]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4a42      	ldr	r2, [pc, #264]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002f0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f0e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f10:	f7fd fc86 	bl	8000820 <HAL_GetTick>
 8002f14:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f16:	e008      	b.n	8002f2a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f18:	f7fd fc82 	bl	8000820 <HAL_GetTick>
 8002f1c:	4602      	mov	r2, r0
 8002f1e:	693b      	ldr	r3, [r7, #16]
 8002f20:	1ad3      	subs	r3, r2, r3
 8002f22:	2b64      	cmp	r3, #100	; 0x64
 8002f24:	d901      	bls.n	8002f2a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002f26:	2303      	movs	r3, #3
 8002f28:	e06d      	b.n	8003006 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f2a:	4b3a      	ldr	r3, [pc, #232]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d0f0      	beq.n	8002f18 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002f36:	4b36      	ldr	r3, [pc, #216]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f38:	6a1b      	ldr	r3, [r3, #32]
 8002f3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f3e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d02e      	beq.n	8002fa4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f4e:	68fa      	ldr	r2, [r7, #12]
 8002f50:	429a      	cmp	r2, r3
 8002f52:	d027      	beq.n	8002fa4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002f54:	4b2e      	ldr	r3, [pc, #184]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f56:	6a1b      	ldr	r3, [r3, #32]
 8002f58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f5c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002f5e:	4b2e      	ldr	r3, [pc, #184]	; (8003018 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002f60:	2201      	movs	r2, #1
 8002f62:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002f64:	4b2c      	ldr	r3, [pc, #176]	; (8003018 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002f66:	2200      	movs	r2, #0
 8002f68:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002f6a:	4a29      	ldr	r2, [pc, #164]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	f003 0301 	and.w	r3, r3, #1
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d014      	beq.n	8002fa4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f7a:	f7fd fc51 	bl	8000820 <HAL_GetTick>
 8002f7e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f80:	e00a      	b.n	8002f98 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f82:	f7fd fc4d 	bl	8000820 <HAL_GetTick>
 8002f86:	4602      	mov	r2, r0
 8002f88:	693b      	ldr	r3, [r7, #16]
 8002f8a:	1ad3      	subs	r3, r2, r3
 8002f8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d901      	bls.n	8002f98 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002f94:	2303      	movs	r3, #3
 8002f96:	e036      	b.n	8003006 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f98:	4b1d      	ldr	r3, [pc, #116]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f9a:	6a1b      	ldr	r3, [r3, #32]
 8002f9c:	f003 0302 	and.w	r3, r3, #2
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d0ee      	beq.n	8002f82 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002fa4:	4b1a      	ldr	r3, [pc, #104]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fa6:	6a1b      	ldr	r3, [r3, #32]
 8002fa8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	4917      	ldr	r1, [pc, #92]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002fb6:	7dfb      	ldrb	r3, [r7, #23]
 8002fb8:	2b01      	cmp	r3, #1
 8002fba:	d105      	bne.n	8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fbc:	4b14      	ldr	r3, [pc, #80]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fbe:	69db      	ldr	r3, [r3, #28]
 8002fc0:	4a13      	ldr	r2, [pc, #76]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fc2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002fc6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f003 0302 	and.w	r3, r3, #2
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d008      	beq.n	8002fe6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002fd4:	4b0e      	ldr	r3, [pc, #56]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	689b      	ldr	r3, [r3, #8]
 8002fe0:	490b      	ldr	r1, [pc, #44]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f003 0310 	and.w	r3, r3, #16
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d008      	beq.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002ff2:	4b07      	ldr	r3, [pc, #28]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	68db      	ldr	r3, [r3, #12]
 8002ffe:	4904      	ldr	r1, [pc, #16]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003000:	4313      	orrs	r3, r2
 8003002:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003004:	2300      	movs	r3, #0
}
 8003006:	4618      	mov	r0, r3
 8003008:	3718      	adds	r7, #24
 800300a:	46bd      	mov	sp, r7
 800300c:	bd80      	pop	{r7, pc}
 800300e:	bf00      	nop
 8003010:	40021000 	.word	0x40021000
 8003014:	40007000 	.word	0x40007000
 8003018:	42420440 	.word	0x42420440

0800301c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b082      	sub	sp, #8
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d101      	bne.n	800302e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800302a:	2301      	movs	r3, #1
 800302c:	e041      	b.n	80030b2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003034:	b2db      	uxtb	r3, r3
 8003036:	2b00      	cmp	r3, #0
 8003038:	d106      	bne.n	8003048 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2200      	movs	r2, #0
 800303e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003042:	6878      	ldr	r0, [r7, #4]
 8003044:	f7fd fa22 	bl	800048c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2202      	movs	r2, #2
 800304c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681a      	ldr	r2, [r3, #0]
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	3304      	adds	r3, #4
 8003058:	4619      	mov	r1, r3
 800305a:	4610      	mov	r0, r2
 800305c:	f000 fa44 	bl	80034e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2201      	movs	r2, #1
 8003064:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2201      	movs	r2, #1
 800306c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2201      	movs	r2, #1
 8003074:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2201      	movs	r2, #1
 800307c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2201      	movs	r2, #1
 8003084:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2201      	movs	r2, #1
 800308c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2201      	movs	r2, #1
 8003094:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2201      	movs	r2, #1
 800309c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2201      	movs	r2, #1
 80030a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2201      	movs	r2, #1
 80030ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80030b0:	2300      	movs	r3, #0
}
 80030b2:	4618      	mov	r0, r3
 80030b4:	3708      	adds	r7, #8
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bd80      	pop	{r7, pc}

080030ba <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80030ba:	b580      	push	{r7, lr}
 80030bc:	b082      	sub	sp, #8
 80030be:	af00      	add	r7, sp, #0
 80030c0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d101      	bne.n	80030cc <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80030c8:	2301      	movs	r3, #1
 80030ca:	e041      	b.n	8003150 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030d2:	b2db      	uxtb	r3, r3
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d106      	bne.n	80030e6 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2200      	movs	r2, #0
 80030dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80030e0:	6878      	ldr	r0, [r7, #4]
 80030e2:	f000 f839 	bl	8003158 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2202      	movs	r2, #2
 80030ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681a      	ldr	r2, [r3, #0]
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	3304      	adds	r3, #4
 80030f6:	4619      	mov	r1, r3
 80030f8:	4610      	mov	r0, r2
 80030fa:	f000 f9f5 	bl	80034e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2201      	movs	r2, #1
 8003102:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2201      	movs	r2, #1
 800310a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2201      	movs	r2, #1
 8003112:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2201      	movs	r2, #1
 800311a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2201      	movs	r2, #1
 8003122:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2201      	movs	r2, #1
 800312a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2201      	movs	r2, #1
 8003132:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2201      	movs	r2, #1
 800313a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2201      	movs	r2, #1
 8003142:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2201      	movs	r2, #1
 800314a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800314e:	2300      	movs	r3, #0
}
 8003150:	4618      	mov	r0, r3
 8003152:	3708      	adds	r7, #8
 8003154:	46bd      	mov	sp, r7
 8003156:	bd80      	pop	{r7, pc}

08003158 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8003158:	b480      	push	{r7}
 800315a:	b083      	sub	sp, #12
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8003160:	bf00      	nop
 8003162:	370c      	adds	r7, #12
 8003164:	46bd      	mov	sp, r7
 8003166:	bc80      	pop	{r7}
 8003168:	4770      	bx	lr
	...

0800316c <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b084      	sub	sp, #16
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
 8003174:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d109      	bne.n	8003190 <HAL_TIM_OC_Start+0x24>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003182:	b2db      	uxtb	r3, r3
 8003184:	2b01      	cmp	r3, #1
 8003186:	bf14      	ite	ne
 8003188:	2301      	movne	r3, #1
 800318a:	2300      	moveq	r3, #0
 800318c:	b2db      	uxtb	r3, r3
 800318e:	e022      	b.n	80031d6 <HAL_TIM_OC_Start+0x6a>
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	2b04      	cmp	r3, #4
 8003194:	d109      	bne.n	80031aa <HAL_TIM_OC_Start+0x3e>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800319c:	b2db      	uxtb	r3, r3
 800319e:	2b01      	cmp	r3, #1
 80031a0:	bf14      	ite	ne
 80031a2:	2301      	movne	r3, #1
 80031a4:	2300      	moveq	r3, #0
 80031a6:	b2db      	uxtb	r3, r3
 80031a8:	e015      	b.n	80031d6 <HAL_TIM_OC_Start+0x6a>
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	2b08      	cmp	r3, #8
 80031ae:	d109      	bne.n	80031c4 <HAL_TIM_OC_Start+0x58>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80031b6:	b2db      	uxtb	r3, r3
 80031b8:	2b01      	cmp	r3, #1
 80031ba:	bf14      	ite	ne
 80031bc:	2301      	movne	r3, #1
 80031be:	2300      	moveq	r3, #0
 80031c0:	b2db      	uxtb	r3, r3
 80031c2:	e008      	b.n	80031d6 <HAL_TIM_OC_Start+0x6a>
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80031ca:	b2db      	uxtb	r3, r3
 80031cc:	2b01      	cmp	r3, #1
 80031ce:	bf14      	ite	ne
 80031d0:	2301      	movne	r3, #1
 80031d2:	2300      	moveq	r3, #0
 80031d4:	b2db      	uxtb	r3, r3
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d001      	beq.n	80031de <HAL_TIM_OC_Start+0x72>
  {
    return HAL_ERROR;
 80031da:	2301      	movs	r3, #1
 80031dc:	e05e      	b.n	800329c <HAL_TIM_OC_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d104      	bne.n	80031ee <HAL_TIM_OC_Start+0x82>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2202      	movs	r2, #2
 80031e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80031ec:	e013      	b.n	8003216 <HAL_TIM_OC_Start+0xaa>
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	2b04      	cmp	r3, #4
 80031f2:	d104      	bne.n	80031fe <HAL_TIM_OC_Start+0x92>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2202      	movs	r2, #2
 80031f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80031fc:	e00b      	b.n	8003216 <HAL_TIM_OC_Start+0xaa>
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	2b08      	cmp	r3, #8
 8003202:	d104      	bne.n	800320e <HAL_TIM_OC_Start+0xa2>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2202      	movs	r2, #2
 8003208:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800320c:	e003      	b.n	8003216 <HAL_TIM_OC_Start+0xaa>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2202      	movs	r2, #2
 8003212:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	2201      	movs	r2, #1
 800321c:	6839      	ldr	r1, [r7, #0]
 800321e:	4618      	mov	r0, r3
 8003220:	f000 fbe2 	bl	80039e8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a1e      	ldr	r2, [pc, #120]	; (80032a4 <HAL_TIM_OC_Start+0x138>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d107      	bne.n	800323e <HAL_TIM_OC_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800323c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4a18      	ldr	r2, [pc, #96]	; (80032a4 <HAL_TIM_OC_Start+0x138>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d00e      	beq.n	8003266 <HAL_TIM_OC_Start+0xfa>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003250:	d009      	beq.n	8003266 <HAL_TIM_OC_Start+0xfa>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a14      	ldr	r2, [pc, #80]	; (80032a8 <HAL_TIM_OC_Start+0x13c>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d004      	beq.n	8003266 <HAL_TIM_OC_Start+0xfa>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a12      	ldr	r2, [pc, #72]	; (80032ac <HAL_TIM_OC_Start+0x140>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d111      	bne.n	800328a <HAL_TIM_OC_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	689b      	ldr	r3, [r3, #8]
 800326c:	f003 0307 	and.w	r3, r3, #7
 8003270:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	2b06      	cmp	r3, #6
 8003276:	d010      	beq.n	800329a <HAL_TIM_OC_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	681a      	ldr	r2, [r3, #0]
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f042 0201 	orr.w	r2, r2, #1
 8003286:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003288:	e007      	b.n	800329a <HAL_TIM_OC_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	681a      	ldr	r2, [r3, #0]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f042 0201 	orr.w	r2, r2, #1
 8003298:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800329a:	2300      	movs	r3, #0
}
 800329c:	4618      	mov	r0, r3
 800329e:	3710      	adds	r7, #16
 80032a0:	46bd      	mov	sp, r7
 80032a2:	bd80      	pop	{r7, pc}
 80032a4:	40012c00 	.word	0x40012c00
 80032a8:	40000400 	.word	0x40000400
 80032ac:	40000800 	.word	0x40000800

080032b0 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b084      	sub	sp, #16
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	60f8      	str	r0, [r7, #12]
 80032b8:	60b9      	str	r1, [r7, #8]
 80032ba:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032c2:	2b01      	cmp	r3, #1
 80032c4:	d101      	bne.n	80032ca <HAL_TIM_OC_ConfigChannel+0x1a>
 80032c6:	2302      	movs	r3, #2
 80032c8:	e046      	b.n	8003358 <HAL_TIM_OC_ConfigChannel+0xa8>
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	2201      	movs	r2, #1
 80032ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2b0c      	cmp	r3, #12
 80032d6:	d839      	bhi.n	800334c <HAL_TIM_OC_ConfigChannel+0x9c>
 80032d8:	a201      	add	r2, pc, #4	; (adr r2, 80032e0 <HAL_TIM_OC_ConfigChannel+0x30>)
 80032da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032de:	bf00      	nop
 80032e0:	08003315 	.word	0x08003315
 80032e4:	0800334d 	.word	0x0800334d
 80032e8:	0800334d 	.word	0x0800334d
 80032ec:	0800334d 	.word	0x0800334d
 80032f0:	08003323 	.word	0x08003323
 80032f4:	0800334d 	.word	0x0800334d
 80032f8:	0800334d 	.word	0x0800334d
 80032fc:	0800334d 	.word	0x0800334d
 8003300:	08003331 	.word	0x08003331
 8003304:	0800334d 	.word	0x0800334d
 8003308:	0800334d 	.word	0x0800334d
 800330c:	0800334d 	.word	0x0800334d
 8003310:	0800333f 	.word	0x0800333f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	68b9      	ldr	r1, [r7, #8]
 800331a:	4618      	mov	r0, r3
 800331c:	f000 f946 	bl	80035ac <TIM_OC1_SetConfig>
      break;
 8003320:	e015      	b.n	800334e <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	68b9      	ldr	r1, [r7, #8]
 8003328:	4618      	mov	r0, r3
 800332a:	f000 f9a5 	bl	8003678 <TIM_OC2_SetConfig>
      break;
 800332e:	e00e      	b.n	800334e <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	68b9      	ldr	r1, [r7, #8]
 8003336:	4618      	mov	r0, r3
 8003338:	f000 fa08 	bl	800374c <TIM_OC3_SetConfig>
      break;
 800333c:	e007      	b.n	800334e <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	68b9      	ldr	r1, [r7, #8]
 8003344:	4618      	mov	r0, r3
 8003346:	f000 fa6b 	bl	8003820 <TIM_OC4_SetConfig>
      break;
 800334a:	e000      	b.n	800334e <HAL_TIM_OC_ConfigChannel+0x9e>
    }

    default:
      break;
 800334c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	2200      	movs	r2, #0
 8003352:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003356:	2300      	movs	r3, #0
}
 8003358:	4618      	mov	r0, r3
 800335a:	3710      	adds	r7, #16
 800335c:	46bd      	mov	sp, r7
 800335e:	bd80      	pop	{r7, pc}

08003360 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b084      	sub	sp, #16
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
 8003368:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003370:	2b01      	cmp	r3, #1
 8003372:	d101      	bne.n	8003378 <HAL_TIM_ConfigClockSource+0x18>
 8003374:	2302      	movs	r3, #2
 8003376:	e0b3      	b.n	80034e0 <HAL_TIM_ConfigClockSource+0x180>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2201      	movs	r2, #1
 800337c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2202      	movs	r2, #2
 8003384:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	689b      	ldr	r3, [r3, #8]
 800338e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003396:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800339e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	68fa      	ldr	r2, [r7, #12]
 80033a6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80033b0:	d03e      	beq.n	8003430 <HAL_TIM_ConfigClockSource+0xd0>
 80033b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80033b6:	f200 8087 	bhi.w	80034c8 <HAL_TIM_ConfigClockSource+0x168>
 80033ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033be:	f000 8085 	beq.w	80034cc <HAL_TIM_ConfigClockSource+0x16c>
 80033c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033c6:	d87f      	bhi.n	80034c8 <HAL_TIM_ConfigClockSource+0x168>
 80033c8:	2b70      	cmp	r3, #112	; 0x70
 80033ca:	d01a      	beq.n	8003402 <HAL_TIM_ConfigClockSource+0xa2>
 80033cc:	2b70      	cmp	r3, #112	; 0x70
 80033ce:	d87b      	bhi.n	80034c8 <HAL_TIM_ConfigClockSource+0x168>
 80033d0:	2b60      	cmp	r3, #96	; 0x60
 80033d2:	d050      	beq.n	8003476 <HAL_TIM_ConfigClockSource+0x116>
 80033d4:	2b60      	cmp	r3, #96	; 0x60
 80033d6:	d877      	bhi.n	80034c8 <HAL_TIM_ConfigClockSource+0x168>
 80033d8:	2b50      	cmp	r3, #80	; 0x50
 80033da:	d03c      	beq.n	8003456 <HAL_TIM_ConfigClockSource+0xf6>
 80033dc:	2b50      	cmp	r3, #80	; 0x50
 80033de:	d873      	bhi.n	80034c8 <HAL_TIM_ConfigClockSource+0x168>
 80033e0:	2b40      	cmp	r3, #64	; 0x40
 80033e2:	d058      	beq.n	8003496 <HAL_TIM_ConfigClockSource+0x136>
 80033e4:	2b40      	cmp	r3, #64	; 0x40
 80033e6:	d86f      	bhi.n	80034c8 <HAL_TIM_ConfigClockSource+0x168>
 80033e8:	2b30      	cmp	r3, #48	; 0x30
 80033ea:	d064      	beq.n	80034b6 <HAL_TIM_ConfigClockSource+0x156>
 80033ec:	2b30      	cmp	r3, #48	; 0x30
 80033ee:	d86b      	bhi.n	80034c8 <HAL_TIM_ConfigClockSource+0x168>
 80033f0:	2b20      	cmp	r3, #32
 80033f2:	d060      	beq.n	80034b6 <HAL_TIM_ConfigClockSource+0x156>
 80033f4:	2b20      	cmp	r3, #32
 80033f6:	d867      	bhi.n	80034c8 <HAL_TIM_ConfigClockSource+0x168>
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d05c      	beq.n	80034b6 <HAL_TIM_ConfigClockSource+0x156>
 80033fc:	2b10      	cmp	r3, #16
 80033fe:	d05a      	beq.n	80034b6 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003400:	e062      	b.n	80034c8 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6818      	ldr	r0, [r3, #0]
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	6899      	ldr	r1, [r3, #8]
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	685a      	ldr	r2, [r3, #4]
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	68db      	ldr	r3, [r3, #12]
 8003412:	f000 faca 	bl	80039aa <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	689b      	ldr	r3, [r3, #8]
 800341c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003424:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	68fa      	ldr	r2, [r7, #12]
 800342c:	609a      	str	r2, [r3, #8]
      break;
 800342e:	e04e      	b.n	80034ce <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6818      	ldr	r0, [r3, #0]
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	6899      	ldr	r1, [r3, #8]
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	685a      	ldr	r2, [r3, #4]
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	68db      	ldr	r3, [r3, #12]
 8003440:	f000 fab3 	bl	80039aa <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	689a      	ldr	r2, [r3, #8]
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003452:	609a      	str	r2, [r3, #8]
      break;
 8003454:	e03b      	b.n	80034ce <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6818      	ldr	r0, [r3, #0]
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	6859      	ldr	r1, [r3, #4]
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	68db      	ldr	r3, [r3, #12]
 8003462:	461a      	mov	r2, r3
 8003464:	f000 fa2a 	bl	80038bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	2150      	movs	r1, #80	; 0x50
 800346e:	4618      	mov	r0, r3
 8003470:	f000 fa81 	bl	8003976 <TIM_ITRx_SetConfig>
      break;
 8003474:	e02b      	b.n	80034ce <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6818      	ldr	r0, [r3, #0]
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	6859      	ldr	r1, [r3, #4]
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	68db      	ldr	r3, [r3, #12]
 8003482:	461a      	mov	r2, r3
 8003484:	f000 fa48 	bl	8003918 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	2160      	movs	r1, #96	; 0x60
 800348e:	4618      	mov	r0, r3
 8003490:	f000 fa71 	bl	8003976 <TIM_ITRx_SetConfig>
      break;
 8003494:	e01b      	b.n	80034ce <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6818      	ldr	r0, [r3, #0]
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	6859      	ldr	r1, [r3, #4]
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	68db      	ldr	r3, [r3, #12]
 80034a2:	461a      	mov	r2, r3
 80034a4:	f000 fa0a 	bl	80038bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	2140      	movs	r1, #64	; 0x40
 80034ae:	4618      	mov	r0, r3
 80034b0:	f000 fa61 	bl	8003976 <TIM_ITRx_SetConfig>
      break;
 80034b4:	e00b      	b.n	80034ce <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681a      	ldr	r2, [r3, #0]
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4619      	mov	r1, r3
 80034c0:	4610      	mov	r0, r2
 80034c2:	f000 fa58 	bl	8003976 <TIM_ITRx_SetConfig>
        break;
 80034c6:	e002      	b.n	80034ce <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80034c8:	bf00      	nop
 80034ca:	e000      	b.n	80034ce <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80034cc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2201      	movs	r2, #1
 80034d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2200      	movs	r2, #0
 80034da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80034de:	2300      	movs	r3, #0
}
 80034e0:	4618      	mov	r0, r3
 80034e2:	3710      	adds	r7, #16
 80034e4:	46bd      	mov	sp, r7
 80034e6:	bd80      	pop	{r7, pc}

080034e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80034e8:	b480      	push	{r7}
 80034ea:	b085      	sub	sp, #20
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
 80034f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	4a29      	ldr	r2, [pc, #164]	; (80035a0 <TIM_Base_SetConfig+0xb8>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d00b      	beq.n	8003518 <TIM_Base_SetConfig+0x30>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003506:	d007      	beq.n	8003518 <TIM_Base_SetConfig+0x30>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	4a26      	ldr	r2, [pc, #152]	; (80035a4 <TIM_Base_SetConfig+0xbc>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d003      	beq.n	8003518 <TIM_Base_SetConfig+0x30>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	4a25      	ldr	r2, [pc, #148]	; (80035a8 <TIM_Base_SetConfig+0xc0>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d108      	bne.n	800352a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800351e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	68fa      	ldr	r2, [r7, #12]
 8003526:	4313      	orrs	r3, r2
 8003528:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	4a1c      	ldr	r2, [pc, #112]	; (80035a0 <TIM_Base_SetConfig+0xb8>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d00b      	beq.n	800354a <TIM_Base_SetConfig+0x62>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003538:	d007      	beq.n	800354a <TIM_Base_SetConfig+0x62>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	4a19      	ldr	r2, [pc, #100]	; (80035a4 <TIM_Base_SetConfig+0xbc>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d003      	beq.n	800354a <TIM_Base_SetConfig+0x62>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	4a18      	ldr	r2, [pc, #96]	; (80035a8 <TIM_Base_SetConfig+0xc0>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d108      	bne.n	800355c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003550:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	68db      	ldr	r3, [r3, #12]
 8003556:	68fa      	ldr	r2, [r7, #12]
 8003558:	4313      	orrs	r3, r2
 800355a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	695b      	ldr	r3, [r3, #20]
 8003566:	4313      	orrs	r3, r2
 8003568:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	68fa      	ldr	r2, [r7, #12]
 800356e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	689a      	ldr	r2, [r3, #8]
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	681a      	ldr	r2, [r3, #0]
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	4a07      	ldr	r2, [pc, #28]	; (80035a0 <TIM_Base_SetConfig+0xb8>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d103      	bne.n	8003590 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	691a      	ldr	r2, [r3, #16]
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2201      	movs	r2, #1
 8003594:	615a      	str	r2, [r3, #20]
}
 8003596:	bf00      	nop
 8003598:	3714      	adds	r7, #20
 800359a:	46bd      	mov	sp, r7
 800359c:	bc80      	pop	{r7}
 800359e:	4770      	bx	lr
 80035a0:	40012c00 	.word	0x40012c00
 80035a4:	40000400 	.word	0x40000400
 80035a8:	40000800 	.word	0x40000800

080035ac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80035ac:	b480      	push	{r7}
 80035ae:	b087      	sub	sp, #28
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
 80035b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6a1b      	ldr	r3, [r3, #32]
 80035ba:	f023 0201 	bic.w	r2, r3, #1
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6a1b      	ldr	r3, [r3, #32]
 80035c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	699b      	ldr	r3, [r3, #24]
 80035d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	f023 0303 	bic.w	r3, r3, #3
 80035e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	68fa      	ldr	r2, [r7, #12]
 80035ea:	4313      	orrs	r3, r2
 80035ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80035ee:	697b      	ldr	r3, [r7, #20]
 80035f0:	f023 0302 	bic.w	r3, r3, #2
 80035f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	689b      	ldr	r3, [r3, #8]
 80035fa:	697a      	ldr	r2, [r7, #20]
 80035fc:	4313      	orrs	r3, r2
 80035fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	4a1c      	ldr	r2, [pc, #112]	; (8003674 <TIM_OC1_SetConfig+0xc8>)
 8003604:	4293      	cmp	r3, r2
 8003606:	d10c      	bne.n	8003622 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003608:	697b      	ldr	r3, [r7, #20]
 800360a:	f023 0308 	bic.w	r3, r3, #8
 800360e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	68db      	ldr	r3, [r3, #12]
 8003614:	697a      	ldr	r2, [r7, #20]
 8003616:	4313      	orrs	r3, r2
 8003618:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800361a:	697b      	ldr	r3, [r7, #20]
 800361c:	f023 0304 	bic.w	r3, r3, #4
 8003620:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	4a13      	ldr	r2, [pc, #76]	; (8003674 <TIM_OC1_SetConfig+0xc8>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d111      	bne.n	800364e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800362a:	693b      	ldr	r3, [r7, #16]
 800362c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003630:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003632:	693b      	ldr	r3, [r7, #16]
 8003634:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003638:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	695b      	ldr	r3, [r3, #20]
 800363e:	693a      	ldr	r2, [r7, #16]
 8003640:	4313      	orrs	r3, r2
 8003642:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	699b      	ldr	r3, [r3, #24]
 8003648:	693a      	ldr	r2, [r7, #16]
 800364a:	4313      	orrs	r3, r2
 800364c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	693a      	ldr	r2, [r7, #16]
 8003652:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	68fa      	ldr	r2, [r7, #12]
 8003658:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	685a      	ldr	r2, [r3, #4]
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	697a      	ldr	r2, [r7, #20]
 8003666:	621a      	str	r2, [r3, #32]
}
 8003668:	bf00      	nop
 800366a:	371c      	adds	r7, #28
 800366c:	46bd      	mov	sp, r7
 800366e:	bc80      	pop	{r7}
 8003670:	4770      	bx	lr
 8003672:	bf00      	nop
 8003674:	40012c00 	.word	0x40012c00

08003678 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003678:	b480      	push	{r7}
 800367a:	b087      	sub	sp, #28
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
 8003680:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6a1b      	ldr	r3, [r3, #32]
 8003686:	f023 0210 	bic.w	r2, r3, #16
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6a1b      	ldr	r3, [r3, #32]
 8003692:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	699b      	ldr	r3, [r3, #24]
 800369e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80036a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	021b      	lsls	r3, r3, #8
 80036b6:	68fa      	ldr	r2, [r7, #12]
 80036b8:	4313      	orrs	r3, r2
 80036ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80036bc:	697b      	ldr	r3, [r7, #20]
 80036be:	f023 0320 	bic.w	r3, r3, #32
 80036c2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	689b      	ldr	r3, [r3, #8]
 80036c8:	011b      	lsls	r3, r3, #4
 80036ca:	697a      	ldr	r2, [r7, #20]
 80036cc:	4313      	orrs	r3, r2
 80036ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	4a1d      	ldr	r2, [pc, #116]	; (8003748 <TIM_OC2_SetConfig+0xd0>)
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d10d      	bne.n	80036f4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80036d8:	697b      	ldr	r3, [r7, #20]
 80036da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80036de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	68db      	ldr	r3, [r3, #12]
 80036e4:	011b      	lsls	r3, r3, #4
 80036e6:	697a      	ldr	r2, [r7, #20]
 80036e8:	4313      	orrs	r3, r2
 80036ea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80036ec:	697b      	ldr	r3, [r7, #20]
 80036ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80036f2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	4a14      	ldr	r2, [pc, #80]	; (8003748 <TIM_OC2_SetConfig+0xd0>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d113      	bne.n	8003724 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80036fc:	693b      	ldr	r3, [r7, #16]
 80036fe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003702:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003704:	693b      	ldr	r3, [r7, #16]
 8003706:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800370a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	695b      	ldr	r3, [r3, #20]
 8003710:	009b      	lsls	r3, r3, #2
 8003712:	693a      	ldr	r2, [r7, #16]
 8003714:	4313      	orrs	r3, r2
 8003716:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	699b      	ldr	r3, [r3, #24]
 800371c:	009b      	lsls	r3, r3, #2
 800371e:	693a      	ldr	r2, [r7, #16]
 8003720:	4313      	orrs	r3, r2
 8003722:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	693a      	ldr	r2, [r7, #16]
 8003728:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	68fa      	ldr	r2, [r7, #12]
 800372e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	685a      	ldr	r2, [r3, #4]
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	697a      	ldr	r2, [r7, #20]
 800373c:	621a      	str	r2, [r3, #32]
}
 800373e:	bf00      	nop
 8003740:	371c      	adds	r7, #28
 8003742:	46bd      	mov	sp, r7
 8003744:	bc80      	pop	{r7}
 8003746:	4770      	bx	lr
 8003748:	40012c00 	.word	0x40012c00

0800374c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800374c:	b480      	push	{r7}
 800374e:	b087      	sub	sp, #28
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
 8003754:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6a1b      	ldr	r3, [r3, #32]
 800375a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6a1b      	ldr	r3, [r3, #32]
 8003766:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	69db      	ldr	r3, [r3, #28]
 8003772:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800377a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	f023 0303 	bic.w	r3, r3, #3
 8003782:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	68fa      	ldr	r2, [r7, #12]
 800378a:	4313      	orrs	r3, r2
 800378c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800378e:	697b      	ldr	r3, [r7, #20]
 8003790:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003794:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	689b      	ldr	r3, [r3, #8]
 800379a:	021b      	lsls	r3, r3, #8
 800379c:	697a      	ldr	r2, [r7, #20]
 800379e:	4313      	orrs	r3, r2
 80037a0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	4a1d      	ldr	r2, [pc, #116]	; (800381c <TIM_OC3_SetConfig+0xd0>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d10d      	bne.n	80037c6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80037aa:	697b      	ldr	r3, [r7, #20]
 80037ac:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80037b0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	68db      	ldr	r3, [r3, #12]
 80037b6:	021b      	lsls	r3, r3, #8
 80037b8:	697a      	ldr	r2, [r7, #20]
 80037ba:	4313      	orrs	r3, r2
 80037bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80037be:	697b      	ldr	r3, [r7, #20]
 80037c0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80037c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	4a14      	ldr	r2, [pc, #80]	; (800381c <TIM_OC3_SetConfig+0xd0>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d113      	bne.n	80037f6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80037ce:	693b      	ldr	r3, [r7, #16]
 80037d0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80037d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80037d6:	693b      	ldr	r3, [r7, #16]
 80037d8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80037dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	695b      	ldr	r3, [r3, #20]
 80037e2:	011b      	lsls	r3, r3, #4
 80037e4:	693a      	ldr	r2, [r7, #16]
 80037e6:	4313      	orrs	r3, r2
 80037e8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	699b      	ldr	r3, [r3, #24]
 80037ee:	011b      	lsls	r3, r3, #4
 80037f0:	693a      	ldr	r2, [r7, #16]
 80037f2:	4313      	orrs	r3, r2
 80037f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	693a      	ldr	r2, [r7, #16]
 80037fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	68fa      	ldr	r2, [r7, #12]
 8003800:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	685a      	ldr	r2, [r3, #4]
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	697a      	ldr	r2, [r7, #20]
 800380e:	621a      	str	r2, [r3, #32]
}
 8003810:	bf00      	nop
 8003812:	371c      	adds	r7, #28
 8003814:	46bd      	mov	sp, r7
 8003816:	bc80      	pop	{r7}
 8003818:	4770      	bx	lr
 800381a:	bf00      	nop
 800381c:	40012c00 	.word	0x40012c00

08003820 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003820:	b480      	push	{r7}
 8003822:	b087      	sub	sp, #28
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
 8003828:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6a1b      	ldr	r3, [r3, #32]
 800382e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6a1b      	ldr	r3, [r3, #32]
 800383a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	685b      	ldr	r3, [r3, #4]
 8003840:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	69db      	ldr	r3, [r3, #28]
 8003846:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800384e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003856:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	021b      	lsls	r3, r3, #8
 800385e:	68fa      	ldr	r2, [r7, #12]
 8003860:	4313      	orrs	r3, r2
 8003862:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003864:	693b      	ldr	r3, [r7, #16]
 8003866:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800386a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	689b      	ldr	r3, [r3, #8]
 8003870:	031b      	lsls	r3, r3, #12
 8003872:	693a      	ldr	r2, [r7, #16]
 8003874:	4313      	orrs	r3, r2
 8003876:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	4a0f      	ldr	r2, [pc, #60]	; (80038b8 <TIM_OC4_SetConfig+0x98>)
 800387c:	4293      	cmp	r3, r2
 800387e:	d109      	bne.n	8003894 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003880:	697b      	ldr	r3, [r7, #20]
 8003882:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003886:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	695b      	ldr	r3, [r3, #20]
 800388c:	019b      	lsls	r3, r3, #6
 800388e:	697a      	ldr	r2, [r7, #20]
 8003890:	4313      	orrs	r3, r2
 8003892:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	697a      	ldr	r2, [r7, #20]
 8003898:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	68fa      	ldr	r2, [r7, #12]
 800389e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	685a      	ldr	r2, [r3, #4]
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	693a      	ldr	r2, [r7, #16]
 80038ac:	621a      	str	r2, [r3, #32]
}
 80038ae:	bf00      	nop
 80038b0:	371c      	adds	r7, #28
 80038b2:	46bd      	mov	sp, r7
 80038b4:	bc80      	pop	{r7}
 80038b6:	4770      	bx	lr
 80038b8:	40012c00 	.word	0x40012c00

080038bc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80038bc:	b480      	push	{r7}
 80038be:	b087      	sub	sp, #28
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	60f8      	str	r0, [r7, #12]
 80038c4:	60b9      	str	r1, [r7, #8]
 80038c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	6a1b      	ldr	r3, [r3, #32]
 80038cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	6a1b      	ldr	r3, [r3, #32]
 80038d2:	f023 0201 	bic.w	r2, r3, #1
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	699b      	ldr	r3, [r3, #24]
 80038de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80038e0:	693b      	ldr	r3, [r7, #16]
 80038e2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80038e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	011b      	lsls	r3, r3, #4
 80038ec:	693a      	ldr	r2, [r7, #16]
 80038ee:	4313      	orrs	r3, r2
 80038f0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80038f2:	697b      	ldr	r3, [r7, #20]
 80038f4:	f023 030a 	bic.w	r3, r3, #10
 80038f8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80038fa:	697a      	ldr	r2, [r7, #20]
 80038fc:	68bb      	ldr	r3, [r7, #8]
 80038fe:	4313      	orrs	r3, r2
 8003900:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	693a      	ldr	r2, [r7, #16]
 8003906:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	697a      	ldr	r2, [r7, #20]
 800390c:	621a      	str	r2, [r3, #32]
}
 800390e:	bf00      	nop
 8003910:	371c      	adds	r7, #28
 8003912:	46bd      	mov	sp, r7
 8003914:	bc80      	pop	{r7}
 8003916:	4770      	bx	lr

08003918 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003918:	b480      	push	{r7}
 800391a:	b087      	sub	sp, #28
 800391c:	af00      	add	r7, sp, #0
 800391e:	60f8      	str	r0, [r7, #12]
 8003920:	60b9      	str	r1, [r7, #8]
 8003922:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	6a1b      	ldr	r3, [r3, #32]
 8003928:	f023 0210 	bic.w	r2, r3, #16
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	699b      	ldr	r3, [r3, #24]
 8003934:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	6a1b      	ldr	r3, [r3, #32]
 800393a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800393c:	697b      	ldr	r3, [r7, #20]
 800393e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003942:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	031b      	lsls	r3, r3, #12
 8003948:	697a      	ldr	r2, [r7, #20]
 800394a:	4313      	orrs	r3, r2
 800394c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800394e:	693b      	ldr	r3, [r7, #16]
 8003950:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003954:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003956:	68bb      	ldr	r3, [r7, #8]
 8003958:	011b      	lsls	r3, r3, #4
 800395a:	693a      	ldr	r2, [r7, #16]
 800395c:	4313      	orrs	r3, r2
 800395e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	697a      	ldr	r2, [r7, #20]
 8003964:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	693a      	ldr	r2, [r7, #16]
 800396a:	621a      	str	r2, [r3, #32]
}
 800396c:	bf00      	nop
 800396e:	371c      	adds	r7, #28
 8003970:	46bd      	mov	sp, r7
 8003972:	bc80      	pop	{r7}
 8003974:	4770      	bx	lr

08003976 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003976:	b480      	push	{r7}
 8003978:	b085      	sub	sp, #20
 800397a:	af00      	add	r7, sp, #0
 800397c:	6078      	str	r0, [r7, #4]
 800397e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	689b      	ldr	r3, [r3, #8]
 8003984:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800398c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800398e:	683a      	ldr	r2, [r7, #0]
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	4313      	orrs	r3, r2
 8003994:	f043 0307 	orr.w	r3, r3, #7
 8003998:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	68fa      	ldr	r2, [r7, #12]
 800399e:	609a      	str	r2, [r3, #8]
}
 80039a0:	bf00      	nop
 80039a2:	3714      	adds	r7, #20
 80039a4:	46bd      	mov	sp, r7
 80039a6:	bc80      	pop	{r7}
 80039a8:	4770      	bx	lr

080039aa <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80039aa:	b480      	push	{r7}
 80039ac:	b087      	sub	sp, #28
 80039ae:	af00      	add	r7, sp, #0
 80039b0:	60f8      	str	r0, [r7, #12]
 80039b2:	60b9      	str	r1, [r7, #8]
 80039b4:	607a      	str	r2, [r7, #4]
 80039b6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	689b      	ldr	r3, [r3, #8]
 80039bc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80039be:	697b      	ldr	r3, [r7, #20]
 80039c0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80039c4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	021a      	lsls	r2, r3, #8
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	431a      	orrs	r2, r3
 80039ce:	68bb      	ldr	r3, [r7, #8]
 80039d0:	4313      	orrs	r3, r2
 80039d2:	697a      	ldr	r2, [r7, #20]
 80039d4:	4313      	orrs	r3, r2
 80039d6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	697a      	ldr	r2, [r7, #20]
 80039dc:	609a      	str	r2, [r3, #8]
}
 80039de:	bf00      	nop
 80039e0:	371c      	adds	r7, #28
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bc80      	pop	{r7}
 80039e6:	4770      	bx	lr

080039e8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80039e8:	b480      	push	{r7}
 80039ea:	b087      	sub	sp, #28
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	60f8      	str	r0, [r7, #12]
 80039f0:	60b9      	str	r1, [r7, #8]
 80039f2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80039f4:	68bb      	ldr	r3, [r7, #8]
 80039f6:	f003 031f 	and.w	r3, r3, #31
 80039fa:	2201      	movs	r2, #1
 80039fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003a00:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	6a1a      	ldr	r2, [r3, #32]
 8003a06:	697b      	ldr	r3, [r7, #20]
 8003a08:	43db      	mvns	r3, r3
 8003a0a:	401a      	ands	r2, r3
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	6a1a      	ldr	r2, [r3, #32]
 8003a14:	68bb      	ldr	r3, [r7, #8]
 8003a16:	f003 031f 	and.w	r3, r3, #31
 8003a1a:	6879      	ldr	r1, [r7, #4]
 8003a1c:	fa01 f303 	lsl.w	r3, r1, r3
 8003a20:	431a      	orrs	r2, r3
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	621a      	str	r2, [r3, #32]
}
 8003a26:	bf00      	nop
 8003a28:	371c      	adds	r7, #28
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	bc80      	pop	{r7}
 8003a2e:	4770      	bx	lr

08003a30 <HAL_TIMEx_OCN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_OCN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b084      	sub	sp, #16
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
 8003a38:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d109      	bne.n	8003a54 <HAL_TIMEx_OCN_Start+0x24>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003a46:	b2db      	uxtb	r3, r3
 8003a48:	2b01      	cmp	r3, #1
 8003a4a:	bf14      	ite	ne
 8003a4c:	2301      	movne	r3, #1
 8003a4e:	2300      	moveq	r3, #0
 8003a50:	b2db      	uxtb	r3, r3
 8003a52:	e022      	b.n	8003a9a <HAL_TIMEx_OCN_Start+0x6a>
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	2b04      	cmp	r3, #4
 8003a58:	d109      	bne.n	8003a6e <HAL_TIMEx_OCN_Start+0x3e>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003a60:	b2db      	uxtb	r3, r3
 8003a62:	2b01      	cmp	r3, #1
 8003a64:	bf14      	ite	ne
 8003a66:	2301      	movne	r3, #1
 8003a68:	2300      	moveq	r3, #0
 8003a6a:	b2db      	uxtb	r3, r3
 8003a6c:	e015      	b.n	8003a9a <HAL_TIMEx_OCN_Start+0x6a>
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	2b08      	cmp	r3, #8
 8003a72:	d109      	bne.n	8003a88 <HAL_TIMEx_OCN_Start+0x58>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003a7a:	b2db      	uxtb	r3, r3
 8003a7c:	2b01      	cmp	r3, #1
 8003a7e:	bf14      	ite	ne
 8003a80:	2301      	movne	r3, #1
 8003a82:	2300      	moveq	r3, #0
 8003a84:	b2db      	uxtb	r3, r3
 8003a86:	e008      	b.n	8003a9a <HAL_TIMEx_OCN_Start+0x6a>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003a8e:	b2db      	uxtb	r3, r3
 8003a90:	2b01      	cmp	r3, #1
 8003a92:	bf14      	ite	ne
 8003a94:	2301      	movne	r3, #1
 8003a96:	2300      	moveq	r3, #0
 8003a98:	b2db      	uxtb	r3, r3
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d001      	beq.n	8003aa2 <HAL_TIMEx_OCN_Start+0x72>
  {
    return HAL_ERROR;
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	e059      	b.n	8003b56 <HAL_TIMEx_OCN_Start+0x126>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d104      	bne.n	8003ab2 <HAL_TIMEx_OCN_Start+0x82>
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2202      	movs	r2, #2
 8003aac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003ab0:	e013      	b.n	8003ada <HAL_TIMEx_OCN_Start+0xaa>
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	2b04      	cmp	r3, #4
 8003ab6:	d104      	bne.n	8003ac2 <HAL_TIMEx_OCN_Start+0x92>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2202      	movs	r2, #2
 8003abc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003ac0:	e00b      	b.n	8003ada <HAL_TIMEx_OCN_Start+0xaa>
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	2b08      	cmp	r3, #8
 8003ac6:	d104      	bne.n	8003ad2 <HAL_TIMEx_OCN_Start+0xa2>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2202      	movs	r2, #2
 8003acc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ad0:	e003      	b.n	8003ada <HAL_TIMEx_OCN_Start+0xaa>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2202      	movs	r2, #2
 8003ad6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Enable the Capture compare channel N */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	2204      	movs	r2, #4
 8003ae0:	6839      	ldr	r1, [r7, #0]
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	f000 f8f1 	bl	8003cca <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003af6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4a18      	ldr	r2, [pc, #96]	; (8003b60 <HAL_TIMEx_OCN_Start+0x130>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d00e      	beq.n	8003b20 <HAL_TIMEx_OCN_Start+0xf0>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b0a:	d009      	beq.n	8003b20 <HAL_TIMEx_OCN_Start+0xf0>
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4a14      	ldr	r2, [pc, #80]	; (8003b64 <HAL_TIMEx_OCN_Start+0x134>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d004      	beq.n	8003b20 <HAL_TIMEx_OCN_Start+0xf0>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4a13      	ldr	r2, [pc, #76]	; (8003b68 <HAL_TIMEx_OCN_Start+0x138>)
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d111      	bne.n	8003b44 <HAL_TIMEx_OCN_Start+0x114>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	689b      	ldr	r3, [r3, #8]
 8003b26:	f003 0307 	and.w	r3, r3, #7
 8003b2a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	2b06      	cmp	r3, #6
 8003b30:	d010      	beq.n	8003b54 <HAL_TIMEx_OCN_Start+0x124>
    {
      __HAL_TIM_ENABLE(htim);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	681a      	ldr	r2, [r3, #0]
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f042 0201 	orr.w	r2, r2, #1
 8003b40:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b42:	e007      	b.n	8003b54 <HAL_TIMEx_OCN_Start+0x124>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	681a      	ldr	r2, [r3, #0]
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f042 0201 	orr.w	r2, r2, #1
 8003b52:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003b54:	2300      	movs	r3, #0
}
 8003b56:	4618      	mov	r0, r3
 8003b58:	3710      	adds	r7, #16
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bd80      	pop	{r7, pc}
 8003b5e:	bf00      	nop
 8003b60:	40012c00 	.word	0x40012c00
 8003b64:	40000400 	.word	0x40000400
 8003b68:	40000800 	.word	0x40000800

08003b6c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	b085      	sub	sp, #20
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
 8003b74:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b7c:	2b01      	cmp	r3, #1
 8003b7e:	d101      	bne.n	8003b84 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003b80:	2302      	movs	r3, #2
 8003b82:	e046      	b.n	8003c12 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2201      	movs	r2, #1
 8003b88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2202      	movs	r2, #2
 8003b90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	685b      	ldr	r3, [r3, #4]
 8003b9a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	689b      	ldr	r3, [r3, #8]
 8003ba2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003baa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	68fa      	ldr	r2, [r7, #12]
 8003bb2:	4313      	orrs	r3, r2
 8003bb4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	68fa      	ldr	r2, [r7, #12]
 8003bbc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4a16      	ldr	r2, [pc, #88]	; (8003c1c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d00e      	beq.n	8003be6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bd0:	d009      	beq.n	8003be6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4a12      	ldr	r2, [pc, #72]	; (8003c20 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d004      	beq.n	8003be6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4a10      	ldr	r2, [pc, #64]	; (8003c24 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d10c      	bne.n	8003c00 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003be6:	68bb      	ldr	r3, [r7, #8]
 8003be8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003bec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	68ba      	ldr	r2, [r7, #8]
 8003bf4:	4313      	orrs	r3, r2
 8003bf6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	68ba      	ldr	r2, [r7, #8]
 8003bfe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2201      	movs	r2, #1
 8003c04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003c10:	2300      	movs	r3, #0
}
 8003c12:	4618      	mov	r0, r3
 8003c14:	3714      	adds	r7, #20
 8003c16:	46bd      	mov	sp, r7
 8003c18:	bc80      	pop	{r7}
 8003c1a:	4770      	bx	lr
 8003c1c:	40012c00 	.word	0x40012c00
 8003c20:	40000400 	.word	0x40000400
 8003c24:	40000800 	.word	0x40000800

08003c28 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003c28:	b480      	push	{r7}
 8003c2a:	b085      	sub	sp, #20
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
 8003c30:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003c32:	2300      	movs	r3, #0
 8003c34:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c3c:	2b01      	cmp	r3, #1
 8003c3e:	d101      	bne.n	8003c44 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003c40:	2302      	movs	r3, #2
 8003c42:	e03d      	b.n	8003cc0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2201      	movs	r2, #1
 8003c48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	68db      	ldr	r3, [r3, #12]
 8003c56:	4313      	orrs	r3, r2
 8003c58:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	689b      	ldr	r3, [r3, #8]
 8003c64:	4313      	orrs	r3, r2
 8003c66:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	4313      	orrs	r3, r2
 8003c74:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4313      	orrs	r3, r2
 8003c82:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	691b      	ldr	r3, [r3, #16]
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	695b      	ldr	r3, [r3, #20]
 8003c9c:	4313      	orrs	r3, r2
 8003c9e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	69db      	ldr	r3, [r3, #28]
 8003caa:	4313      	orrs	r3, r2
 8003cac:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	68fa      	ldr	r2, [r7, #12]
 8003cb4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2200      	movs	r2, #0
 8003cba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003cbe:	2300      	movs	r3, #0
}
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	3714      	adds	r7, #20
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	bc80      	pop	{r7}
 8003cc8:	4770      	bx	lr

08003cca <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8003cca:	b480      	push	{r7}
 8003ccc:	b087      	sub	sp, #28
 8003cce:	af00      	add	r7, sp, #0
 8003cd0:	60f8      	str	r0, [r7, #12]
 8003cd2:	60b9      	str	r1, [r7, #8]
 8003cd4:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003cd6:	68bb      	ldr	r3, [r7, #8]
 8003cd8:	f003 031f 	and.w	r3, r3, #31
 8003cdc:	2204      	movs	r2, #4
 8003cde:	fa02 f303 	lsl.w	r3, r2, r3
 8003ce2:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	6a1a      	ldr	r2, [r3, #32]
 8003ce8:	697b      	ldr	r3, [r7, #20]
 8003cea:	43db      	mvns	r3, r3
 8003cec:	401a      	ands	r2, r3
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	6a1a      	ldr	r2, [r3, #32]
 8003cf6:	68bb      	ldr	r3, [r7, #8]
 8003cf8:	f003 031f 	and.w	r3, r3, #31
 8003cfc:	6879      	ldr	r1, [r7, #4]
 8003cfe:	fa01 f303 	lsl.w	r3, r1, r3
 8003d02:	431a      	orrs	r2, r3
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	621a      	str	r2, [r3, #32]
}
 8003d08:	bf00      	nop
 8003d0a:	371c      	adds	r7, #28
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	bc80      	pop	{r7}
 8003d10:	4770      	bx	lr

08003d12 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003d12:	b084      	sub	sp, #16
 8003d14:	b480      	push	{r7}
 8003d16:	b083      	sub	sp, #12
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
 8003d1c:	f107 0014 	add.w	r0, r7, #20
 8003d20:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8003d24:	2300      	movs	r3, #0
}
 8003d26:	4618      	mov	r0, r3
 8003d28:	370c      	adds	r7, #12
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	bc80      	pop	{r7}
 8003d2e:	b004      	add	sp, #16
 8003d30:	4770      	bx	lr

08003d32 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8003d32:	b480      	push	{r7}
 8003d34:	b085      	sub	sp, #20
 8003d36:	af00      	add	r7, sp, #0
 8003d38:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003d42:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8003d46:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	b29a      	uxth	r2, r3
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003d52:	2300      	movs	r3, #0
}
 8003d54:	4618      	mov	r0, r3
 8003d56:	3714      	adds	r7, #20
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	bc80      	pop	{r7}
 8003d5c:	4770      	bx	lr

08003d5e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8003d5e:	b480      	push	{r7}
 8003d60:	b085      	sub	sp, #20
 8003d62:	af00      	add	r7, sp, #0
 8003d64:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003d66:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8003d6a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003d72:	b29a      	uxth	r2, r3
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	b29b      	uxth	r3, r3
 8003d78:	43db      	mvns	r3, r3
 8003d7a:	b29b      	uxth	r3, r3
 8003d7c:	4013      	ands	r3, r2
 8003d7e:	b29a      	uxth	r2, r3
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003d86:	2300      	movs	r3, #0
}
 8003d88:	4618      	mov	r0, r3
 8003d8a:	3714      	adds	r7, #20
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	bc80      	pop	{r7}
 8003d90:	4770      	bx	lr

08003d92 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8003d92:	b480      	push	{r7}
 8003d94:	b083      	sub	sp, #12
 8003d96:	af00      	add	r7, sp, #0
 8003d98:	6078      	str	r0, [r7, #4]
 8003d9a:	460b      	mov	r3, r1
 8003d9c:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8003d9e:	2300      	movs	r3, #0
}
 8003da0:	4618      	mov	r0, r3
 8003da2:	370c      	adds	r7, #12
 8003da4:	46bd      	mov	sp, r7
 8003da6:	bc80      	pop	{r7}
 8003da8:	4770      	bx	lr

08003daa <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003daa:	b084      	sub	sp, #16
 8003dac:	b480      	push	{r7}
 8003dae:	b083      	sub	sp, #12
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
 8003db4:	f107 0014 	add.w	r0, r7, #20
 8003db8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2201      	movs	r2, #1
 8003dc0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2200      	movs	r2, #0
 8003dd0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8003ddc:	2300      	movs	r3, #0
}
 8003dde:	4618      	mov	r0, r3
 8003de0:	370c      	adds	r7, #12
 8003de2:	46bd      	mov	sp, r7
 8003de4:	bc80      	pop	{r7}
 8003de6:	b004      	add	sp, #16
 8003de8:	4770      	bx	lr
	...

08003dec <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003dec:	b480      	push	{r7}
 8003dee:	b09b      	sub	sp, #108	; 0x6c
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
 8003df4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8003df6:	2300      	movs	r3, #0
 8003df8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8003dfc:	687a      	ldr	r2, [r7, #4]
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	781b      	ldrb	r3, [r3, #0]
 8003e02:	009b      	lsls	r3, r3, #2
 8003e04:	4413      	add	r3, r2
 8003e06:	881b      	ldrh	r3, [r3, #0]
 8003e08:	b29b      	uxth	r3, r3
 8003e0a:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8003e0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e12:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	78db      	ldrb	r3, [r3, #3]
 8003e1a:	2b03      	cmp	r3, #3
 8003e1c:	d81f      	bhi.n	8003e5e <USB_ActivateEndpoint+0x72>
 8003e1e:	a201      	add	r2, pc, #4	; (adr r2, 8003e24 <USB_ActivateEndpoint+0x38>)
 8003e20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e24:	08003e35 	.word	0x08003e35
 8003e28:	08003e51 	.word	0x08003e51
 8003e2c:	08003e67 	.word	0x08003e67
 8003e30:	08003e43 	.word	0x08003e43
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8003e34:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003e38:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003e3c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8003e40:	e012      	b.n	8003e68 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8003e42:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003e46:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8003e4a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8003e4e:	e00b      	b.n	8003e68 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8003e50:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003e54:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003e58:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8003e5c:	e004      	b.n	8003e68 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8003e5e:	2301      	movs	r3, #1
 8003e60:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8003e64:	e000      	b.n	8003e68 <USB_ActivateEndpoint+0x7c>
      break;
 8003e66:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8003e68:	687a      	ldr	r2, [r7, #4]
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	781b      	ldrb	r3, [r3, #0]
 8003e6e:	009b      	lsls	r3, r3, #2
 8003e70:	441a      	add	r2, r3
 8003e72:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003e76:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003e7a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003e7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e86:	b29b      	uxth	r3, r3
 8003e88:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8003e8a:	687a      	ldr	r2, [r7, #4]
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	781b      	ldrb	r3, [r3, #0]
 8003e90:	009b      	lsls	r3, r3, #2
 8003e92:	4413      	add	r3, r2
 8003e94:	881b      	ldrh	r3, [r3, #0]
 8003e96:	b29b      	uxth	r3, r3
 8003e98:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ea0:	b29a      	uxth	r2, r3
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	781b      	ldrb	r3, [r3, #0]
 8003ea6:	b29b      	uxth	r3, r3
 8003ea8:	4313      	orrs	r3, r2
 8003eaa:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8003eae:	687a      	ldr	r2, [r7, #4]
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	781b      	ldrb	r3, [r3, #0]
 8003eb4:	009b      	lsls	r3, r3, #2
 8003eb6:	441a      	add	r2, r3
 8003eb8:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8003ebc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003ec0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003ec4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ec8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ecc:	b29b      	uxth	r3, r3
 8003ece:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	7b1b      	ldrb	r3, [r3, #12]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	f040 8149 	bne.w	800416c <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	785b      	ldrb	r3, [r3, #1]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	f000 8084 	beq.w	8003fec <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	617b      	str	r3, [r7, #20]
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003eee:	b29b      	uxth	r3, r3
 8003ef0:	461a      	mov	r2, r3
 8003ef2:	697b      	ldr	r3, [r7, #20]
 8003ef4:	4413      	add	r3, r2
 8003ef6:	617b      	str	r3, [r7, #20]
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	781b      	ldrb	r3, [r3, #0]
 8003efc:	011a      	lsls	r2, r3, #4
 8003efe:	697b      	ldr	r3, [r7, #20]
 8003f00:	4413      	add	r3, r2
 8003f02:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003f06:	613b      	str	r3, [r7, #16]
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	88db      	ldrh	r3, [r3, #6]
 8003f0c:	085b      	lsrs	r3, r3, #1
 8003f0e:	b29b      	uxth	r3, r3
 8003f10:	005b      	lsls	r3, r3, #1
 8003f12:	b29a      	uxth	r2, r3
 8003f14:	693b      	ldr	r3, [r7, #16]
 8003f16:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003f18:	687a      	ldr	r2, [r7, #4]
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	781b      	ldrb	r3, [r3, #0]
 8003f1e:	009b      	lsls	r3, r3, #2
 8003f20:	4413      	add	r3, r2
 8003f22:	881b      	ldrh	r3, [r3, #0]
 8003f24:	81fb      	strh	r3, [r7, #14]
 8003f26:	89fb      	ldrh	r3, [r7, #14]
 8003f28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d01b      	beq.n	8003f68 <USB_ActivateEndpoint+0x17c>
 8003f30:	687a      	ldr	r2, [r7, #4]
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	781b      	ldrb	r3, [r3, #0]
 8003f36:	009b      	lsls	r3, r3, #2
 8003f38:	4413      	add	r3, r2
 8003f3a:	881b      	ldrh	r3, [r3, #0]
 8003f3c:	b29b      	uxth	r3, r3
 8003f3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f46:	81bb      	strh	r3, [r7, #12]
 8003f48:	687a      	ldr	r2, [r7, #4]
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	781b      	ldrb	r3, [r3, #0]
 8003f4e:	009b      	lsls	r3, r3, #2
 8003f50:	441a      	add	r2, r3
 8003f52:	89bb      	ldrh	r3, [r7, #12]
 8003f54:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f58:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003f5c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f60:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003f64:	b29b      	uxth	r3, r3
 8003f66:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	78db      	ldrb	r3, [r3, #3]
 8003f6c:	2b01      	cmp	r3, #1
 8003f6e:	d020      	beq.n	8003fb2 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003f70:	687a      	ldr	r2, [r7, #4]
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	781b      	ldrb	r3, [r3, #0]
 8003f76:	009b      	lsls	r3, r3, #2
 8003f78:	4413      	add	r3, r2
 8003f7a:	881b      	ldrh	r3, [r3, #0]
 8003f7c:	b29b      	uxth	r3, r3
 8003f7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f82:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f86:	813b      	strh	r3, [r7, #8]
 8003f88:	893b      	ldrh	r3, [r7, #8]
 8003f8a:	f083 0320 	eor.w	r3, r3, #32
 8003f8e:	813b      	strh	r3, [r7, #8]
 8003f90:	687a      	ldr	r2, [r7, #4]
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	781b      	ldrb	r3, [r3, #0]
 8003f96:	009b      	lsls	r3, r3, #2
 8003f98:	441a      	add	r2, r3
 8003f9a:	893b      	ldrh	r3, [r7, #8]
 8003f9c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003fa0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003fa4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003fa8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003fac:	b29b      	uxth	r3, r3
 8003fae:	8013      	strh	r3, [r2, #0]
 8003fb0:	e27f      	b.n	80044b2 <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003fb2:	687a      	ldr	r2, [r7, #4]
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	781b      	ldrb	r3, [r3, #0]
 8003fb8:	009b      	lsls	r3, r3, #2
 8003fba:	4413      	add	r3, r2
 8003fbc:	881b      	ldrh	r3, [r3, #0]
 8003fbe:	b29b      	uxth	r3, r3
 8003fc0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003fc4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003fc8:	817b      	strh	r3, [r7, #10]
 8003fca:	687a      	ldr	r2, [r7, #4]
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	781b      	ldrb	r3, [r3, #0]
 8003fd0:	009b      	lsls	r3, r3, #2
 8003fd2:	441a      	add	r2, r3
 8003fd4:	897b      	ldrh	r3, [r7, #10]
 8003fd6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003fda:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003fde:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003fe2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003fe6:	b29b      	uxth	r3, r3
 8003fe8:	8013      	strh	r3, [r2, #0]
 8003fea:	e262      	b.n	80044b2 <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ff6:	b29b      	uxth	r3, r3
 8003ff8:	461a      	mov	r2, r3
 8003ffa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ffc:	4413      	add	r3, r2
 8003ffe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	781b      	ldrb	r3, [r3, #0]
 8004004:	011a      	lsls	r2, r3, #4
 8004006:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004008:	4413      	add	r3, r2
 800400a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800400e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	88db      	ldrh	r3, [r3, #6]
 8004014:	085b      	lsrs	r3, r3, #1
 8004016:	b29b      	uxth	r3, r3
 8004018:	005b      	lsls	r3, r3, #1
 800401a:	b29a      	uxth	r2, r3
 800401c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800401e:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	627b      	str	r3, [r7, #36]	; 0x24
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800402a:	b29b      	uxth	r3, r3
 800402c:	461a      	mov	r2, r3
 800402e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004030:	4413      	add	r3, r2
 8004032:	627b      	str	r3, [r7, #36]	; 0x24
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	781b      	ldrb	r3, [r3, #0]
 8004038:	011a      	lsls	r2, r3, #4
 800403a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800403c:	4413      	add	r3, r2
 800403e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004042:	623b      	str	r3, [r7, #32]
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	691b      	ldr	r3, [r3, #16]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d112      	bne.n	8004072 <USB_ActivateEndpoint+0x286>
 800404c:	6a3b      	ldr	r3, [r7, #32]
 800404e:	881b      	ldrh	r3, [r3, #0]
 8004050:	b29b      	uxth	r3, r3
 8004052:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004056:	b29a      	uxth	r2, r3
 8004058:	6a3b      	ldr	r3, [r7, #32]
 800405a:	801a      	strh	r2, [r3, #0]
 800405c:	6a3b      	ldr	r3, [r7, #32]
 800405e:	881b      	ldrh	r3, [r3, #0]
 8004060:	b29b      	uxth	r3, r3
 8004062:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004066:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800406a:	b29a      	uxth	r2, r3
 800406c:	6a3b      	ldr	r3, [r7, #32]
 800406e:	801a      	strh	r2, [r3, #0]
 8004070:	e02f      	b.n	80040d2 <USB_ActivateEndpoint+0x2e6>
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	691b      	ldr	r3, [r3, #16]
 8004076:	2b3e      	cmp	r3, #62	; 0x3e
 8004078:	d813      	bhi.n	80040a2 <USB_ActivateEndpoint+0x2b6>
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	691b      	ldr	r3, [r3, #16]
 800407e:	085b      	lsrs	r3, r3, #1
 8004080:	663b      	str	r3, [r7, #96]	; 0x60
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	691b      	ldr	r3, [r3, #16]
 8004086:	f003 0301 	and.w	r3, r3, #1
 800408a:	2b00      	cmp	r3, #0
 800408c:	d002      	beq.n	8004094 <USB_ActivateEndpoint+0x2a8>
 800408e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004090:	3301      	adds	r3, #1
 8004092:	663b      	str	r3, [r7, #96]	; 0x60
 8004094:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004096:	b29b      	uxth	r3, r3
 8004098:	029b      	lsls	r3, r3, #10
 800409a:	b29a      	uxth	r2, r3
 800409c:	6a3b      	ldr	r3, [r7, #32]
 800409e:	801a      	strh	r2, [r3, #0]
 80040a0:	e017      	b.n	80040d2 <USB_ActivateEndpoint+0x2e6>
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	691b      	ldr	r3, [r3, #16]
 80040a6:	095b      	lsrs	r3, r3, #5
 80040a8:	663b      	str	r3, [r7, #96]	; 0x60
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	691b      	ldr	r3, [r3, #16]
 80040ae:	f003 031f 	and.w	r3, r3, #31
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d102      	bne.n	80040bc <USB_ActivateEndpoint+0x2d0>
 80040b6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80040b8:	3b01      	subs	r3, #1
 80040ba:	663b      	str	r3, [r7, #96]	; 0x60
 80040bc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80040be:	b29b      	uxth	r3, r3
 80040c0:	029b      	lsls	r3, r3, #10
 80040c2:	b29b      	uxth	r3, r3
 80040c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80040c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80040cc:	b29a      	uxth	r2, r3
 80040ce:	6a3b      	ldr	r3, [r7, #32]
 80040d0:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80040d2:	687a      	ldr	r2, [r7, #4]
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	781b      	ldrb	r3, [r3, #0]
 80040d8:	009b      	lsls	r3, r3, #2
 80040da:	4413      	add	r3, r2
 80040dc:	881b      	ldrh	r3, [r3, #0]
 80040de:	83fb      	strh	r3, [r7, #30]
 80040e0:	8bfb      	ldrh	r3, [r7, #30]
 80040e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d01b      	beq.n	8004122 <USB_ActivateEndpoint+0x336>
 80040ea:	687a      	ldr	r2, [r7, #4]
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	781b      	ldrb	r3, [r3, #0]
 80040f0:	009b      	lsls	r3, r3, #2
 80040f2:	4413      	add	r3, r2
 80040f4:	881b      	ldrh	r3, [r3, #0]
 80040f6:	b29b      	uxth	r3, r3
 80040f8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004100:	83bb      	strh	r3, [r7, #28]
 8004102:	687a      	ldr	r2, [r7, #4]
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	781b      	ldrb	r3, [r3, #0]
 8004108:	009b      	lsls	r3, r3, #2
 800410a:	441a      	add	r2, r3
 800410c:	8bbb      	ldrh	r3, [r7, #28]
 800410e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004112:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004116:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800411a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800411e:	b29b      	uxth	r3, r3
 8004120:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004122:	687a      	ldr	r2, [r7, #4]
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	781b      	ldrb	r3, [r3, #0]
 8004128:	009b      	lsls	r3, r3, #2
 800412a:	4413      	add	r3, r2
 800412c:	881b      	ldrh	r3, [r3, #0]
 800412e:	b29b      	uxth	r3, r3
 8004130:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004134:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004138:	837b      	strh	r3, [r7, #26]
 800413a:	8b7b      	ldrh	r3, [r7, #26]
 800413c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004140:	837b      	strh	r3, [r7, #26]
 8004142:	8b7b      	ldrh	r3, [r7, #26]
 8004144:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004148:	837b      	strh	r3, [r7, #26]
 800414a:	687a      	ldr	r2, [r7, #4]
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	781b      	ldrb	r3, [r3, #0]
 8004150:	009b      	lsls	r3, r3, #2
 8004152:	441a      	add	r2, r3
 8004154:	8b7b      	ldrh	r3, [r7, #26]
 8004156:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800415a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800415e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004162:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004166:	b29b      	uxth	r3, r3
 8004168:	8013      	strh	r3, [r2, #0]
 800416a:	e1a2      	b.n	80044b2 <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 800416c:	687a      	ldr	r2, [r7, #4]
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	781b      	ldrb	r3, [r3, #0]
 8004172:	009b      	lsls	r3, r3, #2
 8004174:	4413      	add	r3, r2
 8004176:	881b      	ldrh	r3, [r3, #0]
 8004178:	b29b      	uxth	r3, r3
 800417a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800417e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004182:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8004186:	687a      	ldr	r2, [r7, #4]
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	781b      	ldrb	r3, [r3, #0]
 800418c:	009b      	lsls	r3, r3, #2
 800418e:	441a      	add	r2, r3
 8004190:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8004194:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004198:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800419c:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80041a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041a4:	b29b      	uxth	r3, r3
 80041a6:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	65bb      	str	r3, [r7, #88]	; 0x58
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80041b2:	b29b      	uxth	r3, r3
 80041b4:	461a      	mov	r2, r3
 80041b6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80041b8:	4413      	add	r3, r2
 80041ba:	65bb      	str	r3, [r7, #88]	; 0x58
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	781b      	ldrb	r3, [r3, #0]
 80041c0:	011a      	lsls	r2, r3, #4
 80041c2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80041c4:	4413      	add	r3, r2
 80041c6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80041ca:	657b      	str	r3, [r7, #84]	; 0x54
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	891b      	ldrh	r3, [r3, #8]
 80041d0:	085b      	lsrs	r3, r3, #1
 80041d2:	b29b      	uxth	r3, r3
 80041d4:	005b      	lsls	r3, r3, #1
 80041d6:	b29a      	uxth	r2, r3
 80041d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041da:	801a      	strh	r2, [r3, #0]
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	653b      	str	r3, [r7, #80]	; 0x50
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80041e6:	b29b      	uxth	r3, r3
 80041e8:	461a      	mov	r2, r3
 80041ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80041ec:	4413      	add	r3, r2
 80041ee:	653b      	str	r3, [r7, #80]	; 0x50
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	781b      	ldrb	r3, [r3, #0]
 80041f4:	011a      	lsls	r2, r3, #4
 80041f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80041f8:	4413      	add	r3, r2
 80041fa:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80041fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	895b      	ldrh	r3, [r3, #10]
 8004204:	085b      	lsrs	r3, r3, #1
 8004206:	b29b      	uxth	r3, r3
 8004208:	005b      	lsls	r3, r3, #1
 800420a:	b29a      	uxth	r2, r3
 800420c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800420e:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	785b      	ldrb	r3, [r3, #1]
 8004214:	2b00      	cmp	r3, #0
 8004216:	f040 8091 	bne.w	800433c <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800421a:	687a      	ldr	r2, [r7, #4]
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	781b      	ldrb	r3, [r3, #0]
 8004220:	009b      	lsls	r3, r3, #2
 8004222:	4413      	add	r3, r2
 8004224:	881b      	ldrh	r3, [r3, #0]
 8004226:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8004228:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800422a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800422e:	2b00      	cmp	r3, #0
 8004230:	d01b      	beq.n	800426a <USB_ActivateEndpoint+0x47e>
 8004232:	687a      	ldr	r2, [r7, #4]
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	781b      	ldrb	r3, [r3, #0]
 8004238:	009b      	lsls	r3, r3, #2
 800423a:	4413      	add	r3, r2
 800423c:	881b      	ldrh	r3, [r3, #0]
 800423e:	b29b      	uxth	r3, r3
 8004240:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004244:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004248:	877b      	strh	r3, [r7, #58]	; 0x3a
 800424a:	687a      	ldr	r2, [r7, #4]
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	781b      	ldrb	r3, [r3, #0]
 8004250:	009b      	lsls	r3, r3, #2
 8004252:	441a      	add	r2, r3
 8004254:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8004256:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800425a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800425e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004262:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004266:	b29b      	uxth	r3, r3
 8004268:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800426a:	687a      	ldr	r2, [r7, #4]
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	781b      	ldrb	r3, [r3, #0]
 8004270:	009b      	lsls	r3, r3, #2
 8004272:	4413      	add	r3, r2
 8004274:	881b      	ldrh	r3, [r3, #0]
 8004276:	873b      	strh	r3, [r7, #56]	; 0x38
 8004278:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800427a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800427e:	2b00      	cmp	r3, #0
 8004280:	d01b      	beq.n	80042ba <USB_ActivateEndpoint+0x4ce>
 8004282:	687a      	ldr	r2, [r7, #4]
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	781b      	ldrb	r3, [r3, #0]
 8004288:	009b      	lsls	r3, r3, #2
 800428a:	4413      	add	r3, r2
 800428c:	881b      	ldrh	r3, [r3, #0]
 800428e:	b29b      	uxth	r3, r3
 8004290:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004294:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004298:	86fb      	strh	r3, [r7, #54]	; 0x36
 800429a:	687a      	ldr	r2, [r7, #4]
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	781b      	ldrb	r3, [r3, #0]
 80042a0:	009b      	lsls	r3, r3, #2
 80042a2:	441a      	add	r2, r3
 80042a4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80042a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80042aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80042ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80042b2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80042b6:	b29b      	uxth	r3, r3
 80042b8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80042ba:	687a      	ldr	r2, [r7, #4]
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	781b      	ldrb	r3, [r3, #0]
 80042c0:	009b      	lsls	r3, r3, #2
 80042c2:	4413      	add	r3, r2
 80042c4:	881b      	ldrh	r3, [r3, #0]
 80042c6:	b29b      	uxth	r3, r3
 80042c8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80042cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042d0:	86bb      	strh	r3, [r7, #52]	; 0x34
 80042d2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80042d4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80042d8:	86bb      	strh	r3, [r7, #52]	; 0x34
 80042da:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80042dc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80042e0:	86bb      	strh	r3, [r7, #52]	; 0x34
 80042e2:	687a      	ldr	r2, [r7, #4]
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	781b      	ldrb	r3, [r3, #0]
 80042e8:	009b      	lsls	r3, r3, #2
 80042ea:	441a      	add	r2, r3
 80042ec:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80042ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80042f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80042f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80042fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042fe:	b29b      	uxth	r3, r3
 8004300:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004302:	687a      	ldr	r2, [r7, #4]
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	781b      	ldrb	r3, [r3, #0]
 8004308:	009b      	lsls	r3, r3, #2
 800430a:	4413      	add	r3, r2
 800430c:	881b      	ldrh	r3, [r3, #0]
 800430e:	b29b      	uxth	r3, r3
 8004310:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004314:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004318:	867b      	strh	r3, [r7, #50]	; 0x32
 800431a:	687a      	ldr	r2, [r7, #4]
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	781b      	ldrb	r3, [r3, #0]
 8004320:	009b      	lsls	r3, r3, #2
 8004322:	441a      	add	r2, r3
 8004324:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8004326:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800432a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800432e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004332:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004336:	b29b      	uxth	r3, r3
 8004338:	8013      	strh	r3, [r2, #0]
 800433a:	e0ba      	b.n	80044b2 <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800433c:	687a      	ldr	r2, [r7, #4]
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	781b      	ldrb	r3, [r3, #0]
 8004342:	009b      	lsls	r3, r3, #2
 8004344:	4413      	add	r3, r2
 8004346:	881b      	ldrh	r3, [r3, #0]
 8004348:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800434c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004350:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004354:	2b00      	cmp	r3, #0
 8004356:	d01d      	beq.n	8004394 <USB_ActivateEndpoint+0x5a8>
 8004358:	687a      	ldr	r2, [r7, #4]
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	781b      	ldrb	r3, [r3, #0]
 800435e:	009b      	lsls	r3, r3, #2
 8004360:	4413      	add	r3, r2
 8004362:	881b      	ldrh	r3, [r3, #0]
 8004364:	b29b      	uxth	r3, r3
 8004366:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800436a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800436e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8004372:	687a      	ldr	r2, [r7, #4]
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	781b      	ldrb	r3, [r3, #0]
 8004378:	009b      	lsls	r3, r3, #2
 800437a:	441a      	add	r2, r3
 800437c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004380:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004384:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004388:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800438c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004390:	b29b      	uxth	r3, r3
 8004392:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004394:	687a      	ldr	r2, [r7, #4]
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	781b      	ldrb	r3, [r3, #0]
 800439a:	009b      	lsls	r3, r3, #2
 800439c:	4413      	add	r3, r2
 800439e:	881b      	ldrh	r3, [r3, #0]
 80043a0:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80043a4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80043a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d01d      	beq.n	80043ec <USB_ActivateEndpoint+0x600>
 80043b0:	687a      	ldr	r2, [r7, #4]
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	781b      	ldrb	r3, [r3, #0]
 80043b6:	009b      	lsls	r3, r3, #2
 80043b8:	4413      	add	r3, r2
 80043ba:	881b      	ldrh	r3, [r3, #0]
 80043bc:	b29b      	uxth	r3, r3
 80043be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80043c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043c6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80043ca:	687a      	ldr	r2, [r7, #4]
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	781b      	ldrb	r3, [r3, #0]
 80043d0:	009b      	lsls	r3, r3, #2
 80043d2:	441a      	add	r2, r3
 80043d4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80043d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80043dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80043e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80043e4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80043e8:	b29b      	uxth	r3, r3
 80043ea:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	78db      	ldrb	r3, [r3, #3]
 80043f0:	2b01      	cmp	r3, #1
 80043f2:	d024      	beq.n	800443e <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80043f4:	687a      	ldr	r2, [r7, #4]
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	781b      	ldrb	r3, [r3, #0]
 80043fa:	009b      	lsls	r3, r3, #2
 80043fc:	4413      	add	r3, r2
 80043fe:	881b      	ldrh	r3, [r3, #0]
 8004400:	b29b      	uxth	r3, r3
 8004402:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004406:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800440a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800440e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004412:	f083 0320 	eor.w	r3, r3, #32
 8004416:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800441a:	687a      	ldr	r2, [r7, #4]
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	781b      	ldrb	r3, [r3, #0]
 8004420:	009b      	lsls	r3, r3, #2
 8004422:	441a      	add	r2, r3
 8004424:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004428:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800442c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004430:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004434:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004438:	b29b      	uxth	r3, r3
 800443a:	8013      	strh	r3, [r2, #0]
 800443c:	e01d      	b.n	800447a <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800443e:	687a      	ldr	r2, [r7, #4]
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	781b      	ldrb	r3, [r3, #0]
 8004444:	009b      	lsls	r3, r3, #2
 8004446:	4413      	add	r3, r2
 8004448:	881b      	ldrh	r3, [r3, #0]
 800444a:	b29b      	uxth	r3, r3
 800444c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004450:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004454:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8004458:	687a      	ldr	r2, [r7, #4]
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	781b      	ldrb	r3, [r3, #0]
 800445e:	009b      	lsls	r3, r3, #2
 8004460:	441a      	add	r2, r3
 8004462:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8004466:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800446a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800446e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004472:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004476:	b29b      	uxth	r3, r3
 8004478:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800447a:	687a      	ldr	r2, [r7, #4]
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	781b      	ldrb	r3, [r3, #0]
 8004480:	009b      	lsls	r3, r3, #2
 8004482:	4413      	add	r3, r2
 8004484:	881b      	ldrh	r3, [r3, #0]
 8004486:	b29b      	uxth	r3, r3
 8004488:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800448c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004490:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8004492:	687a      	ldr	r2, [r7, #4]
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	781b      	ldrb	r3, [r3, #0]
 8004498:	009b      	lsls	r3, r3, #2
 800449a:	441a      	add	r2, r3
 800449c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800449e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80044a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80044a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80044aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044ae:	b29b      	uxth	r3, r3
 80044b0:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 80044b2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80044b6:	4618      	mov	r0, r3
 80044b8:	376c      	adds	r7, #108	; 0x6c
 80044ba:	46bd      	mov	sp, r7
 80044bc:	bc80      	pop	{r7}
 80044be:	4770      	bx	lr

080044c0 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80044c0:	b480      	push	{r7}
 80044c2:	b08d      	sub	sp, #52	; 0x34
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
 80044c8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	7b1b      	ldrb	r3, [r3, #12]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	f040 808e 	bne.w	80045f0 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	785b      	ldrb	r3, [r3, #1]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d044      	beq.n	8004566 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80044dc:	687a      	ldr	r2, [r7, #4]
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	781b      	ldrb	r3, [r3, #0]
 80044e2:	009b      	lsls	r3, r3, #2
 80044e4:	4413      	add	r3, r2
 80044e6:	881b      	ldrh	r3, [r3, #0]
 80044e8:	81bb      	strh	r3, [r7, #12]
 80044ea:	89bb      	ldrh	r3, [r7, #12]
 80044ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d01b      	beq.n	800452c <USB_DeactivateEndpoint+0x6c>
 80044f4:	687a      	ldr	r2, [r7, #4]
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	781b      	ldrb	r3, [r3, #0]
 80044fa:	009b      	lsls	r3, r3, #2
 80044fc:	4413      	add	r3, r2
 80044fe:	881b      	ldrh	r3, [r3, #0]
 8004500:	b29b      	uxth	r3, r3
 8004502:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004506:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800450a:	817b      	strh	r3, [r7, #10]
 800450c:	687a      	ldr	r2, [r7, #4]
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	781b      	ldrb	r3, [r3, #0]
 8004512:	009b      	lsls	r3, r3, #2
 8004514:	441a      	add	r2, r3
 8004516:	897b      	ldrh	r3, [r7, #10]
 8004518:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800451c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004520:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004524:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004528:	b29b      	uxth	r3, r3
 800452a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800452c:	687a      	ldr	r2, [r7, #4]
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	781b      	ldrb	r3, [r3, #0]
 8004532:	009b      	lsls	r3, r3, #2
 8004534:	4413      	add	r3, r2
 8004536:	881b      	ldrh	r3, [r3, #0]
 8004538:	b29b      	uxth	r3, r3
 800453a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800453e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004542:	813b      	strh	r3, [r7, #8]
 8004544:	687a      	ldr	r2, [r7, #4]
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	781b      	ldrb	r3, [r3, #0]
 800454a:	009b      	lsls	r3, r3, #2
 800454c:	441a      	add	r2, r3
 800454e:	893b      	ldrh	r3, [r7, #8]
 8004550:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004554:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004558:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800455c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004560:	b29b      	uxth	r3, r3
 8004562:	8013      	strh	r3, [r2, #0]
 8004564:	e192      	b.n	800488c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004566:	687a      	ldr	r2, [r7, #4]
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	781b      	ldrb	r3, [r3, #0]
 800456c:	009b      	lsls	r3, r3, #2
 800456e:	4413      	add	r3, r2
 8004570:	881b      	ldrh	r3, [r3, #0]
 8004572:	827b      	strh	r3, [r7, #18]
 8004574:	8a7b      	ldrh	r3, [r7, #18]
 8004576:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800457a:	2b00      	cmp	r3, #0
 800457c:	d01b      	beq.n	80045b6 <USB_DeactivateEndpoint+0xf6>
 800457e:	687a      	ldr	r2, [r7, #4]
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	781b      	ldrb	r3, [r3, #0]
 8004584:	009b      	lsls	r3, r3, #2
 8004586:	4413      	add	r3, r2
 8004588:	881b      	ldrh	r3, [r3, #0]
 800458a:	b29b      	uxth	r3, r3
 800458c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004590:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004594:	823b      	strh	r3, [r7, #16]
 8004596:	687a      	ldr	r2, [r7, #4]
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	781b      	ldrb	r3, [r3, #0]
 800459c:	009b      	lsls	r3, r3, #2
 800459e:	441a      	add	r2, r3
 80045a0:	8a3b      	ldrh	r3, [r7, #16]
 80045a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80045a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80045aa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80045ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045b2:	b29b      	uxth	r3, r3
 80045b4:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80045b6:	687a      	ldr	r2, [r7, #4]
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	781b      	ldrb	r3, [r3, #0]
 80045bc:	009b      	lsls	r3, r3, #2
 80045be:	4413      	add	r3, r2
 80045c0:	881b      	ldrh	r3, [r3, #0]
 80045c2:	b29b      	uxth	r3, r3
 80045c4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80045c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045cc:	81fb      	strh	r3, [r7, #14]
 80045ce:	687a      	ldr	r2, [r7, #4]
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	781b      	ldrb	r3, [r3, #0]
 80045d4:	009b      	lsls	r3, r3, #2
 80045d6:	441a      	add	r2, r3
 80045d8:	89fb      	ldrh	r3, [r7, #14]
 80045da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80045de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80045e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80045e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045ea:	b29b      	uxth	r3, r3
 80045ec:	8013      	strh	r3, [r2, #0]
 80045ee:	e14d      	b.n	800488c <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	785b      	ldrb	r3, [r3, #1]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	f040 80a5 	bne.w	8004744 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80045fa:	687a      	ldr	r2, [r7, #4]
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	781b      	ldrb	r3, [r3, #0]
 8004600:	009b      	lsls	r3, r3, #2
 8004602:	4413      	add	r3, r2
 8004604:	881b      	ldrh	r3, [r3, #0]
 8004606:	843b      	strh	r3, [r7, #32]
 8004608:	8c3b      	ldrh	r3, [r7, #32]
 800460a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800460e:	2b00      	cmp	r3, #0
 8004610:	d01b      	beq.n	800464a <USB_DeactivateEndpoint+0x18a>
 8004612:	687a      	ldr	r2, [r7, #4]
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	781b      	ldrb	r3, [r3, #0]
 8004618:	009b      	lsls	r3, r3, #2
 800461a:	4413      	add	r3, r2
 800461c:	881b      	ldrh	r3, [r3, #0]
 800461e:	b29b      	uxth	r3, r3
 8004620:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004624:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004628:	83fb      	strh	r3, [r7, #30]
 800462a:	687a      	ldr	r2, [r7, #4]
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	781b      	ldrb	r3, [r3, #0]
 8004630:	009b      	lsls	r3, r3, #2
 8004632:	441a      	add	r2, r3
 8004634:	8bfb      	ldrh	r3, [r7, #30]
 8004636:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800463a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800463e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004642:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004646:	b29b      	uxth	r3, r3
 8004648:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800464a:	687a      	ldr	r2, [r7, #4]
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	781b      	ldrb	r3, [r3, #0]
 8004650:	009b      	lsls	r3, r3, #2
 8004652:	4413      	add	r3, r2
 8004654:	881b      	ldrh	r3, [r3, #0]
 8004656:	83bb      	strh	r3, [r7, #28]
 8004658:	8bbb      	ldrh	r3, [r7, #28]
 800465a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800465e:	2b00      	cmp	r3, #0
 8004660:	d01b      	beq.n	800469a <USB_DeactivateEndpoint+0x1da>
 8004662:	687a      	ldr	r2, [r7, #4]
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	781b      	ldrb	r3, [r3, #0]
 8004668:	009b      	lsls	r3, r3, #2
 800466a:	4413      	add	r3, r2
 800466c:	881b      	ldrh	r3, [r3, #0]
 800466e:	b29b      	uxth	r3, r3
 8004670:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004674:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004678:	837b      	strh	r3, [r7, #26]
 800467a:	687a      	ldr	r2, [r7, #4]
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	781b      	ldrb	r3, [r3, #0]
 8004680:	009b      	lsls	r3, r3, #2
 8004682:	441a      	add	r2, r3
 8004684:	8b7b      	ldrh	r3, [r7, #26]
 8004686:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800468a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800468e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004692:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004696:	b29b      	uxth	r3, r3
 8004698:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800469a:	687a      	ldr	r2, [r7, #4]
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	781b      	ldrb	r3, [r3, #0]
 80046a0:	009b      	lsls	r3, r3, #2
 80046a2:	4413      	add	r3, r2
 80046a4:	881b      	ldrh	r3, [r3, #0]
 80046a6:	b29b      	uxth	r3, r3
 80046a8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046b0:	833b      	strh	r3, [r7, #24]
 80046b2:	687a      	ldr	r2, [r7, #4]
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	781b      	ldrb	r3, [r3, #0]
 80046b8:	009b      	lsls	r3, r3, #2
 80046ba:	441a      	add	r2, r3
 80046bc:	8b3b      	ldrh	r3, [r7, #24]
 80046be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80046c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80046c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80046ca:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80046ce:	b29b      	uxth	r3, r3
 80046d0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80046d2:	687a      	ldr	r2, [r7, #4]
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	781b      	ldrb	r3, [r3, #0]
 80046d8:	009b      	lsls	r3, r3, #2
 80046da:	4413      	add	r3, r2
 80046dc:	881b      	ldrh	r3, [r3, #0]
 80046de:	b29b      	uxth	r3, r3
 80046e0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80046e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046e8:	82fb      	strh	r3, [r7, #22]
 80046ea:	687a      	ldr	r2, [r7, #4]
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	781b      	ldrb	r3, [r3, #0]
 80046f0:	009b      	lsls	r3, r3, #2
 80046f2:	441a      	add	r2, r3
 80046f4:	8afb      	ldrh	r3, [r7, #22]
 80046f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80046fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80046fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004702:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004706:	b29b      	uxth	r3, r3
 8004708:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800470a:	687a      	ldr	r2, [r7, #4]
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	781b      	ldrb	r3, [r3, #0]
 8004710:	009b      	lsls	r3, r3, #2
 8004712:	4413      	add	r3, r2
 8004714:	881b      	ldrh	r3, [r3, #0]
 8004716:	b29b      	uxth	r3, r3
 8004718:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800471c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004720:	82bb      	strh	r3, [r7, #20]
 8004722:	687a      	ldr	r2, [r7, #4]
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	781b      	ldrb	r3, [r3, #0]
 8004728:	009b      	lsls	r3, r3, #2
 800472a:	441a      	add	r2, r3
 800472c:	8abb      	ldrh	r3, [r7, #20]
 800472e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004732:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004736:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800473a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800473e:	b29b      	uxth	r3, r3
 8004740:	8013      	strh	r3, [r2, #0]
 8004742:	e0a3      	b.n	800488c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004744:	687a      	ldr	r2, [r7, #4]
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	781b      	ldrb	r3, [r3, #0]
 800474a:	009b      	lsls	r3, r3, #2
 800474c:	4413      	add	r3, r2
 800474e:	881b      	ldrh	r3, [r3, #0]
 8004750:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004752:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004754:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004758:	2b00      	cmp	r3, #0
 800475a:	d01b      	beq.n	8004794 <USB_DeactivateEndpoint+0x2d4>
 800475c:	687a      	ldr	r2, [r7, #4]
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	781b      	ldrb	r3, [r3, #0]
 8004762:	009b      	lsls	r3, r3, #2
 8004764:	4413      	add	r3, r2
 8004766:	881b      	ldrh	r3, [r3, #0]
 8004768:	b29b      	uxth	r3, r3
 800476a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800476e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004772:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8004774:	687a      	ldr	r2, [r7, #4]
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	781b      	ldrb	r3, [r3, #0]
 800477a:	009b      	lsls	r3, r3, #2
 800477c:	441a      	add	r2, r3
 800477e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004780:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004784:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004788:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800478c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004790:	b29b      	uxth	r3, r3
 8004792:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004794:	687a      	ldr	r2, [r7, #4]
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	781b      	ldrb	r3, [r3, #0]
 800479a:	009b      	lsls	r3, r3, #2
 800479c:	4413      	add	r3, r2
 800479e:	881b      	ldrh	r3, [r3, #0]
 80047a0:	857b      	strh	r3, [r7, #42]	; 0x2a
 80047a2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80047a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d01b      	beq.n	80047e4 <USB_DeactivateEndpoint+0x324>
 80047ac:	687a      	ldr	r2, [r7, #4]
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	781b      	ldrb	r3, [r3, #0]
 80047b2:	009b      	lsls	r3, r3, #2
 80047b4:	4413      	add	r3, r2
 80047b6:	881b      	ldrh	r3, [r3, #0]
 80047b8:	b29b      	uxth	r3, r3
 80047ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047c2:	853b      	strh	r3, [r7, #40]	; 0x28
 80047c4:	687a      	ldr	r2, [r7, #4]
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	781b      	ldrb	r3, [r3, #0]
 80047ca:	009b      	lsls	r3, r3, #2
 80047cc:	441a      	add	r2, r3
 80047ce:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80047d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80047d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80047d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80047dc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80047e0:	b29b      	uxth	r3, r3
 80047e2:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80047e4:	687a      	ldr	r2, [r7, #4]
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	781b      	ldrb	r3, [r3, #0]
 80047ea:	009b      	lsls	r3, r3, #2
 80047ec:	4413      	add	r3, r2
 80047ee:	881b      	ldrh	r3, [r3, #0]
 80047f0:	b29b      	uxth	r3, r3
 80047f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047fa:	84fb      	strh	r3, [r7, #38]	; 0x26
 80047fc:	687a      	ldr	r2, [r7, #4]
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	781b      	ldrb	r3, [r3, #0]
 8004802:	009b      	lsls	r3, r3, #2
 8004804:	441a      	add	r2, r3
 8004806:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004808:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800480c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004810:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004814:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004818:	b29b      	uxth	r3, r3
 800481a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800481c:	687a      	ldr	r2, [r7, #4]
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	781b      	ldrb	r3, [r3, #0]
 8004822:	009b      	lsls	r3, r3, #2
 8004824:	4413      	add	r3, r2
 8004826:	881b      	ldrh	r3, [r3, #0]
 8004828:	b29b      	uxth	r3, r3
 800482a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800482e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004832:	84bb      	strh	r3, [r7, #36]	; 0x24
 8004834:	687a      	ldr	r2, [r7, #4]
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	781b      	ldrb	r3, [r3, #0]
 800483a:	009b      	lsls	r3, r3, #2
 800483c:	441a      	add	r2, r3
 800483e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004840:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004844:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004848:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800484c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004850:	b29b      	uxth	r3, r3
 8004852:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004854:	687a      	ldr	r2, [r7, #4]
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	781b      	ldrb	r3, [r3, #0]
 800485a:	009b      	lsls	r3, r3, #2
 800485c:	4413      	add	r3, r2
 800485e:	881b      	ldrh	r3, [r3, #0]
 8004860:	b29b      	uxth	r3, r3
 8004862:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004866:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800486a:	847b      	strh	r3, [r7, #34]	; 0x22
 800486c:	687a      	ldr	r2, [r7, #4]
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	781b      	ldrb	r3, [r3, #0]
 8004872:	009b      	lsls	r3, r3, #2
 8004874:	441a      	add	r2, r3
 8004876:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004878:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800487c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004880:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004884:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004888:	b29b      	uxth	r3, r3
 800488a:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800488c:	2300      	movs	r3, #0
}
 800488e:	4618      	mov	r0, r3
 8004890:	3734      	adds	r7, #52	; 0x34
 8004892:	46bd      	mov	sp, r7
 8004894:	bc80      	pop	{r7}
 8004896:	4770      	bx	lr

08004898 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b0cc      	sub	sp, #304	; 0x130
 800489c:	af00      	add	r7, sp, #0
 800489e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80048a2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80048a6:	6018      	str	r0, [r3, #0]
 80048a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80048ac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80048b0:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80048b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80048b6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	785b      	ldrb	r3, [r3, #1]
 80048be:	2b01      	cmp	r3, #1
 80048c0:	f041 817d 	bne.w	8005bbe <USB_EPStartXfer+0x1326>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80048c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80048c8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	699a      	ldr	r2, [r3, #24]
 80048d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80048d4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	691b      	ldr	r3, [r3, #16]
 80048dc:	429a      	cmp	r2, r3
 80048de:	d908      	bls.n	80048f2 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 80048e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80048e4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	691b      	ldr	r3, [r3, #16]
 80048ec:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80048f0:	e007      	b.n	8004902 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 80048f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80048f6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	699b      	ldr	r3, [r3, #24]
 80048fe:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8004902:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004906:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	7b1b      	ldrb	r3, [r3, #12]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d152      	bne.n	80049b8 <USB_EPStartXfer+0x120>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8004912:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004916:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	6959      	ldr	r1, [r3, #20]
 800491e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004922:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	88da      	ldrh	r2, [r3, #6]
 800492a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800492e:	b29b      	uxth	r3, r3
 8004930:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8004934:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8004938:	6800      	ldr	r0, [r0, #0]
 800493a:	f001 ff23 	bl	8006784 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800493e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004942:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004946:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800494a:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800494e:	6812      	ldr	r2, [r2, #0]
 8004950:	601a      	str	r2, [r3, #0]
 8004952:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004956:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004960:	b29b      	uxth	r3, r3
 8004962:	4619      	mov	r1, r3
 8004964:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004968:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800496c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004970:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 8004974:	6812      	ldr	r2, [r2, #0]
 8004976:	440a      	add	r2, r1
 8004978:	601a      	str	r2, [r3, #0]
 800497a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800497e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	781b      	ldrb	r3, [r3, #0]
 8004986:	011a      	lsls	r2, r3, #4
 8004988:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800498c:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	4413      	add	r3, r2
 8004994:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8004998:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800499c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80049a0:	601a      	str	r2, [r3, #0]
 80049a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80049a6:	b29a      	uxth	r2, r3
 80049a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80049ac:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	801a      	strh	r2, [r3, #0]
 80049b4:	f001 b8b5 	b.w	8005b22 <USB_EPStartXfer+0x128a>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80049b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80049bc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	78db      	ldrb	r3, [r3, #3]
 80049c4:	2b02      	cmp	r3, #2
 80049c6:	f040 84c6 	bne.w	8005356 <USB_EPStartXfer+0xabe>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80049ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80049ce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	6a1a      	ldr	r2, [r3, #32]
 80049d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80049da:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	691b      	ldr	r3, [r3, #16]
 80049e2:	429a      	cmp	r2, r3
 80049e4:	f240 8443 	bls.w	800526e <USB_EPStartXfer+0x9d6>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 80049e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80049ec:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80049f0:	681a      	ldr	r2, [r3, #0]
 80049f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80049f6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	781b      	ldrb	r3, [r3, #0]
 80049fe:	009b      	lsls	r3, r3, #2
 8004a00:	4413      	add	r3, r2
 8004a02:	881b      	ldrh	r3, [r3, #0]
 8004a04:	b29b      	uxth	r3, r3
 8004a06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a0e:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8004a12:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a16:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004a1a:	681a      	ldr	r2, [r3, #0]
 8004a1c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a20:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	781b      	ldrb	r3, [r3, #0]
 8004a28:	009b      	lsls	r3, r3, #2
 8004a2a:	441a      	add	r2, r3
 8004a2c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004a30:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a34:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a38:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004a3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a40:	b29b      	uxth	r3, r3
 8004a42:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8004a44:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a48:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	6a1a      	ldr	r2, [r3, #32]
 8004a50:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004a54:	1ad2      	subs	r2, r2, r3
 8004a56:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a5a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004a62:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a66:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004a6a:	681a      	ldr	r2, [r3, #0]
 8004a6c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a70:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	781b      	ldrb	r3, [r3, #0]
 8004a78:	009b      	lsls	r3, r3, #2
 8004a7a:	4413      	add	r3, r2
 8004a7c:	881b      	ldrh	r3, [r3, #0]
 8004a7e:	b29b      	uxth	r3, r3
 8004a80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	f000 823e 	beq.w	8004f06 <USB_EPStartXfer+0x66e>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004a8a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a8e:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004a92:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004a96:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8004a9a:	6812      	ldr	r2, [r2, #0]
 8004a9c:	601a      	str	r2, [r3, #0]
 8004a9e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004aa2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	785b      	ldrb	r3, [r3, #1]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	f040 809a 	bne.w	8004be4 <USB_EPStartXfer+0x34c>
 8004ab0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ab4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004ab8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004abc:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8004ac0:	6812      	ldr	r2, [r2, #0]
 8004ac2:	601a      	str	r2, [r3, #0]
 8004ac4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ac8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ad2:	b29b      	uxth	r3, r3
 8004ad4:	4619      	mov	r1, r3
 8004ad6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ada:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004ade:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004ae2:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 8004ae6:	6812      	ldr	r2, [r2, #0]
 8004ae8:	440a      	add	r2, r1
 8004aea:	601a      	str	r2, [r3, #0]
 8004aec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004af0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	781b      	ldrb	r3, [r3, #0]
 8004af8:	011a      	lsls	r2, r3, #4
 8004afa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004afe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	4413      	add	r3, r2
 8004b06:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8004b0a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b0e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004b12:	601a      	str	r2, [r3, #0]
 8004b14:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d122      	bne.n	8004b62 <USB_EPStartXfer+0x2ca>
 8004b1c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b20:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	881b      	ldrh	r3, [r3, #0]
 8004b28:	b29b      	uxth	r3, r3
 8004b2a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004b2e:	b29a      	uxth	r2, r3
 8004b30:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b34:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	801a      	strh	r2, [r3, #0]
 8004b3c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b40:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	881b      	ldrh	r3, [r3, #0]
 8004b48:	b29b      	uxth	r3, r3
 8004b4a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b4e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b52:	b29a      	uxth	r2, r3
 8004b54:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b58:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	801a      	strh	r2, [r3, #0]
 8004b60:	e079      	b.n	8004c56 <USB_EPStartXfer+0x3be>
 8004b62:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004b66:	2b3e      	cmp	r3, #62	; 0x3e
 8004b68:	d81b      	bhi.n	8004ba2 <USB_EPStartXfer+0x30a>
 8004b6a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004b6e:	085b      	lsrs	r3, r3, #1
 8004b70:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004b74:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004b78:	f003 0301 	and.w	r3, r3, #1
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d004      	beq.n	8004b8a <USB_EPStartXfer+0x2f2>
 8004b80:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004b84:	3301      	adds	r3, #1
 8004b86:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004b8a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004b8e:	b29b      	uxth	r3, r3
 8004b90:	029b      	lsls	r3, r3, #10
 8004b92:	b29a      	uxth	r2, r3
 8004b94:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b98:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	801a      	strh	r2, [r3, #0]
 8004ba0:	e059      	b.n	8004c56 <USB_EPStartXfer+0x3be>
 8004ba2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ba6:	095b      	lsrs	r3, r3, #5
 8004ba8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004bac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004bb0:	f003 031f 	and.w	r3, r3, #31
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d104      	bne.n	8004bc2 <USB_EPStartXfer+0x32a>
 8004bb8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004bbc:	3b01      	subs	r3, #1
 8004bbe:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004bc2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004bc6:	b29b      	uxth	r3, r3
 8004bc8:	029b      	lsls	r3, r3, #10
 8004bca:	b29b      	uxth	r3, r3
 8004bcc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004bd0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004bd4:	b29a      	uxth	r2, r3
 8004bd6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004bda:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	801a      	strh	r2, [r3, #0]
 8004be2:	e038      	b.n	8004c56 <USB_EPStartXfer+0x3be>
 8004be4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004be8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	785b      	ldrb	r3, [r3, #1]
 8004bf0:	2b01      	cmp	r3, #1
 8004bf2:	d130      	bne.n	8004c56 <USB_EPStartXfer+0x3be>
 8004bf4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004bf8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c02:	b29b      	uxth	r3, r3
 8004c04:	4619      	mov	r1, r3
 8004c06:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c0a:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004c0e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004c12:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 8004c16:	6812      	ldr	r2, [r2, #0]
 8004c18:	440a      	add	r2, r1
 8004c1a:	601a      	str	r2, [r3, #0]
 8004c1c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c20:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	781b      	ldrb	r3, [r3, #0]
 8004c28:	011a      	lsls	r2, r3, #4
 8004c2a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c2e:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	4413      	add	r3, r2
 8004c36:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8004c3a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c3e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004c42:	601a      	str	r2, [r3, #0]
 8004c44:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004c48:	b29a      	uxth	r2, r3
 8004c4a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c4e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004c56:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c5a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	895b      	ldrh	r3, [r3, #10]
 8004c62:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004c66:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c6a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	6959      	ldr	r1, [r3, #20]
 8004c72:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004c76:	b29b      	uxth	r3, r3
 8004c78:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004c7c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8004c80:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8004c84:	6800      	ldr	r0, [r0, #0]
 8004c86:	f001 fd7d 	bl	8006784 <USB_WritePMA>
            ep->xfer_buff += len;
 8004c8a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c8e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	695a      	ldr	r2, [r3, #20]
 8004c96:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004c9a:	441a      	add	r2, r3
 8004c9c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ca0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8004ca8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004cac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	6a1a      	ldr	r2, [r3, #32]
 8004cb4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004cb8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	691b      	ldr	r3, [r3, #16]
 8004cc0:	429a      	cmp	r2, r3
 8004cc2:	d90f      	bls.n	8004ce4 <USB_EPStartXfer+0x44c>
            {
              ep->xfer_len_db -= len;
 8004cc4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004cc8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	6a1a      	ldr	r2, [r3, #32]
 8004cd0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004cd4:	1ad2      	subs	r2, r2, r3
 8004cd6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004cda:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	621a      	str	r2, [r3, #32]
 8004ce2:	e00e      	b.n	8004d02 <USB_EPStartXfer+0x46a>
            }
            else
            {
              len = ep->xfer_len_db;
 8004ce4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ce8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	6a1b      	ldr	r3, [r3, #32]
 8004cf0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8004cf4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004cf8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	2200      	movs	r2, #0
 8004d00:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004d02:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d06:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	785b      	ldrb	r3, [r3, #1]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	f040 809a 	bne.w	8004e48 <USB_EPStartXfer+0x5b0>
 8004d14:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d18:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004d1c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004d20:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8004d24:	6812      	ldr	r2, [r2, #0]
 8004d26:	601a      	str	r2, [r3, #0]
 8004d28:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d2c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d36:	b29b      	uxth	r3, r3
 8004d38:	4619      	mov	r1, r3
 8004d3a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d3e:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004d42:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004d46:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 8004d4a:	6812      	ldr	r2, [r2, #0]
 8004d4c:	440a      	add	r2, r1
 8004d4e:	601a      	str	r2, [r3, #0]
 8004d50:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d54:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	781b      	ldrb	r3, [r3, #0]
 8004d5c:	011a      	lsls	r2, r3, #4
 8004d5e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d62:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	4413      	add	r3, r2
 8004d6a:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8004d6e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d72:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004d76:	601a      	str	r2, [r3, #0]
 8004d78:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d122      	bne.n	8004dc6 <USB_EPStartXfer+0x52e>
 8004d80:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d84:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	881b      	ldrh	r3, [r3, #0]
 8004d8c:	b29b      	uxth	r3, r3
 8004d8e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004d92:	b29a      	uxth	r2, r3
 8004d94:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d98:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	801a      	strh	r2, [r3, #0]
 8004da0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004da4:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	881b      	ldrh	r3, [r3, #0]
 8004dac:	b29b      	uxth	r3, r3
 8004dae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004db2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004db6:	b29a      	uxth	r2, r3
 8004db8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004dbc:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	801a      	strh	r2, [r3, #0]
 8004dc4:	e083      	b.n	8004ece <USB_EPStartXfer+0x636>
 8004dc6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004dca:	2b3e      	cmp	r3, #62	; 0x3e
 8004dcc:	d81b      	bhi.n	8004e06 <USB_EPStartXfer+0x56e>
 8004dce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004dd2:	085b      	lsrs	r3, r3, #1
 8004dd4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004dd8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ddc:	f003 0301 	and.w	r3, r3, #1
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d004      	beq.n	8004dee <USB_EPStartXfer+0x556>
 8004de4:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004de8:	3301      	adds	r3, #1
 8004dea:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004dee:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004df2:	b29b      	uxth	r3, r3
 8004df4:	029b      	lsls	r3, r3, #10
 8004df6:	b29a      	uxth	r2, r3
 8004df8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004dfc:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	801a      	strh	r2, [r3, #0]
 8004e04:	e063      	b.n	8004ece <USB_EPStartXfer+0x636>
 8004e06:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004e0a:	095b      	lsrs	r3, r3, #5
 8004e0c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004e10:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004e14:	f003 031f 	and.w	r3, r3, #31
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d104      	bne.n	8004e26 <USB_EPStartXfer+0x58e>
 8004e1c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004e20:	3b01      	subs	r3, #1
 8004e22:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004e26:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004e2a:	b29b      	uxth	r3, r3
 8004e2c:	029b      	lsls	r3, r3, #10
 8004e2e:	b29b      	uxth	r3, r3
 8004e30:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e34:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e38:	b29a      	uxth	r2, r3
 8004e3a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e3e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	801a      	strh	r2, [r3, #0]
 8004e46:	e042      	b.n	8004ece <USB_EPStartXfer+0x636>
 8004e48:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e4c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	785b      	ldrb	r3, [r3, #1]
 8004e54:	2b01      	cmp	r3, #1
 8004e56:	d13a      	bne.n	8004ece <USB_EPStartXfer+0x636>
 8004e58:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e5c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004e60:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004e64:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8004e68:	6812      	ldr	r2, [r2, #0]
 8004e6a:	601a      	str	r2, [r3, #0]
 8004e6c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e70:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e7a:	b29b      	uxth	r3, r3
 8004e7c:	4619      	mov	r1, r3
 8004e7e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e82:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004e86:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004e8a:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8004e8e:	6812      	ldr	r2, [r2, #0]
 8004e90:	440a      	add	r2, r1
 8004e92:	601a      	str	r2, [r3, #0]
 8004e94:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e98:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	781b      	ldrb	r3, [r3, #0]
 8004ea0:	011a      	lsls	r2, r3, #4
 8004ea2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ea6:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	4413      	add	r3, r2
 8004eae:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8004eb2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004eb6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004eba:	601a      	str	r2, [r3, #0]
 8004ebc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ec0:	b29a      	uxth	r2, r3
 8004ec2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ec6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004ece:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ed2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	891b      	ldrh	r3, [r3, #8]
 8004eda:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004ede:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ee2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	6959      	ldr	r1, [r3, #20]
 8004eea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004eee:	b29b      	uxth	r3, r3
 8004ef0:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004ef4:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8004ef8:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8004efc:	6800      	ldr	r0, [r0, #0]
 8004efe:	f001 fc41 	bl	8006784 <USB_WritePMA>
 8004f02:	f000 be0e 	b.w	8005b22 <USB_EPStartXfer+0x128a>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004f06:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f0a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	785b      	ldrb	r3, [r3, #1]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d16d      	bne.n	8004ff2 <USB_EPStartXfer+0x75a>
 8004f16:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f1a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	64bb      	str	r3, [r7, #72]	; 0x48
 8004f22:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f26:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f30:	b29b      	uxth	r3, r3
 8004f32:	461a      	mov	r2, r3
 8004f34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f36:	4413      	add	r3, r2
 8004f38:	64bb      	str	r3, [r7, #72]	; 0x48
 8004f3a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f3e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	781b      	ldrb	r3, [r3, #0]
 8004f46:	011a      	lsls	r2, r3, #4
 8004f48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f4a:	4413      	add	r3, r2
 8004f4c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004f50:	647b      	str	r3, [r7, #68]	; 0x44
 8004f52:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d112      	bne.n	8004f80 <USB_EPStartXfer+0x6e8>
 8004f5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f5c:	881b      	ldrh	r3, [r3, #0]
 8004f5e:	b29b      	uxth	r3, r3
 8004f60:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004f64:	b29a      	uxth	r2, r3
 8004f66:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f68:	801a      	strh	r2, [r3, #0]
 8004f6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f6c:	881b      	ldrh	r3, [r3, #0]
 8004f6e:	b29b      	uxth	r3, r3
 8004f70:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f74:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f78:	b29a      	uxth	r2, r3
 8004f7a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f7c:	801a      	strh	r2, [r3, #0]
 8004f7e:	e063      	b.n	8005048 <USB_EPStartXfer+0x7b0>
 8004f80:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f84:	2b3e      	cmp	r3, #62	; 0x3e
 8004f86:	d817      	bhi.n	8004fb8 <USB_EPStartXfer+0x720>
 8004f88:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f8c:	085b      	lsrs	r3, r3, #1
 8004f8e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004f92:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f96:	f003 0301 	and.w	r3, r3, #1
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d004      	beq.n	8004fa8 <USB_EPStartXfer+0x710>
 8004f9e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004fa2:	3301      	adds	r3, #1
 8004fa4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004fa8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004fac:	b29b      	uxth	r3, r3
 8004fae:	029b      	lsls	r3, r3, #10
 8004fb0:	b29a      	uxth	r2, r3
 8004fb2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004fb4:	801a      	strh	r2, [r3, #0]
 8004fb6:	e047      	b.n	8005048 <USB_EPStartXfer+0x7b0>
 8004fb8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004fbc:	095b      	lsrs	r3, r3, #5
 8004fbe:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004fc2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004fc6:	f003 031f 	and.w	r3, r3, #31
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d104      	bne.n	8004fd8 <USB_EPStartXfer+0x740>
 8004fce:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004fd2:	3b01      	subs	r3, #1
 8004fd4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004fd8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004fdc:	b29b      	uxth	r3, r3
 8004fde:	029b      	lsls	r3, r3, #10
 8004fe0:	b29b      	uxth	r3, r3
 8004fe2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004fe6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004fea:	b29a      	uxth	r2, r3
 8004fec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004fee:	801a      	strh	r2, [r3, #0]
 8004ff0:	e02a      	b.n	8005048 <USB_EPStartXfer+0x7b0>
 8004ff2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ff6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	785b      	ldrb	r3, [r3, #1]
 8004ffe:	2b01      	cmp	r3, #1
 8005000:	d122      	bne.n	8005048 <USB_EPStartXfer+0x7b0>
 8005002:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005006:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	653b      	str	r3, [r7, #80]	; 0x50
 800500e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005012:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800501c:	b29b      	uxth	r3, r3
 800501e:	461a      	mov	r2, r3
 8005020:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005022:	4413      	add	r3, r2
 8005024:	653b      	str	r3, [r7, #80]	; 0x50
 8005026:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800502a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	781b      	ldrb	r3, [r3, #0]
 8005032:	011a      	lsls	r2, r3, #4
 8005034:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005036:	4413      	add	r3, r2
 8005038:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800503c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800503e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005042:	b29a      	uxth	r2, r3
 8005044:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005046:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005048:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800504c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	891b      	ldrh	r3, [r3, #8]
 8005054:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005058:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800505c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	6959      	ldr	r1, [r3, #20]
 8005064:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005068:	b29b      	uxth	r3, r3
 800506a:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800506e:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005072:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005076:	6800      	ldr	r0, [r0, #0]
 8005078:	f001 fb84 	bl	8006784 <USB_WritePMA>
            ep->xfer_buff += len;
 800507c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005080:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	695a      	ldr	r2, [r3, #20]
 8005088:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800508c:	441a      	add	r2, r3
 800508e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005092:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800509a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800509e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	6a1a      	ldr	r2, [r3, #32]
 80050a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050aa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	691b      	ldr	r3, [r3, #16]
 80050b2:	429a      	cmp	r2, r3
 80050b4:	d90f      	bls.n	80050d6 <USB_EPStartXfer+0x83e>
            {
              ep->xfer_len_db -= len;
 80050b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050ba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	6a1a      	ldr	r2, [r3, #32]
 80050c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80050c6:	1ad2      	subs	r2, r2, r3
 80050c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050cc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	621a      	str	r2, [r3, #32]
 80050d4:	e00e      	b.n	80050f4 <USB_EPStartXfer+0x85c>
            }
            else
            {
              len = ep->xfer_len_db;
 80050d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050da:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	6a1b      	ldr	r3, [r3, #32]
 80050e2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 80050e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050ea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	2200      	movs	r2, #0
 80050f2:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80050f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050f8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	643b      	str	r3, [r7, #64]	; 0x40
 8005100:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005104:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	785b      	ldrb	r3, [r3, #1]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d16d      	bne.n	80051ec <USB_EPStartXfer+0x954>
 8005110:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005114:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	63bb      	str	r3, [r7, #56]	; 0x38
 800511c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005120:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800512a:	b29b      	uxth	r3, r3
 800512c:	461a      	mov	r2, r3
 800512e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005130:	4413      	add	r3, r2
 8005132:	63bb      	str	r3, [r7, #56]	; 0x38
 8005134:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005138:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	781b      	ldrb	r3, [r3, #0]
 8005140:	011a      	lsls	r2, r3, #4
 8005142:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005144:	4413      	add	r3, r2
 8005146:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800514a:	637b      	str	r3, [r7, #52]	; 0x34
 800514c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005150:	2b00      	cmp	r3, #0
 8005152:	d112      	bne.n	800517a <USB_EPStartXfer+0x8e2>
 8005154:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005156:	881b      	ldrh	r3, [r3, #0]
 8005158:	b29b      	uxth	r3, r3
 800515a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800515e:	b29a      	uxth	r2, r3
 8005160:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005162:	801a      	strh	r2, [r3, #0]
 8005164:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005166:	881b      	ldrh	r3, [r3, #0]
 8005168:	b29b      	uxth	r3, r3
 800516a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800516e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005172:	b29a      	uxth	r2, r3
 8005174:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005176:	801a      	strh	r2, [r3, #0]
 8005178:	e05d      	b.n	8005236 <USB_EPStartXfer+0x99e>
 800517a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800517e:	2b3e      	cmp	r3, #62	; 0x3e
 8005180:	d817      	bhi.n	80051b2 <USB_EPStartXfer+0x91a>
 8005182:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005186:	085b      	lsrs	r3, r3, #1
 8005188:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800518c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005190:	f003 0301 	and.w	r3, r3, #1
 8005194:	2b00      	cmp	r3, #0
 8005196:	d004      	beq.n	80051a2 <USB_EPStartXfer+0x90a>
 8005198:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800519c:	3301      	adds	r3, #1
 800519e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80051a2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80051a6:	b29b      	uxth	r3, r3
 80051a8:	029b      	lsls	r3, r3, #10
 80051aa:	b29a      	uxth	r2, r3
 80051ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051ae:	801a      	strh	r2, [r3, #0]
 80051b0:	e041      	b.n	8005236 <USB_EPStartXfer+0x99e>
 80051b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80051b6:	095b      	lsrs	r3, r3, #5
 80051b8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80051bc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80051c0:	f003 031f 	and.w	r3, r3, #31
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d104      	bne.n	80051d2 <USB_EPStartXfer+0x93a>
 80051c8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80051cc:	3b01      	subs	r3, #1
 80051ce:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80051d2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80051d6:	b29b      	uxth	r3, r3
 80051d8:	029b      	lsls	r3, r3, #10
 80051da:	b29b      	uxth	r3, r3
 80051dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80051e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80051e4:	b29a      	uxth	r2, r3
 80051e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051e8:	801a      	strh	r2, [r3, #0]
 80051ea:	e024      	b.n	8005236 <USB_EPStartXfer+0x99e>
 80051ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051f0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	785b      	ldrb	r3, [r3, #1]
 80051f8:	2b01      	cmp	r3, #1
 80051fa:	d11c      	bne.n	8005236 <USB_EPStartXfer+0x99e>
 80051fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005200:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800520a:	b29b      	uxth	r3, r3
 800520c:	461a      	mov	r2, r3
 800520e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005210:	4413      	add	r3, r2
 8005212:	643b      	str	r3, [r7, #64]	; 0x40
 8005214:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005218:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	781b      	ldrb	r3, [r3, #0]
 8005220:	011a      	lsls	r2, r3, #4
 8005222:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005224:	4413      	add	r3, r2
 8005226:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800522a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800522c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005230:	b29a      	uxth	r2, r3
 8005232:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005234:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005236:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800523a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	895b      	ldrh	r3, [r3, #10]
 8005242:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005246:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800524a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	6959      	ldr	r1, [r3, #20]
 8005252:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005256:	b29b      	uxth	r3, r3
 8005258:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800525c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005260:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005264:	6800      	ldr	r0, [r0, #0]
 8005266:	f001 fa8d 	bl	8006784 <USB_WritePMA>
 800526a:	f000 bc5a 	b.w	8005b22 <USB_EPStartXfer+0x128a>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800526e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005272:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	6a1b      	ldr	r3, [r3, #32]
 800527a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 800527e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005282:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005286:	681a      	ldr	r2, [r3, #0]
 8005288:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800528c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	781b      	ldrb	r3, [r3, #0]
 8005294:	009b      	lsls	r3, r3, #2
 8005296:	4413      	add	r3, r2
 8005298:	881b      	ldrh	r3, [r3, #0]
 800529a:	b29b      	uxth	r3, r3
 800529c:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80052a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052a4:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80052a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80052ac:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80052b0:	681a      	ldr	r2, [r3, #0]
 80052b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80052b6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	781b      	ldrb	r3, [r3, #0]
 80052be:	009b      	lsls	r3, r3, #2
 80052c0:	441a      	add	r2, r3
 80052c2:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80052c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80052ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80052ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80052d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052d6:	b29b      	uxth	r3, r3
 80052d8:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80052da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80052de:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80052e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80052ea:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80052f4:	b29b      	uxth	r3, r3
 80052f6:	461a      	mov	r2, r3
 80052f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80052fa:	4413      	add	r3, r2
 80052fc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80052fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005302:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	781b      	ldrb	r3, [r3, #0]
 800530a:	011a      	lsls	r2, r3, #4
 800530c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800530e:	4413      	add	r3, r2
 8005310:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005314:	65bb      	str	r3, [r7, #88]	; 0x58
 8005316:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800531a:	b29a      	uxth	r2, r3
 800531c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800531e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005320:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005324:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	891b      	ldrh	r3, [r3, #8]
 800532c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005330:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005334:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	6959      	ldr	r1, [r3, #20]
 800533c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005340:	b29b      	uxth	r3, r3
 8005342:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005346:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800534a:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800534e:	6800      	ldr	r0, [r0, #0]
 8005350:	f001 fa18 	bl	8006784 <USB_WritePMA>
 8005354:	e3e5      	b.n	8005b22 <USB_EPStartXfer+0x128a>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 8005356:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800535a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800535e:	681a      	ldr	r2, [r3, #0]
 8005360:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005364:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	781b      	ldrb	r3, [r3, #0]
 800536c:	009b      	lsls	r3, r3, #2
 800536e:	4413      	add	r3, r2
 8005370:	881b      	ldrh	r3, [r3, #0]
 8005372:	b29b      	uxth	r3, r3
 8005374:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005378:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800537c:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 8005380:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005384:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005388:	681a      	ldr	r2, [r3, #0]
 800538a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800538e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	781b      	ldrb	r3, [r3, #0]
 8005396:	009b      	lsls	r3, r3, #2
 8005398:	441a      	add	r2, r3
 800539a:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 800539e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80053a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80053a6:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80053aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053ae:	b29b      	uxth	r3, r3
 80053b0:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80053b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053b6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	6a1a      	ldr	r2, [r3, #32]
 80053be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80053c2:	1ad2      	subs	r2, r2, r3
 80053c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053c8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80053d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053d4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80053d8:	681a      	ldr	r2, [r3, #0]
 80053da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053de:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	781b      	ldrb	r3, [r3, #0]
 80053e6:	009b      	lsls	r3, r3, #2
 80053e8:	4413      	add	r3, r2
 80053ea:	881b      	ldrh	r3, [r3, #0]
 80053ec:	b29b      	uxth	r3, r3
 80053ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	f000 81bc 	beq.w	8005770 <USB_EPStartXfer+0xed8>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80053f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053fc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005406:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800540a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	785b      	ldrb	r3, [r3, #1]
 8005412:	2b00      	cmp	r3, #0
 8005414:	d16d      	bne.n	80054f2 <USB_EPStartXfer+0xc5a>
 8005416:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800541a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	67bb      	str	r3, [r7, #120]	; 0x78
 8005422:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005426:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005430:	b29b      	uxth	r3, r3
 8005432:	461a      	mov	r2, r3
 8005434:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005436:	4413      	add	r3, r2
 8005438:	67bb      	str	r3, [r7, #120]	; 0x78
 800543a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800543e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	781b      	ldrb	r3, [r3, #0]
 8005446:	011a      	lsls	r2, r3, #4
 8005448:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800544a:	4413      	add	r3, r2
 800544c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005450:	677b      	str	r3, [r7, #116]	; 0x74
 8005452:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005456:	2b00      	cmp	r3, #0
 8005458:	d112      	bne.n	8005480 <USB_EPStartXfer+0xbe8>
 800545a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800545c:	881b      	ldrh	r3, [r3, #0]
 800545e:	b29b      	uxth	r3, r3
 8005460:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005464:	b29a      	uxth	r2, r3
 8005466:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005468:	801a      	strh	r2, [r3, #0]
 800546a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800546c:	881b      	ldrh	r3, [r3, #0]
 800546e:	b29b      	uxth	r3, r3
 8005470:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005474:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005478:	b29a      	uxth	r2, r3
 800547a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800547c:	801a      	strh	r2, [r3, #0]
 800547e:	e060      	b.n	8005542 <USB_EPStartXfer+0xcaa>
 8005480:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005484:	2b3e      	cmp	r3, #62	; 0x3e
 8005486:	d817      	bhi.n	80054b8 <USB_EPStartXfer+0xc20>
 8005488:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800548c:	085b      	lsrs	r3, r3, #1
 800548e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005492:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005496:	f003 0301 	and.w	r3, r3, #1
 800549a:	2b00      	cmp	r3, #0
 800549c:	d004      	beq.n	80054a8 <USB_EPStartXfer+0xc10>
 800549e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80054a2:	3301      	adds	r3, #1
 80054a4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80054a8:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80054ac:	b29b      	uxth	r3, r3
 80054ae:	029b      	lsls	r3, r3, #10
 80054b0:	b29a      	uxth	r2, r3
 80054b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80054b4:	801a      	strh	r2, [r3, #0]
 80054b6:	e044      	b.n	8005542 <USB_EPStartXfer+0xcaa>
 80054b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80054bc:	095b      	lsrs	r3, r3, #5
 80054be:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80054c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80054c6:	f003 031f 	and.w	r3, r3, #31
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d104      	bne.n	80054d8 <USB_EPStartXfer+0xc40>
 80054ce:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80054d2:	3b01      	subs	r3, #1
 80054d4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80054d8:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80054dc:	b29b      	uxth	r3, r3
 80054de:	029b      	lsls	r3, r3, #10
 80054e0:	b29b      	uxth	r3, r3
 80054e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80054e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80054ea:	b29a      	uxth	r2, r3
 80054ec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80054ee:	801a      	strh	r2, [r3, #0]
 80054f0:	e027      	b.n	8005542 <USB_EPStartXfer+0xcaa>
 80054f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054f6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	785b      	ldrb	r3, [r3, #1]
 80054fe:	2b01      	cmp	r3, #1
 8005500:	d11f      	bne.n	8005542 <USB_EPStartXfer+0xcaa>
 8005502:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005506:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005510:	b29b      	uxth	r3, r3
 8005512:	461a      	mov	r2, r3
 8005514:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005518:	4413      	add	r3, r2
 800551a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800551e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005522:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	781b      	ldrb	r3, [r3, #0]
 800552a:	011a      	lsls	r2, r3, #4
 800552c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005530:	4413      	add	r3, r2
 8005532:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005536:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005538:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800553c:	b29a      	uxth	r2, r3
 800553e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005540:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8005542:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005546:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	895b      	ldrh	r3, [r3, #10]
 800554e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005552:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005556:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	6959      	ldr	r1, [r3, #20]
 800555e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005562:	b29b      	uxth	r3, r3
 8005564:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005568:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800556c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005570:	6800      	ldr	r0, [r0, #0]
 8005572:	f001 f907 	bl	8006784 <USB_WritePMA>
          ep->xfer_buff += len;
 8005576:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800557a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	695a      	ldr	r2, [r3, #20]
 8005582:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005586:	441a      	add	r2, r3
 8005588:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800558c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8005594:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005598:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	6a1a      	ldr	r2, [r3, #32]
 80055a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055a4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	691b      	ldr	r3, [r3, #16]
 80055ac:	429a      	cmp	r2, r3
 80055ae:	d90f      	bls.n	80055d0 <USB_EPStartXfer+0xd38>
          {
            ep->xfer_len_db -= len;
 80055b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055b4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	6a1a      	ldr	r2, [r3, #32]
 80055bc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80055c0:	1ad2      	subs	r2, r2, r3
 80055c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055c6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	621a      	str	r2, [r3, #32]
 80055ce:	e00e      	b.n	80055ee <USB_EPStartXfer+0xd56>
          }
          else
          {
            len = ep->xfer_len_db;
 80055d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055d4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	6a1b      	ldr	r3, [r3, #32]
 80055dc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 80055e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055e4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	2200      	movs	r2, #0
 80055ec:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 80055ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	f000 8295 	beq.w	8005b22 <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80055f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055fc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	785b      	ldrb	r3, [r3, #1]
 8005604:	2b00      	cmp	r3, #0
 8005606:	d16d      	bne.n	80056e4 <USB_EPStartXfer+0xe4c>
 8005608:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800560c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	66bb      	str	r3, [r7, #104]	; 0x68
 8005614:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005618:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005622:	b29b      	uxth	r3, r3
 8005624:	461a      	mov	r2, r3
 8005626:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005628:	4413      	add	r3, r2
 800562a:	66bb      	str	r3, [r7, #104]	; 0x68
 800562c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005630:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	781b      	ldrb	r3, [r3, #0]
 8005638:	011a      	lsls	r2, r3, #4
 800563a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800563c:	4413      	add	r3, r2
 800563e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005642:	667b      	str	r3, [r7, #100]	; 0x64
 8005644:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005648:	2b00      	cmp	r3, #0
 800564a:	d112      	bne.n	8005672 <USB_EPStartXfer+0xdda>
 800564c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800564e:	881b      	ldrh	r3, [r3, #0]
 8005650:	b29b      	uxth	r3, r3
 8005652:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005656:	b29a      	uxth	r2, r3
 8005658:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800565a:	801a      	strh	r2, [r3, #0]
 800565c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800565e:	881b      	ldrh	r3, [r3, #0]
 8005660:	b29b      	uxth	r3, r3
 8005662:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005666:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800566a:	b29a      	uxth	r2, r3
 800566c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800566e:	801a      	strh	r2, [r3, #0]
 8005670:	e063      	b.n	800573a <USB_EPStartXfer+0xea2>
 8005672:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005676:	2b3e      	cmp	r3, #62	; 0x3e
 8005678:	d817      	bhi.n	80056aa <USB_EPStartXfer+0xe12>
 800567a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800567e:	085b      	lsrs	r3, r3, #1
 8005680:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005684:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005688:	f003 0301 	and.w	r3, r3, #1
 800568c:	2b00      	cmp	r3, #0
 800568e:	d004      	beq.n	800569a <USB_EPStartXfer+0xe02>
 8005690:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005694:	3301      	adds	r3, #1
 8005696:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800569a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800569e:	b29b      	uxth	r3, r3
 80056a0:	029b      	lsls	r3, r3, #10
 80056a2:	b29a      	uxth	r2, r3
 80056a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80056a6:	801a      	strh	r2, [r3, #0]
 80056a8:	e047      	b.n	800573a <USB_EPStartXfer+0xea2>
 80056aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80056ae:	095b      	lsrs	r3, r3, #5
 80056b0:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80056b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80056b8:	f003 031f 	and.w	r3, r3, #31
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d104      	bne.n	80056ca <USB_EPStartXfer+0xe32>
 80056c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80056c4:	3b01      	subs	r3, #1
 80056c6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80056ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80056ce:	b29b      	uxth	r3, r3
 80056d0:	029b      	lsls	r3, r3, #10
 80056d2:	b29b      	uxth	r3, r3
 80056d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80056d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80056dc:	b29a      	uxth	r2, r3
 80056de:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80056e0:	801a      	strh	r2, [r3, #0]
 80056e2:	e02a      	b.n	800573a <USB_EPStartXfer+0xea2>
 80056e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056e8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	785b      	ldrb	r3, [r3, #1]
 80056f0:	2b01      	cmp	r3, #1
 80056f2:	d122      	bne.n	800573a <USB_EPStartXfer+0xea2>
 80056f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056f8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	673b      	str	r3, [r7, #112]	; 0x70
 8005700:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005704:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800570e:	b29b      	uxth	r3, r3
 8005710:	461a      	mov	r2, r3
 8005712:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005714:	4413      	add	r3, r2
 8005716:	673b      	str	r3, [r7, #112]	; 0x70
 8005718:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800571c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	781b      	ldrb	r3, [r3, #0]
 8005724:	011a      	lsls	r2, r3, #4
 8005726:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005728:	4413      	add	r3, r2
 800572a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800572e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005730:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005734:	b29a      	uxth	r2, r3
 8005736:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005738:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800573a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800573e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	891b      	ldrh	r3, [r3, #8]
 8005746:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800574a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800574e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	6959      	ldr	r1, [r3, #20]
 8005756:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800575a:	b29b      	uxth	r3, r3
 800575c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005760:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005764:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005768:	6800      	ldr	r0, [r0, #0]
 800576a:	f001 f80b 	bl	8006784 <USB_WritePMA>
 800576e:	e1d8      	b.n	8005b22 <USB_EPStartXfer+0x128a>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005770:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005774:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	785b      	ldrb	r3, [r3, #1]
 800577c:	2b00      	cmp	r3, #0
 800577e:	d178      	bne.n	8005872 <USB_EPStartXfer+0xfda>
 8005780:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005784:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800578e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005792:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800579c:	b29b      	uxth	r3, r3
 800579e:	461a      	mov	r2, r3
 80057a0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80057a4:	4413      	add	r3, r2
 80057a6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80057aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057ae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	781b      	ldrb	r3, [r3, #0]
 80057b6:	011a      	lsls	r2, r3, #4
 80057b8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80057bc:	4413      	add	r3, r2
 80057be:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80057c2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80057c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d116      	bne.n	80057fc <USB_EPStartXfer+0xf64>
 80057ce:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80057d2:	881b      	ldrh	r3, [r3, #0]
 80057d4:	b29b      	uxth	r3, r3
 80057d6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80057da:	b29a      	uxth	r2, r3
 80057dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80057e0:	801a      	strh	r2, [r3, #0]
 80057e2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80057e6:	881b      	ldrh	r3, [r3, #0]
 80057e8:	b29b      	uxth	r3, r3
 80057ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80057ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80057f2:	b29a      	uxth	r2, r3
 80057f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80057f8:	801a      	strh	r2, [r3, #0]
 80057fa:	e06b      	b.n	80058d4 <USB_EPStartXfer+0x103c>
 80057fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005800:	2b3e      	cmp	r3, #62	; 0x3e
 8005802:	d818      	bhi.n	8005836 <USB_EPStartXfer+0xf9e>
 8005804:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005808:	085b      	lsrs	r3, r3, #1
 800580a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800580e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005812:	f003 0301 	and.w	r3, r3, #1
 8005816:	2b00      	cmp	r3, #0
 8005818:	d004      	beq.n	8005824 <USB_EPStartXfer+0xf8c>
 800581a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800581e:	3301      	adds	r3, #1
 8005820:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005824:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005828:	b29b      	uxth	r3, r3
 800582a:	029b      	lsls	r3, r3, #10
 800582c:	b29a      	uxth	r2, r3
 800582e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005832:	801a      	strh	r2, [r3, #0]
 8005834:	e04e      	b.n	80058d4 <USB_EPStartXfer+0x103c>
 8005836:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800583a:	095b      	lsrs	r3, r3, #5
 800583c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005840:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005844:	f003 031f 	and.w	r3, r3, #31
 8005848:	2b00      	cmp	r3, #0
 800584a:	d104      	bne.n	8005856 <USB_EPStartXfer+0xfbe>
 800584c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005850:	3b01      	subs	r3, #1
 8005852:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005856:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800585a:	b29b      	uxth	r3, r3
 800585c:	029b      	lsls	r3, r3, #10
 800585e:	b29b      	uxth	r3, r3
 8005860:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005864:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005868:	b29a      	uxth	r2, r3
 800586a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800586e:	801a      	strh	r2, [r3, #0]
 8005870:	e030      	b.n	80058d4 <USB_EPStartXfer+0x103c>
 8005872:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005876:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	785b      	ldrb	r3, [r3, #1]
 800587e:	2b01      	cmp	r3, #1
 8005880:	d128      	bne.n	80058d4 <USB_EPStartXfer+0x103c>
 8005882:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005886:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005890:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005894:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800589e:	b29b      	uxth	r3, r3
 80058a0:	461a      	mov	r2, r3
 80058a2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80058a6:	4413      	add	r3, r2
 80058a8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80058ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058b0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	781b      	ldrb	r3, [r3, #0]
 80058b8:	011a      	lsls	r2, r3, #4
 80058ba:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80058be:	4413      	add	r3, r2
 80058c0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80058c4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80058c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80058cc:	b29a      	uxth	r2, r3
 80058ce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80058d2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80058d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058d8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	891b      	ldrh	r3, [r3, #8]
 80058e0:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80058e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058e8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	6959      	ldr	r1, [r3, #20]
 80058f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80058f4:	b29b      	uxth	r3, r3
 80058f6:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80058fa:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80058fe:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005902:	6800      	ldr	r0, [r0, #0]
 8005904:	f000 ff3e 	bl	8006784 <USB_WritePMA>
          ep->xfer_buff += len;
 8005908:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800590c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	695a      	ldr	r2, [r3, #20]
 8005914:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005918:	441a      	add	r2, r3
 800591a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800591e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8005926:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800592a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	6a1a      	ldr	r2, [r3, #32]
 8005932:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005936:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	691b      	ldr	r3, [r3, #16]
 800593e:	429a      	cmp	r2, r3
 8005940:	d90f      	bls.n	8005962 <USB_EPStartXfer+0x10ca>
          {
            ep->xfer_len_db -= len;
 8005942:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005946:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	6a1a      	ldr	r2, [r3, #32]
 800594e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005952:	1ad2      	subs	r2, r2, r3
 8005954:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005958:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	621a      	str	r2, [r3, #32]
 8005960:	e00e      	b.n	8005980 <USB_EPStartXfer+0x10e8>
          }
          else
          {
            len = ep->xfer_len_db;
 8005962:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005966:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	6a1b      	ldr	r3, [r3, #32]
 800596e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8005972:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005976:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	2200      	movs	r2, #0
 800597e:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8005980:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005984:	2b00      	cmp	r3, #0
 8005986:	f000 80cc 	beq.w	8005b22 <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800598a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800598e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005998:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800599c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	785b      	ldrb	r3, [r3, #1]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d178      	bne.n	8005a9a <USB_EPStartXfer+0x1202>
 80059a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059ac:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80059b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059ba:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80059c4:	b29b      	uxth	r3, r3
 80059c6:	461a      	mov	r2, r3
 80059c8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80059cc:	4413      	add	r3, r2
 80059ce:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80059d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059d6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	781b      	ldrb	r3, [r3, #0]
 80059de:	011a      	lsls	r2, r3, #4
 80059e0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80059e4:	4413      	add	r3, r2
 80059e6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80059ea:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80059ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d116      	bne.n	8005a24 <USB_EPStartXfer+0x118c>
 80059f6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80059fa:	881b      	ldrh	r3, [r3, #0]
 80059fc:	b29b      	uxth	r3, r3
 80059fe:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005a02:	b29a      	uxth	r2, r3
 8005a04:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005a08:	801a      	strh	r2, [r3, #0]
 8005a0a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005a0e:	881b      	ldrh	r3, [r3, #0]
 8005a10:	b29b      	uxth	r3, r3
 8005a12:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a16:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a1a:	b29a      	uxth	r2, r3
 8005a1c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005a20:	801a      	strh	r2, [r3, #0]
 8005a22:	e064      	b.n	8005aee <USB_EPStartXfer+0x1256>
 8005a24:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a28:	2b3e      	cmp	r3, #62	; 0x3e
 8005a2a:	d818      	bhi.n	8005a5e <USB_EPStartXfer+0x11c6>
 8005a2c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a30:	085b      	lsrs	r3, r3, #1
 8005a32:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005a36:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a3a:	f003 0301 	and.w	r3, r3, #1
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d004      	beq.n	8005a4c <USB_EPStartXfer+0x11b4>
 8005a42:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005a46:	3301      	adds	r3, #1
 8005a48:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005a4c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005a50:	b29b      	uxth	r3, r3
 8005a52:	029b      	lsls	r3, r3, #10
 8005a54:	b29a      	uxth	r2, r3
 8005a56:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005a5a:	801a      	strh	r2, [r3, #0]
 8005a5c:	e047      	b.n	8005aee <USB_EPStartXfer+0x1256>
 8005a5e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a62:	095b      	lsrs	r3, r3, #5
 8005a64:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005a68:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a6c:	f003 031f 	and.w	r3, r3, #31
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d104      	bne.n	8005a7e <USB_EPStartXfer+0x11e6>
 8005a74:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005a78:	3b01      	subs	r3, #1
 8005a7a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005a7e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005a82:	b29b      	uxth	r3, r3
 8005a84:	029b      	lsls	r3, r3, #10
 8005a86:	b29b      	uxth	r3, r3
 8005a88:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a8c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a90:	b29a      	uxth	r2, r3
 8005a92:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005a96:	801a      	strh	r2, [r3, #0]
 8005a98:	e029      	b.n	8005aee <USB_EPStartXfer+0x1256>
 8005a9a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a9e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	785b      	ldrb	r3, [r3, #1]
 8005aa6:	2b01      	cmp	r3, #1
 8005aa8:	d121      	bne.n	8005aee <USB_EPStartXfer+0x1256>
 8005aaa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005aae:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ab8:	b29b      	uxth	r3, r3
 8005aba:	461a      	mov	r2, r3
 8005abc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005ac0:	4413      	add	r3, r2
 8005ac2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005ac6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005aca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	781b      	ldrb	r3, [r3, #0]
 8005ad2:	011a      	lsls	r2, r3, #4
 8005ad4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005ad8:	4413      	add	r3, r2
 8005ada:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005ade:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005ae2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ae6:	b29a      	uxth	r2, r3
 8005ae8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005aec:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005aee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005af2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	895b      	ldrh	r3, [r3, #10]
 8005afa:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005afe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b02:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	6959      	ldr	r1, [r3, #20]
 8005b0a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b0e:	b29b      	uxth	r3, r3
 8005b10:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005b14:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005b18:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005b1c:	6800      	ldr	r0, [r0, #0]
 8005b1e:	f000 fe31 	bl	8006784 <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8005b22:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b26:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005b2a:	681a      	ldr	r2, [r3, #0]
 8005b2c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b30:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	781b      	ldrb	r3, [r3, #0]
 8005b38:	009b      	lsls	r3, r3, #2
 8005b3a:	4413      	add	r3, r2
 8005b3c:	881b      	ldrh	r3, [r3, #0]
 8005b3e:	b29b      	uxth	r3, r3
 8005b40:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005b44:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8005b48:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b4c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b50:	8013      	strh	r3, [r2, #0]
 8005b52:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b56:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8005b5a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005b5e:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8005b62:	8812      	ldrh	r2, [r2, #0]
 8005b64:	f082 0210 	eor.w	r2, r2, #16
 8005b68:	801a      	strh	r2, [r3, #0]
 8005b6a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b6e:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8005b72:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005b76:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8005b7a:	8812      	ldrh	r2, [r2, #0]
 8005b7c:	f082 0220 	eor.w	r2, r2, #32
 8005b80:	801a      	strh	r2, [r3, #0]
 8005b82:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b86:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005b8a:	681a      	ldr	r2, [r3, #0]
 8005b8c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b90:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	781b      	ldrb	r3, [r3, #0]
 8005b98:	009b      	lsls	r3, r3, #2
 8005b9a:	441a      	add	r2, r3
 8005b9c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ba0:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8005ba4:	881b      	ldrh	r3, [r3, #0]
 8005ba6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005baa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005bae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005bb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005bb6:	b29b      	uxth	r3, r3
 8005bb8:	8013      	strh	r3, [r2, #0]
 8005bba:	f000 bc9f 	b.w	80064fc <USB_EPStartXfer+0x1c64>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8005bbe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005bc2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	7b1b      	ldrb	r3, [r3, #12]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	f040 80ae 	bne.w	8005d2c <USB_EPStartXfer+0x1494>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8005bd0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005bd4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	699a      	ldr	r2, [r3, #24]
 8005bdc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005be0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	691b      	ldr	r3, [r3, #16]
 8005be8:	429a      	cmp	r2, r3
 8005bea:	d917      	bls.n	8005c1c <USB_EPStartXfer+0x1384>
      {
        len = ep->maxpacket;
 8005bec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005bf0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	691b      	ldr	r3, [r3, #16]
 8005bf8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 8005bfc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c00:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	699a      	ldr	r2, [r3, #24]
 8005c08:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c0c:	1ad2      	subs	r2, r2, r3
 8005c0e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c12:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	619a      	str	r2, [r3, #24]
 8005c1a:	e00e      	b.n	8005c3a <USB_EPStartXfer+0x13a2>
      }
      else
      {
        len = ep->xfer_len;
 8005c1c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c20:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	699b      	ldr	r3, [r3, #24]
 8005c28:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 8005c2c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c30:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	2200      	movs	r2, #0
 8005c38:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8005c3a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c3e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005c48:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c4c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c56:	b29b      	uxth	r3, r3
 8005c58:	461a      	mov	r2, r3
 8005c5a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005c5e:	4413      	add	r3, r2
 8005c60:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005c64:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c68:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	781b      	ldrb	r3, [r3, #0]
 8005c70:	011a      	lsls	r2, r3, #4
 8005c72:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005c76:	4413      	add	r3, r2
 8005c78:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005c7c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005c80:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d116      	bne.n	8005cb6 <USB_EPStartXfer+0x141e>
 8005c88:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005c8c:	881b      	ldrh	r3, [r3, #0]
 8005c8e:	b29b      	uxth	r3, r3
 8005c90:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005c94:	b29a      	uxth	r2, r3
 8005c96:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005c9a:	801a      	strh	r2, [r3, #0]
 8005c9c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005ca0:	881b      	ldrh	r3, [r3, #0]
 8005ca2:	b29b      	uxth	r3, r3
 8005ca4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ca8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005cac:	b29a      	uxth	r2, r3
 8005cae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005cb2:	801a      	strh	r2, [r3, #0]
 8005cb4:	e3e8      	b.n	8006488 <USB_EPStartXfer+0x1bf0>
 8005cb6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005cba:	2b3e      	cmp	r3, #62	; 0x3e
 8005cbc:	d818      	bhi.n	8005cf0 <USB_EPStartXfer+0x1458>
 8005cbe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005cc2:	085b      	lsrs	r3, r3, #1
 8005cc4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005cc8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ccc:	f003 0301 	and.w	r3, r3, #1
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d004      	beq.n	8005cde <USB_EPStartXfer+0x1446>
 8005cd4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005cd8:	3301      	adds	r3, #1
 8005cda:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005cde:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005ce2:	b29b      	uxth	r3, r3
 8005ce4:	029b      	lsls	r3, r3, #10
 8005ce6:	b29a      	uxth	r2, r3
 8005ce8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005cec:	801a      	strh	r2, [r3, #0]
 8005cee:	e3cb      	b.n	8006488 <USB_EPStartXfer+0x1bf0>
 8005cf0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005cf4:	095b      	lsrs	r3, r3, #5
 8005cf6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005cfa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005cfe:	f003 031f 	and.w	r3, r3, #31
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d104      	bne.n	8005d10 <USB_EPStartXfer+0x1478>
 8005d06:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005d0a:	3b01      	subs	r3, #1
 8005d0c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005d10:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005d14:	b29b      	uxth	r3, r3
 8005d16:	029b      	lsls	r3, r3, #10
 8005d18:	b29b      	uxth	r3, r3
 8005d1a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d1e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d22:	b29a      	uxth	r2, r3
 8005d24:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005d28:	801a      	strh	r2, [r3, #0]
 8005d2a:	e3ad      	b.n	8006488 <USB_EPStartXfer+0x1bf0>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8005d2c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d30:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	78db      	ldrb	r3, [r3, #3]
 8005d38:	2b02      	cmp	r3, #2
 8005d3a:	f040 8200 	bne.w	800613e <USB_EPStartXfer+0x18a6>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8005d3e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d42:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	785b      	ldrb	r3, [r3, #1]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	f040 8091 	bne.w	8005e72 <USB_EPStartXfer+0x15da>
 8005d50:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d54:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005d5e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d62:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d6c:	b29b      	uxth	r3, r3
 8005d6e:	461a      	mov	r2, r3
 8005d70:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005d74:	4413      	add	r3, r2
 8005d76:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005d7a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d7e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	781b      	ldrb	r3, [r3, #0]
 8005d86:	011a      	lsls	r2, r3, #4
 8005d88:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005d8c:	4413      	add	r3, r2
 8005d8e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005d92:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005d96:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d9a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	691b      	ldr	r3, [r3, #16]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d116      	bne.n	8005dd4 <USB_EPStartXfer+0x153c>
 8005da6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005daa:	881b      	ldrh	r3, [r3, #0]
 8005dac:	b29b      	uxth	r3, r3
 8005dae:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005db2:	b29a      	uxth	r2, r3
 8005db4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005db8:	801a      	strh	r2, [r3, #0]
 8005dba:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005dbe:	881b      	ldrh	r3, [r3, #0]
 8005dc0:	b29b      	uxth	r3, r3
 8005dc2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005dc6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005dca:	b29a      	uxth	r2, r3
 8005dcc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005dd0:	801a      	strh	r2, [r3, #0]
 8005dd2:	e083      	b.n	8005edc <USB_EPStartXfer+0x1644>
 8005dd4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005dd8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	691b      	ldr	r3, [r3, #16]
 8005de0:	2b3e      	cmp	r3, #62	; 0x3e
 8005de2:	d820      	bhi.n	8005e26 <USB_EPStartXfer+0x158e>
 8005de4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005de8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	691b      	ldr	r3, [r3, #16]
 8005df0:	085b      	lsrs	r3, r3, #1
 8005df2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005df6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005dfa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	691b      	ldr	r3, [r3, #16]
 8005e02:	f003 0301 	and.w	r3, r3, #1
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d004      	beq.n	8005e14 <USB_EPStartXfer+0x157c>
 8005e0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e0e:	3301      	adds	r3, #1
 8005e10:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005e14:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e18:	b29b      	uxth	r3, r3
 8005e1a:	029b      	lsls	r3, r3, #10
 8005e1c:	b29a      	uxth	r2, r3
 8005e1e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005e22:	801a      	strh	r2, [r3, #0]
 8005e24:	e05a      	b.n	8005edc <USB_EPStartXfer+0x1644>
 8005e26:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e2a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	691b      	ldr	r3, [r3, #16]
 8005e32:	095b      	lsrs	r3, r3, #5
 8005e34:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005e38:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e3c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	691b      	ldr	r3, [r3, #16]
 8005e44:	f003 031f 	and.w	r3, r3, #31
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d104      	bne.n	8005e56 <USB_EPStartXfer+0x15be>
 8005e4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e50:	3b01      	subs	r3, #1
 8005e52:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005e56:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e5a:	b29b      	uxth	r3, r3
 8005e5c:	029b      	lsls	r3, r3, #10
 8005e5e:	b29b      	uxth	r3, r3
 8005e60:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e64:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e68:	b29a      	uxth	r2, r3
 8005e6a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005e6e:	801a      	strh	r2, [r3, #0]
 8005e70:	e034      	b.n	8005edc <USB_EPStartXfer+0x1644>
 8005e72:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e76:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	785b      	ldrb	r3, [r3, #1]
 8005e7e:	2b01      	cmp	r3, #1
 8005e80:	d12c      	bne.n	8005edc <USB_EPStartXfer+0x1644>
 8005e82:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e86:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005e90:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e94:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e9e:	b29b      	uxth	r3, r3
 8005ea0:	461a      	mov	r2, r3
 8005ea2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005ea6:	4413      	add	r3, r2
 8005ea8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005eac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005eb0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	781b      	ldrb	r3, [r3, #0]
 8005eb8:	011a      	lsls	r2, r3, #4
 8005eba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005ebe:	4413      	add	r3, r2
 8005ec0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005ec4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005ec8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ecc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	691b      	ldr	r3, [r3, #16]
 8005ed4:	b29a      	uxth	r2, r3
 8005ed6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005eda:	801a      	strh	r2, [r3, #0]
 8005edc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ee0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005eea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005eee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	785b      	ldrb	r3, [r3, #1]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	f040 8091 	bne.w	800601e <USB_EPStartXfer+0x1786>
 8005efc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f00:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005f0a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f0e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f18:	b29b      	uxth	r3, r3
 8005f1a:	461a      	mov	r2, r3
 8005f1c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005f20:	4413      	add	r3, r2
 8005f22:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005f26:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f2a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	781b      	ldrb	r3, [r3, #0]
 8005f32:	011a      	lsls	r2, r3, #4
 8005f34:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005f38:	4413      	add	r3, r2
 8005f3a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005f3e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005f42:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f46:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	691b      	ldr	r3, [r3, #16]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d116      	bne.n	8005f80 <USB_EPStartXfer+0x16e8>
 8005f52:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005f56:	881b      	ldrh	r3, [r3, #0]
 8005f58:	b29b      	uxth	r3, r3
 8005f5a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005f5e:	b29a      	uxth	r2, r3
 8005f60:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005f64:	801a      	strh	r2, [r3, #0]
 8005f66:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005f6a:	881b      	ldrh	r3, [r3, #0]
 8005f6c:	b29b      	uxth	r3, r3
 8005f6e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f72:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f76:	b29a      	uxth	r2, r3
 8005f78:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005f7c:	801a      	strh	r2, [r3, #0]
 8005f7e:	e07c      	b.n	800607a <USB_EPStartXfer+0x17e2>
 8005f80:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f84:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	691b      	ldr	r3, [r3, #16]
 8005f8c:	2b3e      	cmp	r3, #62	; 0x3e
 8005f8e:	d820      	bhi.n	8005fd2 <USB_EPStartXfer+0x173a>
 8005f90:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f94:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	691b      	ldr	r3, [r3, #16]
 8005f9c:	085b      	lsrs	r3, r3, #1
 8005f9e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005fa2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fa6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	691b      	ldr	r3, [r3, #16]
 8005fae:	f003 0301 	and.w	r3, r3, #1
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d004      	beq.n	8005fc0 <USB_EPStartXfer+0x1728>
 8005fb6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005fba:	3301      	adds	r3, #1
 8005fbc:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005fc0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005fc4:	b29b      	uxth	r3, r3
 8005fc6:	029b      	lsls	r3, r3, #10
 8005fc8:	b29a      	uxth	r2, r3
 8005fca:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005fce:	801a      	strh	r2, [r3, #0]
 8005fd0:	e053      	b.n	800607a <USB_EPStartXfer+0x17e2>
 8005fd2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fd6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	691b      	ldr	r3, [r3, #16]
 8005fde:	095b      	lsrs	r3, r3, #5
 8005fe0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005fe4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fe8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	691b      	ldr	r3, [r3, #16]
 8005ff0:	f003 031f 	and.w	r3, r3, #31
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d104      	bne.n	8006002 <USB_EPStartXfer+0x176a>
 8005ff8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005ffc:	3b01      	subs	r3, #1
 8005ffe:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006002:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006006:	b29b      	uxth	r3, r3
 8006008:	029b      	lsls	r3, r3, #10
 800600a:	b29b      	uxth	r3, r3
 800600c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006010:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006014:	b29a      	uxth	r2, r3
 8006016:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800601a:	801a      	strh	r2, [r3, #0]
 800601c:	e02d      	b.n	800607a <USB_EPStartXfer+0x17e2>
 800601e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006022:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	785b      	ldrb	r3, [r3, #1]
 800602a:	2b01      	cmp	r3, #1
 800602c:	d125      	bne.n	800607a <USB_EPStartXfer+0x17e2>
 800602e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006032:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800603c:	b29b      	uxth	r3, r3
 800603e:	461a      	mov	r2, r3
 8006040:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006044:	4413      	add	r3, r2
 8006046:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800604a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800604e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	781b      	ldrb	r3, [r3, #0]
 8006056:	011a      	lsls	r2, r3, #4
 8006058:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800605c:	4413      	add	r3, r2
 800605e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006062:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006066:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800606a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	691b      	ldr	r3, [r3, #16]
 8006072:	b29a      	uxth	r2, r3
 8006074:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006078:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800607a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800607e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	69db      	ldr	r3, [r3, #28]
 8006086:	2b00      	cmp	r3, #0
 8006088:	f000 81fe 	beq.w	8006488 <USB_EPStartXfer+0x1bf0>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800608c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006090:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006094:	681a      	ldr	r2, [r3, #0]
 8006096:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800609a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	781b      	ldrb	r3, [r3, #0]
 80060a2:	009b      	lsls	r3, r3, #2
 80060a4:	4413      	add	r3, r2
 80060a6:	881b      	ldrh	r3, [r3, #0]
 80060a8:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80060ac:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80060b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d005      	beq.n	80060c4 <USB_EPStartXfer+0x182c>
 80060b8:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80060bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d10d      	bne.n	80060e0 <USB_EPStartXfer+0x1848>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80060c4:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80060c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	f040 81db 	bne.w	8006488 <USB_EPStartXfer+0x1bf0>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80060d2:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80060d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060da:	2b00      	cmp	r3, #0
 80060dc:	f040 81d4 	bne.w	8006488 <USB_EPStartXfer+0x1bf0>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 80060e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060e4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80060e8:	681a      	ldr	r2, [r3, #0]
 80060ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060ee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	781b      	ldrb	r3, [r3, #0]
 80060f6:	009b      	lsls	r3, r3, #2
 80060f8:	4413      	add	r3, r2
 80060fa:	881b      	ldrh	r3, [r3, #0]
 80060fc:	b29b      	uxth	r3, r3
 80060fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006102:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006106:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 800610a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800610e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006112:	681a      	ldr	r2, [r3, #0]
 8006114:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006118:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	781b      	ldrb	r3, [r3, #0]
 8006120:	009b      	lsls	r3, r3, #2
 8006122:	441a      	add	r2, r3
 8006124:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8006128:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800612c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006130:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006134:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006138:	b29b      	uxth	r3, r3
 800613a:	8013      	strh	r3, [r2, #0]
 800613c:	e1a4      	b.n	8006488 <USB_EPStartXfer+0x1bf0>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800613e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006142:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	78db      	ldrb	r3, [r3, #3]
 800614a:	2b01      	cmp	r3, #1
 800614c:	f040 819a 	bne.w	8006484 <USB_EPStartXfer+0x1bec>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8006150:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006154:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	699a      	ldr	r2, [r3, #24]
 800615c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006160:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	691b      	ldr	r3, [r3, #16]
 8006168:	429a      	cmp	r2, r3
 800616a:	d917      	bls.n	800619c <USB_EPStartXfer+0x1904>
        {
          len = ep->maxpacket;
 800616c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006170:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	691b      	ldr	r3, [r3, #16]
 8006178:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 800617c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006180:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	699a      	ldr	r2, [r3, #24]
 8006188:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800618c:	1ad2      	subs	r2, r2, r3
 800618e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006192:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	619a      	str	r2, [r3, #24]
 800619a:	e00e      	b.n	80061ba <USB_EPStartXfer+0x1922>
        }
        else
        {
          len = ep->xfer_len;
 800619c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061a0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	699b      	ldr	r3, [r3, #24]
 80061a8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 80061ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061b0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	2200      	movs	r2, #0
 80061b8:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80061ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061be:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	785b      	ldrb	r3, [r3, #1]
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d178      	bne.n	80062bc <USB_EPStartXfer+0x1a24>
 80061ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061ce:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80061d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061dc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80061e6:	b29b      	uxth	r3, r3
 80061e8:	461a      	mov	r2, r3
 80061ea:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80061ee:	4413      	add	r3, r2
 80061f0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80061f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061f8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	781b      	ldrb	r3, [r3, #0]
 8006200:	011a      	lsls	r2, r3, #4
 8006202:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006206:	4413      	add	r3, r2
 8006208:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800620c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006210:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006214:	2b00      	cmp	r3, #0
 8006216:	d116      	bne.n	8006246 <USB_EPStartXfer+0x19ae>
 8006218:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800621c:	881b      	ldrh	r3, [r3, #0]
 800621e:	b29b      	uxth	r3, r3
 8006220:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006224:	b29a      	uxth	r2, r3
 8006226:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800622a:	801a      	strh	r2, [r3, #0]
 800622c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006230:	881b      	ldrh	r3, [r3, #0]
 8006232:	b29b      	uxth	r3, r3
 8006234:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006238:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800623c:	b29a      	uxth	r2, r3
 800623e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006242:	801a      	strh	r2, [r3, #0]
 8006244:	e06b      	b.n	800631e <USB_EPStartXfer+0x1a86>
 8006246:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800624a:	2b3e      	cmp	r3, #62	; 0x3e
 800624c:	d818      	bhi.n	8006280 <USB_EPStartXfer+0x19e8>
 800624e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006252:	085b      	lsrs	r3, r3, #1
 8006254:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006258:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800625c:	f003 0301 	and.w	r3, r3, #1
 8006260:	2b00      	cmp	r3, #0
 8006262:	d004      	beq.n	800626e <USB_EPStartXfer+0x19d6>
 8006264:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006268:	3301      	adds	r3, #1
 800626a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800626e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006272:	b29b      	uxth	r3, r3
 8006274:	029b      	lsls	r3, r3, #10
 8006276:	b29a      	uxth	r2, r3
 8006278:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800627c:	801a      	strh	r2, [r3, #0]
 800627e:	e04e      	b.n	800631e <USB_EPStartXfer+0x1a86>
 8006280:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006284:	095b      	lsrs	r3, r3, #5
 8006286:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800628a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800628e:	f003 031f 	and.w	r3, r3, #31
 8006292:	2b00      	cmp	r3, #0
 8006294:	d104      	bne.n	80062a0 <USB_EPStartXfer+0x1a08>
 8006296:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800629a:	3b01      	subs	r3, #1
 800629c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80062a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80062a4:	b29b      	uxth	r3, r3
 80062a6:	029b      	lsls	r3, r3, #10
 80062a8:	b29b      	uxth	r3, r3
 80062aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80062ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80062b2:	b29a      	uxth	r2, r3
 80062b4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80062b8:	801a      	strh	r2, [r3, #0]
 80062ba:	e030      	b.n	800631e <USB_EPStartXfer+0x1a86>
 80062bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062c0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	785b      	ldrb	r3, [r3, #1]
 80062c8:	2b01      	cmp	r3, #1
 80062ca:	d128      	bne.n	800631e <USB_EPStartXfer+0x1a86>
 80062cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062d0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80062da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062de:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80062e8:	b29b      	uxth	r3, r3
 80062ea:	461a      	mov	r2, r3
 80062ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062f0:	4413      	add	r3, r2
 80062f2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80062f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062fa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	781b      	ldrb	r3, [r3, #0]
 8006302:	011a      	lsls	r2, r3, #4
 8006304:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006308:	4413      	add	r3, r2
 800630a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800630e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006312:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006316:	b29a      	uxth	r2, r3
 8006318:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800631c:	801a      	strh	r2, [r3, #0]
 800631e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006322:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800632c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006330:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	785b      	ldrb	r3, [r3, #1]
 8006338:	2b00      	cmp	r3, #0
 800633a:	d178      	bne.n	800642e <USB_EPStartXfer+0x1b96>
 800633c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006340:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800634a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800634e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006358:	b29b      	uxth	r3, r3
 800635a:	461a      	mov	r2, r3
 800635c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006360:	4413      	add	r3, r2
 8006362:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006366:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800636a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	781b      	ldrb	r3, [r3, #0]
 8006372:	011a      	lsls	r2, r3, #4
 8006374:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006378:	4413      	add	r3, r2
 800637a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800637e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006382:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006386:	2b00      	cmp	r3, #0
 8006388:	d116      	bne.n	80063b8 <USB_EPStartXfer+0x1b20>
 800638a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800638e:	881b      	ldrh	r3, [r3, #0]
 8006390:	b29b      	uxth	r3, r3
 8006392:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006396:	b29a      	uxth	r2, r3
 8006398:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800639c:	801a      	strh	r2, [r3, #0]
 800639e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80063a2:	881b      	ldrh	r3, [r3, #0]
 80063a4:	b29b      	uxth	r3, r3
 80063a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80063aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80063ae:	b29a      	uxth	r2, r3
 80063b0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80063b4:	801a      	strh	r2, [r3, #0]
 80063b6:	e067      	b.n	8006488 <USB_EPStartXfer+0x1bf0>
 80063b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80063bc:	2b3e      	cmp	r3, #62	; 0x3e
 80063be:	d818      	bhi.n	80063f2 <USB_EPStartXfer+0x1b5a>
 80063c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80063c4:	085b      	lsrs	r3, r3, #1
 80063c6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80063ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80063ce:	f003 0301 	and.w	r3, r3, #1
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d004      	beq.n	80063e0 <USB_EPStartXfer+0x1b48>
 80063d6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80063da:	3301      	adds	r3, #1
 80063dc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80063e0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80063e4:	b29b      	uxth	r3, r3
 80063e6:	029b      	lsls	r3, r3, #10
 80063e8:	b29a      	uxth	r2, r3
 80063ea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80063ee:	801a      	strh	r2, [r3, #0]
 80063f0:	e04a      	b.n	8006488 <USB_EPStartXfer+0x1bf0>
 80063f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80063f6:	095b      	lsrs	r3, r3, #5
 80063f8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80063fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006400:	f003 031f 	and.w	r3, r3, #31
 8006404:	2b00      	cmp	r3, #0
 8006406:	d104      	bne.n	8006412 <USB_EPStartXfer+0x1b7a>
 8006408:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800640c:	3b01      	subs	r3, #1
 800640e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006412:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006416:	b29b      	uxth	r3, r3
 8006418:	029b      	lsls	r3, r3, #10
 800641a:	b29b      	uxth	r3, r3
 800641c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006420:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006424:	b29a      	uxth	r2, r3
 8006426:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800642a:	801a      	strh	r2, [r3, #0]
 800642c:	e02c      	b.n	8006488 <USB_EPStartXfer+0x1bf0>
 800642e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006432:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	785b      	ldrb	r3, [r3, #1]
 800643a:	2b01      	cmp	r3, #1
 800643c:	d124      	bne.n	8006488 <USB_EPStartXfer+0x1bf0>
 800643e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006442:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800644c:	b29b      	uxth	r3, r3
 800644e:	461a      	mov	r2, r3
 8006450:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006454:	4413      	add	r3, r2
 8006456:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800645a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800645e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	781b      	ldrb	r3, [r3, #0]
 8006466:	011a      	lsls	r2, r3, #4
 8006468:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800646c:	4413      	add	r3, r2
 800646e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006472:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006476:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800647a:	b29a      	uxth	r2, r3
 800647c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006480:	801a      	strh	r2, [r3, #0]
 8006482:	e001      	b.n	8006488 <USB_EPStartXfer+0x1bf0>
      }
      else
      {
        return HAL_ERROR;
 8006484:	2301      	movs	r3, #1
 8006486:	e03a      	b.n	80064fe <USB_EPStartXfer+0x1c66>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006488:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800648c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006490:	681a      	ldr	r2, [r3, #0]
 8006492:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006496:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	781b      	ldrb	r3, [r3, #0]
 800649e:	009b      	lsls	r3, r3, #2
 80064a0:	4413      	add	r3, r2
 80064a2:	881b      	ldrh	r3, [r3, #0]
 80064a4:	b29b      	uxth	r3, r3
 80064a6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80064aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064ae:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 80064b2:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80064b6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80064ba:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 80064be:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80064c2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80064c6:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 80064ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064ce:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80064d2:	681a      	ldr	r2, [r3, #0]
 80064d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064d8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	781b      	ldrb	r3, [r3, #0]
 80064e0:	009b      	lsls	r3, r3, #2
 80064e2:	441a      	add	r2, r3
 80064e4:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80064e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80064ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80064f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80064f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064f8:	b29b      	uxth	r3, r3
 80064fa:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80064fc:	2300      	movs	r3, #0
}
 80064fe:	4618      	mov	r0, r3
 8006500:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8006504:	46bd      	mov	sp, r7
 8006506:	bd80      	pop	{r7, pc}

08006508 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006508:	b480      	push	{r7}
 800650a:	b085      	sub	sp, #20
 800650c:	af00      	add	r7, sp, #0
 800650e:	6078      	str	r0, [r7, #4]
 8006510:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8006512:	683b      	ldr	r3, [r7, #0]
 8006514:	785b      	ldrb	r3, [r3, #1]
 8006516:	2b00      	cmp	r3, #0
 8006518:	d020      	beq.n	800655c <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800651a:	687a      	ldr	r2, [r7, #4]
 800651c:	683b      	ldr	r3, [r7, #0]
 800651e:	781b      	ldrb	r3, [r3, #0]
 8006520:	009b      	lsls	r3, r3, #2
 8006522:	4413      	add	r3, r2
 8006524:	881b      	ldrh	r3, [r3, #0]
 8006526:	b29b      	uxth	r3, r3
 8006528:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800652c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006530:	81bb      	strh	r3, [r7, #12]
 8006532:	89bb      	ldrh	r3, [r7, #12]
 8006534:	f083 0310 	eor.w	r3, r3, #16
 8006538:	81bb      	strh	r3, [r7, #12]
 800653a:	687a      	ldr	r2, [r7, #4]
 800653c:	683b      	ldr	r3, [r7, #0]
 800653e:	781b      	ldrb	r3, [r3, #0]
 8006540:	009b      	lsls	r3, r3, #2
 8006542:	441a      	add	r2, r3
 8006544:	89bb      	ldrh	r3, [r7, #12]
 8006546:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800654a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800654e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006552:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006556:	b29b      	uxth	r3, r3
 8006558:	8013      	strh	r3, [r2, #0]
 800655a:	e01f      	b.n	800659c <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800655c:	687a      	ldr	r2, [r7, #4]
 800655e:	683b      	ldr	r3, [r7, #0]
 8006560:	781b      	ldrb	r3, [r3, #0]
 8006562:	009b      	lsls	r3, r3, #2
 8006564:	4413      	add	r3, r2
 8006566:	881b      	ldrh	r3, [r3, #0]
 8006568:	b29b      	uxth	r3, r3
 800656a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800656e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006572:	81fb      	strh	r3, [r7, #14]
 8006574:	89fb      	ldrh	r3, [r7, #14]
 8006576:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800657a:	81fb      	strh	r3, [r7, #14]
 800657c:	687a      	ldr	r2, [r7, #4]
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	781b      	ldrb	r3, [r3, #0]
 8006582:	009b      	lsls	r3, r3, #2
 8006584:	441a      	add	r2, r3
 8006586:	89fb      	ldrh	r3, [r7, #14]
 8006588:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800658c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006590:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006594:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006598:	b29b      	uxth	r3, r3
 800659a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800659c:	2300      	movs	r3, #0
}
 800659e:	4618      	mov	r0, r3
 80065a0:	3714      	adds	r7, #20
 80065a2:	46bd      	mov	sp, r7
 80065a4:	bc80      	pop	{r7}
 80065a6:	4770      	bx	lr

080065a8 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80065a8:	b480      	push	{r7}
 80065aa:	b087      	sub	sp, #28
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]
 80065b0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80065b2:	683b      	ldr	r3, [r7, #0]
 80065b4:	7b1b      	ldrb	r3, [r3, #12]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	f040 809d 	bne.w	80066f6 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80065bc:	683b      	ldr	r3, [r7, #0]
 80065be:	785b      	ldrb	r3, [r3, #1]
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d04c      	beq.n	800665e <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80065c4:	687a      	ldr	r2, [r7, #4]
 80065c6:	683b      	ldr	r3, [r7, #0]
 80065c8:	781b      	ldrb	r3, [r3, #0]
 80065ca:	009b      	lsls	r3, r3, #2
 80065cc:	4413      	add	r3, r2
 80065ce:	881b      	ldrh	r3, [r3, #0]
 80065d0:	823b      	strh	r3, [r7, #16]
 80065d2:	8a3b      	ldrh	r3, [r7, #16]
 80065d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d01b      	beq.n	8006614 <USB_EPClearStall+0x6c>
 80065dc:	687a      	ldr	r2, [r7, #4]
 80065de:	683b      	ldr	r3, [r7, #0]
 80065e0:	781b      	ldrb	r3, [r3, #0]
 80065e2:	009b      	lsls	r3, r3, #2
 80065e4:	4413      	add	r3, r2
 80065e6:	881b      	ldrh	r3, [r3, #0]
 80065e8:	b29b      	uxth	r3, r3
 80065ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80065ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065f2:	81fb      	strh	r3, [r7, #14]
 80065f4:	687a      	ldr	r2, [r7, #4]
 80065f6:	683b      	ldr	r3, [r7, #0]
 80065f8:	781b      	ldrb	r3, [r3, #0]
 80065fa:	009b      	lsls	r3, r3, #2
 80065fc:	441a      	add	r2, r3
 80065fe:	89fb      	ldrh	r3, [r7, #14]
 8006600:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006604:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006608:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800660c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006610:	b29b      	uxth	r3, r3
 8006612:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006614:	683b      	ldr	r3, [r7, #0]
 8006616:	78db      	ldrb	r3, [r3, #3]
 8006618:	2b01      	cmp	r3, #1
 800661a:	d06c      	beq.n	80066f6 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800661c:	687a      	ldr	r2, [r7, #4]
 800661e:	683b      	ldr	r3, [r7, #0]
 8006620:	781b      	ldrb	r3, [r3, #0]
 8006622:	009b      	lsls	r3, r3, #2
 8006624:	4413      	add	r3, r2
 8006626:	881b      	ldrh	r3, [r3, #0]
 8006628:	b29b      	uxth	r3, r3
 800662a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800662e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006632:	81bb      	strh	r3, [r7, #12]
 8006634:	89bb      	ldrh	r3, [r7, #12]
 8006636:	f083 0320 	eor.w	r3, r3, #32
 800663a:	81bb      	strh	r3, [r7, #12]
 800663c:	687a      	ldr	r2, [r7, #4]
 800663e:	683b      	ldr	r3, [r7, #0]
 8006640:	781b      	ldrb	r3, [r3, #0]
 8006642:	009b      	lsls	r3, r3, #2
 8006644:	441a      	add	r2, r3
 8006646:	89bb      	ldrh	r3, [r7, #12]
 8006648:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800664c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006650:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006654:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006658:	b29b      	uxth	r3, r3
 800665a:	8013      	strh	r3, [r2, #0]
 800665c:	e04b      	b.n	80066f6 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800665e:	687a      	ldr	r2, [r7, #4]
 8006660:	683b      	ldr	r3, [r7, #0]
 8006662:	781b      	ldrb	r3, [r3, #0]
 8006664:	009b      	lsls	r3, r3, #2
 8006666:	4413      	add	r3, r2
 8006668:	881b      	ldrh	r3, [r3, #0]
 800666a:	82fb      	strh	r3, [r7, #22]
 800666c:	8afb      	ldrh	r3, [r7, #22]
 800666e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006672:	2b00      	cmp	r3, #0
 8006674:	d01b      	beq.n	80066ae <USB_EPClearStall+0x106>
 8006676:	687a      	ldr	r2, [r7, #4]
 8006678:	683b      	ldr	r3, [r7, #0]
 800667a:	781b      	ldrb	r3, [r3, #0]
 800667c:	009b      	lsls	r3, r3, #2
 800667e:	4413      	add	r3, r2
 8006680:	881b      	ldrh	r3, [r3, #0]
 8006682:	b29b      	uxth	r3, r3
 8006684:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006688:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800668c:	82bb      	strh	r3, [r7, #20]
 800668e:	687a      	ldr	r2, [r7, #4]
 8006690:	683b      	ldr	r3, [r7, #0]
 8006692:	781b      	ldrb	r3, [r3, #0]
 8006694:	009b      	lsls	r3, r3, #2
 8006696:	441a      	add	r2, r3
 8006698:	8abb      	ldrh	r3, [r7, #20]
 800669a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800669e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80066a2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80066a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066aa:	b29b      	uxth	r3, r3
 80066ac:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80066ae:	687a      	ldr	r2, [r7, #4]
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	781b      	ldrb	r3, [r3, #0]
 80066b4:	009b      	lsls	r3, r3, #2
 80066b6:	4413      	add	r3, r2
 80066b8:	881b      	ldrh	r3, [r3, #0]
 80066ba:	b29b      	uxth	r3, r3
 80066bc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80066c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066c4:	827b      	strh	r3, [r7, #18]
 80066c6:	8a7b      	ldrh	r3, [r7, #18]
 80066c8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80066cc:	827b      	strh	r3, [r7, #18]
 80066ce:	8a7b      	ldrh	r3, [r7, #18]
 80066d0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80066d4:	827b      	strh	r3, [r7, #18]
 80066d6:	687a      	ldr	r2, [r7, #4]
 80066d8:	683b      	ldr	r3, [r7, #0]
 80066da:	781b      	ldrb	r3, [r3, #0]
 80066dc:	009b      	lsls	r3, r3, #2
 80066de:	441a      	add	r2, r3
 80066e0:	8a7b      	ldrh	r3, [r7, #18]
 80066e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80066e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80066ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80066ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066f2:	b29b      	uxth	r3, r3
 80066f4:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80066f6:	2300      	movs	r3, #0
}
 80066f8:	4618      	mov	r0, r3
 80066fa:	371c      	adds	r7, #28
 80066fc:	46bd      	mov	sp, r7
 80066fe:	bc80      	pop	{r7}
 8006700:	4770      	bx	lr

08006702 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8006702:	b480      	push	{r7}
 8006704:	b083      	sub	sp, #12
 8006706:	af00      	add	r7, sp, #0
 8006708:	6078      	str	r0, [r7, #4]
 800670a:	460b      	mov	r3, r1
 800670c:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800670e:	78fb      	ldrb	r3, [r7, #3]
 8006710:	2b00      	cmp	r3, #0
 8006712:	d103      	bne.n	800671c <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2280      	movs	r2, #128	; 0x80
 8006718:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800671c:	2300      	movs	r3, #0
}
 800671e:	4618      	mov	r0, r3
 8006720:	370c      	adds	r7, #12
 8006722:	46bd      	mov	sp, r7
 8006724:	bc80      	pop	{r7}
 8006726:	4770      	bx	lr

08006728 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8006728:	b480      	push	{r7}
 800672a:	b083      	sub	sp, #12
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006730:	2300      	movs	r3, #0
}
 8006732:	4618      	mov	r0, r3
 8006734:	370c      	adds	r7, #12
 8006736:	46bd      	mov	sp, r7
 8006738:	bc80      	pop	{r7}
 800673a:	4770      	bx	lr

0800673c <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800673c:	b480      	push	{r7}
 800673e:	b083      	sub	sp, #12
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006744:	2300      	movs	r3, #0
}
 8006746:	4618      	mov	r0, r3
 8006748:	370c      	adds	r7, #12
 800674a:	46bd      	mov	sp, r7
 800674c:	bc80      	pop	{r7}
 800674e:	4770      	bx	lr

08006750 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8006750:	b480      	push	{r7}
 8006752:	b085      	sub	sp, #20
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800675e:	b29b      	uxth	r3, r3
 8006760:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8006762:	68fb      	ldr	r3, [r7, #12]
}
 8006764:	4618      	mov	r0, r3
 8006766:	3714      	adds	r7, #20
 8006768:	46bd      	mov	sp, r7
 800676a:	bc80      	pop	{r7}
 800676c:	4770      	bx	lr

0800676e <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800676e:	b480      	push	{r7}
 8006770:	b083      	sub	sp, #12
 8006772:	af00      	add	r7, sp, #0
 8006774:	6078      	str	r0, [r7, #4]
 8006776:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006778:	2300      	movs	r3, #0
}
 800677a:	4618      	mov	r0, r3
 800677c:	370c      	adds	r7, #12
 800677e:	46bd      	mov	sp, r7
 8006780:	bc80      	pop	{r7}
 8006782:	4770      	bx	lr

08006784 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006784:	b480      	push	{r7}
 8006786:	b08d      	sub	sp, #52	; 0x34
 8006788:	af00      	add	r7, sp, #0
 800678a:	60f8      	str	r0, [r7, #12]
 800678c:	60b9      	str	r1, [r7, #8]
 800678e:	4611      	mov	r1, r2
 8006790:	461a      	mov	r2, r3
 8006792:	460b      	mov	r3, r1
 8006794:	80fb      	strh	r3, [r7, #6]
 8006796:	4613      	mov	r3, r2
 8006798:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800679a:	88bb      	ldrh	r3, [r7, #4]
 800679c:	3301      	adds	r3, #1
 800679e:	085b      	lsrs	r3, r3, #1
 80067a0:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80067a6:	68bb      	ldr	r3, [r7, #8]
 80067a8:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80067aa:	88fb      	ldrh	r3, [r7, #6]
 80067ac:	005a      	lsls	r2, r3, #1
 80067ae:	69fb      	ldr	r3, [r7, #28]
 80067b0:	4413      	add	r3, r2
 80067b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80067b6:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 80067b8:	6a3b      	ldr	r3, [r7, #32]
 80067ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80067bc:	e01e      	b.n	80067fc <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 80067be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067c0:	781b      	ldrb	r3, [r3, #0]
 80067c2:	61bb      	str	r3, [r7, #24]
    pBuf++;
 80067c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067c6:	3301      	adds	r3, #1
 80067c8:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 80067ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067cc:	781b      	ldrb	r3, [r3, #0]
 80067ce:	b29b      	uxth	r3, r3
 80067d0:	021b      	lsls	r3, r3, #8
 80067d2:	b29b      	uxth	r3, r3
 80067d4:	461a      	mov	r2, r3
 80067d6:	69bb      	ldr	r3, [r7, #24]
 80067d8:	4313      	orrs	r3, r2
 80067da:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 80067dc:	697b      	ldr	r3, [r7, #20]
 80067de:	b29a      	uxth	r2, r3
 80067e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067e2:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80067e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067e6:	3302      	adds	r3, #2
 80067e8:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 80067ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067ec:	3302      	adds	r3, #2
 80067ee:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 80067f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067f2:	3301      	adds	r3, #1
 80067f4:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 80067f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067f8:	3b01      	subs	r3, #1
 80067fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80067fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d1dd      	bne.n	80067be <USB_WritePMA+0x3a>
  }
}
 8006802:	bf00      	nop
 8006804:	bf00      	nop
 8006806:	3734      	adds	r7, #52	; 0x34
 8006808:	46bd      	mov	sp, r7
 800680a:	bc80      	pop	{r7}
 800680c:	4770      	bx	lr

0800680e <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800680e:	b480      	push	{r7}
 8006810:	b08b      	sub	sp, #44	; 0x2c
 8006812:	af00      	add	r7, sp, #0
 8006814:	60f8      	str	r0, [r7, #12]
 8006816:	60b9      	str	r1, [r7, #8]
 8006818:	4611      	mov	r1, r2
 800681a:	461a      	mov	r2, r3
 800681c:	460b      	mov	r3, r1
 800681e:	80fb      	strh	r3, [r7, #6]
 8006820:	4613      	mov	r3, r2
 8006822:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8006824:	88bb      	ldrh	r3, [r7, #4]
 8006826:	085b      	lsrs	r3, r3, #1
 8006828:	b29b      	uxth	r3, r3
 800682a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006830:	68bb      	ldr	r3, [r7, #8]
 8006832:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006834:	88fb      	ldrh	r3, [r7, #6]
 8006836:	005a      	lsls	r2, r3, #1
 8006838:	697b      	ldr	r3, [r7, #20]
 800683a:	4413      	add	r3, r2
 800683c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006840:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8006842:	69bb      	ldr	r3, [r7, #24]
 8006844:	627b      	str	r3, [r7, #36]	; 0x24
 8006846:	e01b      	b.n	8006880 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8006848:	6a3b      	ldr	r3, [r7, #32]
 800684a:	881b      	ldrh	r3, [r3, #0]
 800684c:	b29b      	uxth	r3, r3
 800684e:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8006850:	6a3b      	ldr	r3, [r7, #32]
 8006852:	3302      	adds	r3, #2
 8006854:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006856:	693b      	ldr	r3, [r7, #16]
 8006858:	b2da      	uxtb	r2, r3
 800685a:	69fb      	ldr	r3, [r7, #28]
 800685c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800685e:	69fb      	ldr	r3, [r7, #28]
 8006860:	3301      	adds	r3, #1
 8006862:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8006864:	693b      	ldr	r3, [r7, #16]
 8006866:	0a1b      	lsrs	r3, r3, #8
 8006868:	b2da      	uxtb	r2, r3
 800686a:	69fb      	ldr	r3, [r7, #28]
 800686c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800686e:	69fb      	ldr	r3, [r7, #28]
 8006870:	3301      	adds	r3, #1
 8006872:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8006874:	6a3b      	ldr	r3, [r7, #32]
 8006876:	3302      	adds	r3, #2
 8006878:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 800687a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800687c:	3b01      	subs	r3, #1
 800687e:	627b      	str	r3, [r7, #36]	; 0x24
 8006880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006882:	2b00      	cmp	r3, #0
 8006884:	d1e0      	bne.n	8006848 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8006886:	88bb      	ldrh	r3, [r7, #4]
 8006888:	f003 0301 	and.w	r3, r3, #1
 800688c:	b29b      	uxth	r3, r3
 800688e:	2b00      	cmp	r3, #0
 8006890:	d007      	beq.n	80068a2 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8006892:	6a3b      	ldr	r3, [r7, #32]
 8006894:	881b      	ldrh	r3, [r3, #0]
 8006896:	b29b      	uxth	r3, r3
 8006898:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800689a:	693b      	ldr	r3, [r7, #16]
 800689c:	b2da      	uxtb	r2, r3
 800689e:	69fb      	ldr	r3, [r7, #28]
 80068a0:	701a      	strb	r2, [r3, #0]
  }
}
 80068a2:	bf00      	nop
 80068a4:	372c      	adds	r7, #44	; 0x2c
 80068a6:	46bd      	mov	sp, r7
 80068a8:	bc80      	pop	{r7}
 80068aa:	4770      	bx	lr

080068ac <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80068ac:	b580      	push	{r7, lr}
 80068ae:	b084      	sub	sp, #16
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	6078      	str	r0, [r7, #4]
 80068b4:	460b      	mov	r3, r1
 80068b6:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80068b8:	2300      	movs	r3, #0
 80068ba:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	7c1b      	ldrb	r3, [r3, #16]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d115      	bne.n	80068f0 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80068c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80068c8:	2202      	movs	r2, #2
 80068ca:	2181      	movs	r1, #129	; 0x81
 80068cc:	6878      	ldr	r0, [r7, #4]
 80068ce:	f001 feb6 	bl	800863e <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	2201      	movs	r2, #1
 80068d6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80068d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80068dc:	2202      	movs	r2, #2
 80068de:	2101      	movs	r1, #1
 80068e0:	6878      	ldr	r0, [r7, #4]
 80068e2:	f001 feac 	bl	800863e <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	2201      	movs	r2, #1
 80068ea:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 80068ee:	e012      	b.n	8006916 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80068f0:	2340      	movs	r3, #64	; 0x40
 80068f2:	2202      	movs	r2, #2
 80068f4:	2181      	movs	r1, #129	; 0x81
 80068f6:	6878      	ldr	r0, [r7, #4]
 80068f8:	f001 fea1 	bl	800863e <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	2201      	movs	r2, #1
 8006900:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006902:	2340      	movs	r3, #64	; 0x40
 8006904:	2202      	movs	r2, #2
 8006906:	2101      	movs	r1, #1
 8006908:	6878      	ldr	r0, [r7, #4]
 800690a:	f001 fe98 	bl	800863e <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	2201      	movs	r2, #1
 8006912:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006916:	2308      	movs	r3, #8
 8006918:	2203      	movs	r2, #3
 800691a:	2182      	movs	r1, #130	; 0x82
 800691c:	6878      	ldr	r0, [r7, #4]
 800691e:	f001 fe8e 	bl	800863e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	2201      	movs	r2, #1
 8006926:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006928:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800692c:	f001 ffae 	bl	800888c <USBD_static_malloc>
 8006930:	4602      	mov	r2, r0
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800693e:	2b00      	cmp	r3, #0
 8006940:	d102      	bne.n	8006948 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8006942:	2301      	movs	r3, #1
 8006944:	73fb      	strb	r3, [r7, #15]
 8006946:	e026      	b.n	8006996 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800694e:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800695a:	68bb      	ldr	r3, [r7, #8]
 800695c:	2200      	movs	r2, #0
 800695e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8006962:	68bb      	ldr	r3, [r7, #8]
 8006964:	2200      	movs	r2, #0
 8006966:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	7c1b      	ldrb	r3, [r3, #16]
 800696e:	2b00      	cmp	r3, #0
 8006970:	d109      	bne.n	8006986 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006972:	68bb      	ldr	r3, [r7, #8]
 8006974:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006978:	f44f 7300 	mov.w	r3, #512	; 0x200
 800697c:	2101      	movs	r1, #1
 800697e:	6878      	ldr	r0, [r7, #4]
 8006980:	f001 ff4e 	bl	8008820 <USBD_LL_PrepareReceive>
 8006984:	e007      	b.n	8006996 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006986:	68bb      	ldr	r3, [r7, #8]
 8006988:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800698c:	2340      	movs	r3, #64	; 0x40
 800698e:	2101      	movs	r1, #1
 8006990:	6878      	ldr	r0, [r7, #4]
 8006992:	f001 ff45 	bl	8008820 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8006996:	7bfb      	ldrb	r3, [r7, #15]
}
 8006998:	4618      	mov	r0, r3
 800699a:	3710      	adds	r7, #16
 800699c:	46bd      	mov	sp, r7
 800699e:	bd80      	pop	{r7, pc}

080069a0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80069a0:	b580      	push	{r7, lr}
 80069a2:	b084      	sub	sp, #16
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]
 80069a8:	460b      	mov	r3, r1
 80069aa:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80069ac:	2300      	movs	r3, #0
 80069ae:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80069b0:	2181      	movs	r1, #129	; 0x81
 80069b2:	6878      	ldr	r0, [r7, #4]
 80069b4:	f001 fe69 	bl	800868a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	2200      	movs	r2, #0
 80069bc:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80069be:	2101      	movs	r1, #1
 80069c0:	6878      	ldr	r0, [r7, #4]
 80069c2:	f001 fe62 	bl	800868a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	2200      	movs	r2, #0
 80069ca:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80069ce:	2182      	movs	r1, #130	; 0x82
 80069d0:	6878      	ldr	r0, [r7, #4]
 80069d2:	f001 fe5a 	bl	800868a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	2200      	movs	r2, #0
 80069da:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d00e      	beq.n	8006a04 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80069ec:	685b      	ldr	r3, [r3, #4]
 80069ee:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069f6:	4618      	mov	r0, r3
 80069f8:	f001 ff54 	bl	80088a4 <USBD_static_free>
    pdev->pClassData = NULL;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	2200      	movs	r2, #0
 8006a00:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8006a04:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a06:	4618      	mov	r0, r3
 8006a08:	3710      	adds	r7, #16
 8006a0a:	46bd      	mov	sp, r7
 8006a0c:	bd80      	pop	{r7, pc}

08006a0e <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006a0e:	b580      	push	{r7, lr}
 8006a10:	b086      	sub	sp, #24
 8006a12:	af00      	add	r7, sp, #0
 8006a14:	6078      	str	r0, [r7, #4]
 8006a16:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a1e:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8006a20:	2300      	movs	r3, #0
 8006a22:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8006a24:	2300      	movs	r3, #0
 8006a26:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8006a28:	2300      	movs	r3, #0
 8006a2a:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006a2c:	683b      	ldr	r3, [r7, #0]
 8006a2e:	781b      	ldrb	r3, [r3, #0]
 8006a30:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d039      	beq.n	8006aac <USBD_CDC_Setup+0x9e>
 8006a38:	2b20      	cmp	r3, #32
 8006a3a:	d17f      	bne.n	8006b3c <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8006a3c:	683b      	ldr	r3, [r7, #0]
 8006a3e:	88db      	ldrh	r3, [r3, #6]
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d029      	beq.n	8006a98 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8006a44:	683b      	ldr	r3, [r7, #0]
 8006a46:	781b      	ldrb	r3, [r3, #0]
 8006a48:	b25b      	sxtb	r3, r3
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	da11      	bge.n	8006a72 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006a54:	689b      	ldr	r3, [r3, #8]
 8006a56:	683a      	ldr	r2, [r7, #0]
 8006a58:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8006a5a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006a5c:	683a      	ldr	r2, [r7, #0]
 8006a5e:	88d2      	ldrh	r2, [r2, #6]
 8006a60:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006a62:	6939      	ldr	r1, [r7, #16]
 8006a64:	683b      	ldr	r3, [r7, #0]
 8006a66:	88db      	ldrh	r3, [r3, #6]
 8006a68:	461a      	mov	r2, r3
 8006a6a:	6878      	ldr	r0, [r7, #4]
 8006a6c:	f001 fa09 	bl	8007e82 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8006a70:	e06b      	b.n	8006b4a <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8006a72:	683b      	ldr	r3, [r7, #0]
 8006a74:	785a      	ldrb	r2, [r3, #1]
 8006a76:	693b      	ldr	r3, [r7, #16]
 8006a78:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8006a7c:	683b      	ldr	r3, [r7, #0]
 8006a7e:	88db      	ldrh	r3, [r3, #6]
 8006a80:	b2da      	uxtb	r2, r3
 8006a82:	693b      	ldr	r3, [r7, #16]
 8006a84:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006a88:	6939      	ldr	r1, [r7, #16]
 8006a8a:	683b      	ldr	r3, [r7, #0]
 8006a8c:	88db      	ldrh	r3, [r3, #6]
 8006a8e:	461a      	mov	r2, r3
 8006a90:	6878      	ldr	r0, [r7, #4]
 8006a92:	f001 fa24 	bl	8007ede <USBD_CtlPrepareRx>
      break;
 8006a96:	e058      	b.n	8006b4a <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006a9e:	689b      	ldr	r3, [r3, #8]
 8006aa0:	683a      	ldr	r2, [r7, #0]
 8006aa2:	7850      	ldrb	r0, [r2, #1]
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	6839      	ldr	r1, [r7, #0]
 8006aa8:	4798      	blx	r3
      break;
 8006aaa:	e04e      	b.n	8006b4a <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006aac:	683b      	ldr	r3, [r7, #0]
 8006aae:	785b      	ldrb	r3, [r3, #1]
 8006ab0:	2b0b      	cmp	r3, #11
 8006ab2:	d02e      	beq.n	8006b12 <USBD_CDC_Setup+0x104>
 8006ab4:	2b0b      	cmp	r3, #11
 8006ab6:	dc38      	bgt.n	8006b2a <USBD_CDC_Setup+0x11c>
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d002      	beq.n	8006ac2 <USBD_CDC_Setup+0xb4>
 8006abc:	2b0a      	cmp	r3, #10
 8006abe:	d014      	beq.n	8006aea <USBD_CDC_Setup+0xdc>
 8006ac0:	e033      	b.n	8006b2a <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ac8:	2b03      	cmp	r3, #3
 8006aca:	d107      	bne.n	8006adc <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8006acc:	f107 030c 	add.w	r3, r7, #12
 8006ad0:	2202      	movs	r2, #2
 8006ad2:	4619      	mov	r1, r3
 8006ad4:	6878      	ldr	r0, [r7, #4]
 8006ad6:	f001 f9d4 	bl	8007e82 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006ada:	e02e      	b.n	8006b3a <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8006adc:	6839      	ldr	r1, [r7, #0]
 8006ade:	6878      	ldr	r0, [r7, #4]
 8006ae0:	f001 f965 	bl	8007dae <USBD_CtlError>
            ret = USBD_FAIL;
 8006ae4:	2302      	movs	r3, #2
 8006ae6:	75fb      	strb	r3, [r7, #23]
          break;
 8006ae8:	e027      	b.n	8006b3a <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006af0:	2b03      	cmp	r3, #3
 8006af2:	d107      	bne.n	8006b04 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8006af4:	f107 030f 	add.w	r3, r7, #15
 8006af8:	2201      	movs	r2, #1
 8006afa:	4619      	mov	r1, r3
 8006afc:	6878      	ldr	r0, [r7, #4]
 8006afe:	f001 f9c0 	bl	8007e82 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006b02:	e01a      	b.n	8006b3a <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8006b04:	6839      	ldr	r1, [r7, #0]
 8006b06:	6878      	ldr	r0, [r7, #4]
 8006b08:	f001 f951 	bl	8007dae <USBD_CtlError>
            ret = USBD_FAIL;
 8006b0c:	2302      	movs	r3, #2
 8006b0e:	75fb      	strb	r3, [r7, #23]
          break;
 8006b10:	e013      	b.n	8006b3a <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b18:	2b03      	cmp	r3, #3
 8006b1a:	d00d      	beq.n	8006b38 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8006b1c:	6839      	ldr	r1, [r7, #0]
 8006b1e:	6878      	ldr	r0, [r7, #4]
 8006b20:	f001 f945 	bl	8007dae <USBD_CtlError>
            ret = USBD_FAIL;
 8006b24:	2302      	movs	r3, #2
 8006b26:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006b28:	e006      	b.n	8006b38 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8006b2a:	6839      	ldr	r1, [r7, #0]
 8006b2c:	6878      	ldr	r0, [r7, #4]
 8006b2e:	f001 f93e 	bl	8007dae <USBD_CtlError>
          ret = USBD_FAIL;
 8006b32:	2302      	movs	r3, #2
 8006b34:	75fb      	strb	r3, [r7, #23]
          break;
 8006b36:	e000      	b.n	8006b3a <USBD_CDC_Setup+0x12c>
          break;
 8006b38:	bf00      	nop
      }
      break;
 8006b3a:	e006      	b.n	8006b4a <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8006b3c:	6839      	ldr	r1, [r7, #0]
 8006b3e:	6878      	ldr	r0, [r7, #4]
 8006b40:	f001 f935 	bl	8007dae <USBD_CtlError>
      ret = USBD_FAIL;
 8006b44:	2302      	movs	r3, #2
 8006b46:	75fb      	strb	r3, [r7, #23]
      break;
 8006b48:	bf00      	nop
  }

  return ret;
 8006b4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b4c:	4618      	mov	r0, r3
 8006b4e:	3718      	adds	r7, #24
 8006b50:	46bd      	mov	sp, r7
 8006b52:	bd80      	pop	{r7, pc}

08006b54 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006b54:	b580      	push	{r7, lr}
 8006b56:	b084      	sub	sp, #16
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	6078      	str	r0, [r7, #4]
 8006b5c:	460b      	mov	r3, r1
 8006b5e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b66:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006b6e:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d03a      	beq.n	8006bf0 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006b7a:	78fa      	ldrb	r2, [r7, #3]
 8006b7c:	6879      	ldr	r1, [r7, #4]
 8006b7e:	4613      	mov	r3, r2
 8006b80:	009b      	lsls	r3, r3, #2
 8006b82:	4413      	add	r3, r2
 8006b84:	009b      	lsls	r3, r3, #2
 8006b86:	440b      	add	r3, r1
 8006b88:	331c      	adds	r3, #28
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d029      	beq.n	8006be4 <USBD_CDC_DataIn+0x90>
 8006b90:	78fa      	ldrb	r2, [r7, #3]
 8006b92:	6879      	ldr	r1, [r7, #4]
 8006b94:	4613      	mov	r3, r2
 8006b96:	009b      	lsls	r3, r3, #2
 8006b98:	4413      	add	r3, r2
 8006b9a:	009b      	lsls	r3, r3, #2
 8006b9c:	440b      	add	r3, r1
 8006b9e:	331c      	adds	r3, #28
 8006ba0:	681a      	ldr	r2, [r3, #0]
 8006ba2:	78f9      	ldrb	r1, [r7, #3]
 8006ba4:	68b8      	ldr	r0, [r7, #8]
 8006ba6:	460b      	mov	r3, r1
 8006ba8:	009b      	lsls	r3, r3, #2
 8006baa:	440b      	add	r3, r1
 8006bac:	00db      	lsls	r3, r3, #3
 8006bae:	4403      	add	r3, r0
 8006bb0:	3338      	adds	r3, #56	; 0x38
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	fbb2 f1f3 	udiv	r1, r2, r3
 8006bb8:	fb01 f303 	mul.w	r3, r1, r3
 8006bbc:	1ad3      	subs	r3, r2, r3
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d110      	bne.n	8006be4 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8006bc2:	78fa      	ldrb	r2, [r7, #3]
 8006bc4:	6879      	ldr	r1, [r7, #4]
 8006bc6:	4613      	mov	r3, r2
 8006bc8:	009b      	lsls	r3, r3, #2
 8006bca:	4413      	add	r3, r2
 8006bcc:	009b      	lsls	r3, r3, #2
 8006bce:	440b      	add	r3, r1
 8006bd0:	331c      	adds	r3, #28
 8006bd2:	2200      	movs	r2, #0
 8006bd4:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006bd6:	78f9      	ldrb	r1, [r7, #3]
 8006bd8:	2300      	movs	r3, #0
 8006bda:	2200      	movs	r2, #0
 8006bdc:	6878      	ldr	r0, [r7, #4]
 8006bde:	f001 fdfc 	bl	80087da <USBD_LL_Transmit>
 8006be2:	e003      	b.n	8006bec <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	2200      	movs	r2, #0
 8006be8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8006bec:	2300      	movs	r3, #0
 8006bee:	e000      	b.n	8006bf2 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8006bf0:	2302      	movs	r3, #2
  }
}
 8006bf2:	4618      	mov	r0, r3
 8006bf4:	3710      	adds	r7, #16
 8006bf6:	46bd      	mov	sp, r7
 8006bf8:	bd80      	pop	{r7, pc}

08006bfa <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006bfa:	b580      	push	{r7, lr}
 8006bfc:	b084      	sub	sp, #16
 8006bfe:	af00      	add	r7, sp, #0
 8006c00:	6078      	str	r0, [r7, #4]
 8006c02:	460b      	mov	r3, r1
 8006c04:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c0c:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006c0e:	78fb      	ldrb	r3, [r7, #3]
 8006c10:	4619      	mov	r1, r3
 8006c12:	6878      	ldr	r0, [r7, #4]
 8006c14:	f001 fe27 	bl	8008866 <USBD_LL_GetRxDataSize>
 8006c18:	4602      	mov	r2, r0
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d00d      	beq.n	8006c46 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006c30:	68db      	ldr	r3, [r3, #12]
 8006c32:	68fa      	ldr	r2, [r7, #12]
 8006c34:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006c38:	68fa      	ldr	r2, [r7, #12]
 8006c3a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006c3e:	4611      	mov	r1, r2
 8006c40:	4798      	blx	r3

    return USBD_OK;
 8006c42:	2300      	movs	r3, #0
 8006c44:	e000      	b.n	8006c48 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8006c46:	2302      	movs	r3, #2
  }
}
 8006c48:	4618      	mov	r0, r3
 8006c4a:	3710      	adds	r7, #16
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	bd80      	pop	{r7, pc}

08006c50 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006c50:	b580      	push	{r7, lr}
 8006c52:	b084      	sub	sp, #16
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c5e:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d015      	beq.n	8006c96 <USBD_CDC_EP0_RxReady+0x46>
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006c70:	2bff      	cmp	r3, #255	; 0xff
 8006c72:	d010      	beq.n	8006c96 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006c7a:	689b      	ldr	r3, [r3, #8]
 8006c7c:	68fa      	ldr	r2, [r7, #12]
 8006c7e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8006c82:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8006c84:	68fa      	ldr	r2, [r7, #12]
 8006c86:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006c8a:	b292      	uxth	r2, r2
 8006c8c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	22ff      	movs	r2, #255	; 0xff
 8006c92:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8006c96:	2300      	movs	r3, #0
}
 8006c98:	4618      	mov	r0, r3
 8006c9a:	3710      	adds	r7, #16
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	bd80      	pop	{r7, pc}

08006ca0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006ca0:	b480      	push	{r7}
 8006ca2:	b083      	sub	sp, #12
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2243      	movs	r2, #67	; 0x43
 8006cac:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8006cae:	4b03      	ldr	r3, [pc, #12]	; (8006cbc <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8006cb0:	4618      	mov	r0, r3
 8006cb2:	370c      	adds	r7, #12
 8006cb4:	46bd      	mov	sp, r7
 8006cb6:	bc80      	pop	{r7}
 8006cb8:	4770      	bx	lr
 8006cba:	bf00      	nop
 8006cbc:	20000094 	.word	0x20000094

08006cc0 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006cc0:	b480      	push	{r7}
 8006cc2:	b083      	sub	sp, #12
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	2243      	movs	r2, #67	; 0x43
 8006ccc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8006cce:	4b03      	ldr	r3, [pc, #12]	; (8006cdc <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8006cd0:	4618      	mov	r0, r3
 8006cd2:	370c      	adds	r7, #12
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	bc80      	pop	{r7}
 8006cd8:	4770      	bx	lr
 8006cda:	bf00      	nop
 8006cdc:	20000050 	.word	0x20000050

08006ce0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006ce0:	b480      	push	{r7}
 8006ce2:	b083      	sub	sp, #12
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	2243      	movs	r2, #67	; 0x43
 8006cec:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8006cee:	4b03      	ldr	r3, [pc, #12]	; (8006cfc <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	370c      	adds	r7, #12
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	bc80      	pop	{r7}
 8006cf8:	4770      	bx	lr
 8006cfa:	bf00      	nop
 8006cfc:	200000d8 	.word	0x200000d8

08006d00 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006d00:	b480      	push	{r7}
 8006d02:	b083      	sub	sp, #12
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	220a      	movs	r2, #10
 8006d0c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8006d0e:	4b03      	ldr	r3, [pc, #12]	; (8006d1c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006d10:	4618      	mov	r0, r3
 8006d12:	370c      	adds	r7, #12
 8006d14:	46bd      	mov	sp, r7
 8006d16:	bc80      	pop	{r7}
 8006d18:	4770      	bx	lr
 8006d1a:	bf00      	nop
 8006d1c:	2000000c 	.word	0x2000000c

08006d20 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8006d20:	b480      	push	{r7}
 8006d22:	b085      	sub	sp, #20
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]
 8006d28:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8006d2a:	2302      	movs	r3, #2
 8006d2c:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8006d2e:	683b      	ldr	r3, [r7, #0]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d005      	beq.n	8006d40 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	683a      	ldr	r2, [r7, #0]
 8006d38:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8006d3c:	2300      	movs	r3, #0
 8006d3e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006d40:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d42:	4618      	mov	r0, r3
 8006d44:	3714      	adds	r7, #20
 8006d46:	46bd      	mov	sp, r7
 8006d48:	bc80      	pop	{r7}
 8006d4a:	4770      	bx	lr

08006d4c <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8006d4c:	b480      	push	{r7}
 8006d4e:	b087      	sub	sp, #28
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	60f8      	str	r0, [r7, #12]
 8006d54:	60b9      	str	r1, [r7, #8]
 8006d56:	4613      	mov	r3, r2
 8006d58:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d60:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8006d62:	697b      	ldr	r3, [r7, #20]
 8006d64:	68ba      	ldr	r2, [r7, #8]
 8006d66:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006d6a:	88fa      	ldrh	r2, [r7, #6]
 8006d6c:	697b      	ldr	r3, [r7, #20]
 8006d6e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8006d72:	2300      	movs	r3, #0
}
 8006d74:	4618      	mov	r0, r3
 8006d76:	371c      	adds	r7, #28
 8006d78:	46bd      	mov	sp, r7
 8006d7a:	bc80      	pop	{r7}
 8006d7c:	4770      	bx	lr

08006d7e <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8006d7e:	b480      	push	{r7}
 8006d80:	b085      	sub	sp, #20
 8006d82:	af00      	add	r7, sp, #0
 8006d84:	6078      	str	r0, [r7, #4]
 8006d86:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d8e:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	683a      	ldr	r2, [r7, #0]
 8006d94:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8006d98:	2300      	movs	r3, #0
}
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	3714      	adds	r7, #20
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	bc80      	pop	{r7}
 8006da2:	4770      	bx	lr

08006da4 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006da4:	b580      	push	{r7, lr}
 8006da6:	b084      	sub	sp, #16
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006db2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d01c      	beq.n	8006df8 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d115      	bne.n	8006df4 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	2201      	movs	r2, #1
 8006dcc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8006de6:	b29b      	uxth	r3, r3
 8006de8:	2181      	movs	r1, #129	; 0x81
 8006dea:	6878      	ldr	r0, [r7, #4]
 8006dec:	f001 fcf5 	bl	80087da <USBD_LL_Transmit>

      return USBD_OK;
 8006df0:	2300      	movs	r3, #0
 8006df2:	e002      	b.n	8006dfa <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8006df4:	2301      	movs	r3, #1
 8006df6:	e000      	b.n	8006dfa <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8006df8:	2302      	movs	r3, #2
  }
}
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	3710      	adds	r7, #16
 8006dfe:	46bd      	mov	sp, r7
 8006e00:	bd80      	pop	{r7, pc}

08006e02 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006e02:	b580      	push	{r7, lr}
 8006e04:	b084      	sub	sp, #16
 8006e06:	af00      	add	r7, sp, #0
 8006e08:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e10:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d017      	beq.n	8006e4c <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	7c1b      	ldrb	r3, [r3, #16]
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d109      	bne.n	8006e38 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006e2a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006e2e:	2101      	movs	r1, #1
 8006e30:	6878      	ldr	r0, [r7, #4]
 8006e32:	f001 fcf5 	bl	8008820 <USBD_LL_PrepareReceive>
 8006e36:	e007      	b.n	8006e48 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006e3e:	2340      	movs	r3, #64	; 0x40
 8006e40:	2101      	movs	r1, #1
 8006e42:	6878      	ldr	r0, [r7, #4]
 8006e44:	f001 fcec 	bl	8008820 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8006e48:	2300      	movs	r3, #0
 8006e4a:	e000      	b.n	8006e4e <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8006e4c:	2302      	movs	r3, #2
  }
}
 8006e4e:	4618      	mov	r0, r3
 8006e50:	3710      	adds	r7, #16
 8006e52:	46bd      	mov	sp, r7
 8006e54:	bd80      	pop	{r7, pc}

08006e56 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006e56:	b580      	push	{r7, lr}
 8006e58:	b084      	sub	sp, #16
 8006e5a:	af00      	add	r7, sp, #0
 8006e5c:	60f8      	str	r0, [r7, #12]
 8006e5e:	60b9      	str	r1, [r7, #8]
 8006e60:	4613      	mov	r3, r2
 8006e62:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d101      	bne.n	8006e6e <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006e6a:	2302      	movs	r3, #2
 8006e6c:	e01a      	b.n	8006ea4 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d003      	beq.n	8006e80 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	2200      	movs	r2, #0
 8006e7c:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006e80:	68bb      	ldr	r3, [r7, #8]
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d003      	beq.n	8006e8e <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	68ba      	ldr	r2, [r7, #8]
 8006e8a:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	2201      	movs	r2, #1
 8006e92:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	79fa      	ldrb	r2, [r7, #7]
 8006e9a:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8006e9c:	68f8      	ldr	r0, [r7, #12]
 8006e9e:	f001 fb59 	bl	8008554 <USBD_LL_Init>

  return USBD_OK;
 8006ea2:	2300      	movs	r3, #0
}
 8006ea4:	4618      	mov	r0, r3
 8006ea6:	3710      	adds	r7, #16
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	bd80      	pop	{r7, pc}

08006eac <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006eac:	b480      	push	{r7}
 8006eae:	b085      	sub	sp, #20
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	6078      	str	r0, [r7, #4]
 8006eb4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8006eb6:	2300      	movs	r3, #0
 8006eb8:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8006eba:	683b      	ldr	r3, [r7, #0]
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d006      	beq.n	8006ece <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	683a      	ldr	r2, [r7, #0]
 8006ec4:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8006ec8:	2300      	movs	r3, #0
 8006eca:	73fb      	strb	r3, [r7, #15]
 8006ecc:	e001      	b.n	8006ed2 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8006ece:	2302      	movs	r3, #2
 8006ed0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006ed2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ed4:	4618      	mov	r0, r3
 8006ed6:	3714      	adds	r7, #20
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	bc80      	pop	{r7}
 8006edc:	4770      	bx	lr

08006ede <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006ede:	b580      	push	{r7, lr}
 8006ee0:	b082      	sub	sp, #8
 8006ee2:	af00      	add	r7, sp, #0
 8006ee4:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8006ee6:	6878      	ldr	r0, [r7, #4]
 8006ee8:	f001 fb8e 	bl	8008608 <USBD_LL_Start>

  return USBD_OK;
 8006eec:	2300      	movs	r3, #0
}
 8006eee:	4618      	mov	r0, r3
 8006ef0:	3708      	adds	r7, #8
 8006ef2:	46bd      	mov	sp, r7
 8006ef4:	bd80      	pop	{r7, pc}

08006ef6 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006ef6:	b480      	push	{r7}
 8006ef8:	b083      	sub	sp, #12
 8006efa:	af00      	add	r7, sp, #0
 8006efc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006efe:	2300      	movs	r3, #0
}
 8006f00:	4618      	mov	r0, r3
 8006f02:	370c      	adds	r7, #12
 8006f04:	46bd      	mov	sp, r7
 8006f06:	bc80      	pop	{r7}
 8006f08:	4770      	bx	lr

08006f0a <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006f0a:	b580      	push	{r7, lr}
 8006f0c:	b084      	sub	sp, #16
 8006f0e:	af00      	add	r7, sp, #0
 8006f10:	6078      	str	r0, [r7, #4]
 8006f12:	460b      	mov	r3, r1
 8006f14:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006f16:	2302      	movs	r3, #2
 8006f18:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d00c      	beq.n	8006f3e <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	78fa      	ldrb	r2, [r7, #3]
 8006f2e:	4611      	mov	r1, r2
 8006f30:	6878      	ldr	r0, [r7, #4]
 8006f32:	4798      	blx	r3
 8006f34:	4603      	mov	r3, r0
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d101      	bne.n	8006f3e <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8006f3a:	2300      	movs	r3, #0
 8006f3c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8006f3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f40:	4618      	mov	r0, r3
 8006f42:	3710      	adds	r7, #16
 8006f44:	46bd      	mov	sp, r7
 8006f46:	bd80      	pop	{r7, pc}

08006f48 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006f48:	b580      	push	{r7, lr}
 8006f4a:	b082      	sub	sp, #8
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	6078      	str	r0, [r7, #4]
 8006f50:	460b      	mov	r3, r1
 8006f52:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f5a:	685b      	ldr	r3, [r3, #4]
 8006f5c:	78fa      	ldrb	r2, [r7, #3]
 8006f5e:	4611      	mov	r1, r2
 8006f60:	6878      	ldr	r0, [r7, #4]
 8006f62:	4798      	blx	r3

  return USBD_OK;
 8006f64:	2300      	movs	r3, #0
}
 8006f66:	4618      	mov	r0, r3
 8006f68:	3708      	adds	r7, #8
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	bd80      	pop	{r7, pc}

08006f6e <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006f6e:	b580      	push	{r7, lr}
 8006f70:	b082      	sub	sp, #8
 8006f72:	af00      	add	r7, sp, #0
 8006f74:	6078      	str	r0, [r7, #4]
 8006f76:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006f7e:	6839      	ldr	r1, [r7, #0]
 8006f80:	4618      	mov	r0, r3
 8006f82:	f000 fed8 	bl	8007d36 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	2201      	movs	r2, #1
 8006f8a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006f94:	461a      	mov	r2, r3
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006fa2:	f003 031f 	and.w	r3, r3, #31
 8006fa6:	2b02      	cmp	r3, #2
 8006fa8:	d016      	beq.n	8006fd8 <USBD_LL_SetupStage+0x6a>
 8006faa:	2b02      	cmp	r3, #2
 8006fac:	d81c      	bhi.n	8006fe8 <USBD_LL_SetupStage+0x7a>
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d002      	beq.n	8006fb8 <USBD_LL_SetupStage+0x4a>
 8006fb2:	2b01      	cmp	r3, #1
 8006fb4:	d008      	beq.n	8006fc8 <USBD_LL_SetupStage+0x5a>
 8006fb6:	e017      	b.n	8006fe8 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006fbe:	4619      	mov	r1, r3
 8006fc0:	6878      	ldr	r0, [r7, #4]
 8006fc2:	f000 f9cb 	bl	800735c <USBD_StdDevReq>
      break;
 8006fc6:	e01a      	b.n	8006ffe <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006fce:	4619      	mov	r1, r3
 8006fd0:	6878      	ldr	r0, [r7, #4]
 8006fd2:	f000 fa2d 	bl	8007430 <USBD_StdItfReq>
      break;
 8006fd6:	e012      	b.n	8006ffe <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006fde:	4619      	mov	r1, r3
 8006fe0:	6878      	ldr	r0, [r7, #4]
 8006fe2:	f000 fa6d 	bl	80074c0 <USBD_StdEPReq>
      break;
 8006fe6:	e00a      	b.n	8006ffe <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006fee:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006ff2:	b2db      	uxtb	r3, r3
 8006ff4:	4619      	mov	r1, r3
 8006ff6:	6878      	ldr	r0, [r7, #4]
 8006ff8:	f001 fb66 	bl	80086c8 <USBD_LL_StallEP>
      break;
 8006ffc:	bf00      	nop
  }

  return USBD_OK;
 8006ffe:	2300      	movs	r3, #0
}
 8007000:	4618      	mov	r0, r3
 8007002:	3708      	adds	r7, #8
 8007004:	46bd      	mov	sp, r7
 8007006:	bd80      	pop	{r7, pc}

08007008 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007008:	b580      	push	{r7, lr}
 800700a:	b086      	sub	sp, #24
 800700c:	af00      	add	r7, sp, #0
 800700e:	60f8      	str	r0, [r7, #12]
 8007010:	460b      	mov	r3, r1
 8007012:	607a      	str	r2, [r7, #4]
 8007014:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007016:	7afb      	ldrb	r3, [r7, #11]
 8007018:	2b00      	cmp	r3, #0
 800701a:	d14b      	bne.n	80070b4 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007022:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800702a:	2b03      	cmp	r3, #3
 800702c:	d134      	bne.n	8007098 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800702e:	697b      	ldr	r3, [r7, #20]
 8007030:	68da      	ldr	r2, [r3, #12]
 8007032:	697b      	ldr	r3, [r7, #20]
 8007034:	691b      	ldr	r3, [r3, #16]
 8007036:	429a      	cmp	r2, r3
 8007038:	d919      	bls.n	800706e <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800703a:	697b      	ldr	r3, [r7, #20]
 800703c:	68da      	ldr	r2, [r3, #12]
 800703e:	697b      	ldr	r3, [r7, #20]
 8007040:	691b      	ldr	r3, [r3, #16]
 8007042:	1ad2      	subs	r2, r2, r3
 8007044:	697b      	ldr	r3, [r7, #20]
 8007046:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007048:	697b      	ldr	r3, [r7, #20]
 800704a:	68da      	ldr	r2, [r3, #12]
 800704c:	697b      	ldr	r3, [r7, #20]
 800704e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007050:	429a      	cmp	r2, r3
 8007052:	d203      	bcs.n	800705c <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007054:	697b      	ldr	r3, [r7, #20]
 8007056:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8007058:	b29b      	uxth	r3, r3
 800705a:	e002      	b.n	8007062 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800705c:	697b      	ldr	r3, [r7, #20]
 800705e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007060:	b29b      	uxth	r3, r3
 8007062:	461a      	mov	r2, r3
 8007064:	6879      	ldr	r1, [r7, #4]
 8007066:	68f8      	ldr	r0, [r7, #12]
 8007068:	f000 ff57 	bl	8007f1a <USBD_CtlContinueRx>
 800706c:	e038      	b.n	80070e0 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007074:	691b      	ldr	r3, [r3, #16]
 8007076:	2b00      	cmp	r3, #0
 8007078:	d00a      	beq.n	8007090 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007080:	2b03      	cmp	r3, #3
 8007082:	d105      	bne.n	8007090 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800708a:	691b      	ldr	r3, [r3, #16]
 800708c:	68f8      	ldr	r0, [r7, #12]
 800708e:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8007090:	68f8      	ldr	r0, [r7, #12]
 8007092:	f000 ff54 	bl	8007f3e <USBD_CtlSendStatus>
 8007096:	e023      	b.n	80070e0 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800709e:	2b05      	cmp	r3, #5
 80070a0:	d11e      	bne.n	80070e0 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	2200      	movs	r2, #0
 80070a6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 80070aa:	2100      	movs	r1, #0
 80070ac:	68f8      	ldr	r0, [r7, #12]
 80070ae:	f001 fb0b 	bl	80086c8 <USBD_LL_StallEP>
 80070b2:	e015      	b.n	80070e0 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80070ba:	699b      	ldr	r3, [r3, #24]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d00d      	beq.n	80070dc <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80070c6:	2b03      	cmp	r3, #3
 80070c8:	d108      	bne.n	80070dc <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80070d0:	699b      	ldr	r3, [r3, #24]
 80070d2:	7afa      	ldrb	r2, [r7, #11]
 80070d4:	4611      	mov	r1, r2
 80070d6:	68f8      	ldr	r0, [r7, #12]
 80070d8:	4798      	blx	r3
 80070da:	e001      	b.n	80070e0 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80070dc:	2302      	movs	r3, #2
 80070de:	e000      	b.n	80070e2 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80070e0:	2300      	movs	r3, #0
}
 80070e2:	4618      	mov	r0, r3
 80070e4:	3718      	adds	r7, #24
 80070e6:	46bd      	mov	sp, r7
 80070e8:	bd80      	pop	{r7, pc}

080070ea <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80070ea:	b580      	push	{r7, lr}
 80070ec:	b086      	sub	sp, #24
 80070ee:	af00      	add	r7, sp, #0
 80070f0:	60f8      	str	r0, [r7, #12]
 80070f2:	460b      	mov	r3, r1
 80070f4:	607a      	str	r2, [r7, #4]
 80070f6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80070f8:	7afb      	ldrb	r3, [r7, #11]
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d17f      	bne.n	80071fe <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	3314      	adds	r3, #20
 8007102:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800710a:	2b02      	cmp	r3, #2
 800710c:	d15c      	bne.n	80071c8 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800710e:	697b      	ldr	r3, [r7, #20]
 8007110:	68da      	ldr	r2, [r3, #12]
 8007112:	697b      	ldr	r3, [r7, #20]
 8007114:	691b      	ldr	r3, [r3, #16]
 8007116:	429a      	cmp	r2, r3
 8007118:	d915      	bls.n	8007146 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800711a:	697b      	ldr	r3, [r7, #20]
 800711c:	68da      	ldr	r2, [r3, #12]
 800711e:	697b      	ldr	r3, [r7, #20]
 8007120:	691b      	ldr	r3, [r3, #16]
 8007122:	1ad2      	subs	r2, r2, r3
 8007124:	697b      	ldr	r3, [r7, #20]
 8007126:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8007128:	697b      	ldr	r3, [r7, #20]
 800712a:	68db      	ldr	r3, [r3, #12]
 800712c:	b29b      	uxth	r3, r3
 800712e:	461a      	mov	r2, r3
 8007130:	6879      	ldr	r1, [r7, #4]
 8007132:	68f8      	ldr	r0, [r7, #12]
 8007134:	f000 fec1 	bl	8007eba <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007138:	2300      	movs	r3, #0
 800713a:	2200      	movs	r2, #0
 800713c:	2100      	movs	r1, #0
 800713e:	68f8      	ldr	r0, [r7, #12]
 8007140:	f001 fb6e 	bl	8008820 <USBD_LL_PrepareReceive>
 8007144:	e04e      	b.n	80071e4 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007146:	697b      	ldr	r3, [r7, #20]
 8007148:	689b      	ldr	r3, [r3, #8]
 800714a:	697a      	ldr	r2, [r7, #20]
 800714c:	6912      	ldr	r2, [r2, #16]
 800714e:	fbb3 f1f2 	udiv	r1, r3, r2
 8007152:	fb01 f202 	mul.w	r2, r1, r2
 8007156:	1a9b      	subs	r3, r3, r2
 8007158:	2b00      	cmp	r3, #0
 800715a:	d11c      	bne.n	8007196 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800715c:	697b      	ldr	r3, [r7, #20]
 800715e:	689a      	ldr	r2, [r3, #8]
 8007160:	697b      	ldr	r3, [r7, #20]
 8007162:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007164:	429a      	cmp	r2, r3
 8007166:	d316      	bcc.n	8007196 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8007168:	697b      	ldr	r3, [r7, #20]
 800716a:	689a      	ldr	r2, [r3, #8]
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007172:	429a      	cmp	r2, r3
 8007174:	d20f      	bcs.n	8007196 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007176:	2200      	movs	r2, #0
 8007178:	2100      	movs	r1, #0
 800717a:	68f8      	ldr	r0, [r7, #12]
 800717c:	f000 fe9d 	bl	8007eba <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	2200      	movs	r2, #0
 8007184:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007188:	2300      	movs	r3, #0
 800718a:	2200      	movs	r2, #0
 800718c:	2100      	movs	r1, #0
 800718e:	68f8      	ldr	r0, [r7, #12]
 8007190:	f001 fb46 	bl	8008820 <USBD_LL_PrepareReceive>
 8007194:	e026      	b.n	80071e4 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800719c:	68db      	ldr	r3, [r3, #12]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d00a      	beq.n	80071b8 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80071a8:	2b03      	cmp	r3, #3
 80071aa:	d105      	bne.n	80071b8 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80071b2:	68db      	ldr	r3, [r3, #12]
 80071b4:	68f8      	ldr	r0, [r7, #12]
 80071b6:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80071b8:	2180      	movs	r1, #128	; 0x80
 80071ba:	68f8      	ldr	r0, [r7, #12]
 80071bc:	f001 fa84 	bl	80086c8 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80071c0:	68f8      	ldr	r0, [r7, #12]
 80071c2:	f000 fecf 	bl	8007f64 <USBD_CtlReceiveStatus>
 80071c6:	e00d      	b.n	80071e4 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80071ce:	2b04      	cmp	r3, #4
 80071d0:	d004      	beq.n	80071dc <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d103      	bne.n	80071e4 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80071dc:	2180      	movs	r1, #128	; 0x80
 80071de:	68f8      	ldr	r0, [r7, #12]
 80071e0:	f001 fa72 	bl	80086c8 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80071ea:	2b01      	cmp	r3, #1
 80071ec:	d11d      	bne.n	800722a <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80071ee:	68f8      	ldr	r0, [r7, #12]
 80071f0:	f7ff fe81 	bl	8006ef6 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	2200      	movs	r2, #0
 80071f8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80071fc:	e015      	b.n	800722a <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007204:	695b      	ldr	r3, [r3, #20]
 8007206:	2b00      	cmp	r3, #0
 8007208:	d00d      	beq.n	8007226 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8007210:	2b03      	cmp	r3, #3
 8007212:	d108      	bne.n	8007226 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800721a:	695b      	ldr	r3, [r3, #20]
 800721c:	7afa      	ldrb	r2, [r7, #11]
 800721e:	4611      	mov	r1, r2
 8007220:	68f8      	ldr	r0, [r7, #12]
 8007222:	4798      	blx	r3
 8007224:	e001      	b.n	800722a <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007226:	2302      	movs	r3, #2
 8007228:	e000      	b.n	800722c <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800722a:	2300      	movs	r3, #0
}
 800722c:	4618      	mov	r0, r3
 800722e:	3718      	adds	r7, #24
 8007230:	46bd      	mov	sp, r7
 8007232:	bd80      	pop	{r7, pc}

08007234 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007234:	b580      	push	{r7, lr}
 8007236:	b082      	sub	sp, #8
 8007238:	af00      	add	r7, sp, #0
 800723a:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800723c:	2340      	movs	r3, #64	; 0x40
 800723e:	2200      	movs	r2, #0
 8007240:	2100      	movs	r1, #0
 8007242:	6878      	ldr	r0, [r7, #4]
 8007244:	f001 f9fb 	bl	800863e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	2201      	movs	r2, #1
 800724c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	2240      	movs	r2, #64	; 0x40
 8007254:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007258:	2340      	movs	r3, #64	; 0x40
 800725a:	2200      	movs	r2, #0
 800725c:	2180      	movs	r1, #128	; 0x80
 800725e:	6878      	ldr	r0, [r7, #4]
 8007260:	f001 f9ed 	bl	800863e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	2201      	movs	r2, #1
 8007268:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	2240      	movs	r2, #64	; 0x40
 800726e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	2201      	movs	r2, #1
 8007274:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	2200      	movs	r2, #0
 800727c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	2200      	movs	r2, #0
 8007284:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	2200      	movs	r2, #0
 800728a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007294:	2b00      	cmp	r3, #0
 8007296:	d009      	beq.n	80072ac <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800729e:	685b      	ldr	r3, [r3, #4]
 80072a0:	687a      	ldr	r2, [r7, #4]
 80072a2:	6852      	ldr	r2, [r2, #4]
 80072a4:	b2d2      	uxtb	r2, r2
 80072a6:	4611      	mov	r1, r2
 80072a8:	6878      	ldr	r0, [r7, #4]
 80072aa:	4798      	blx	r3
  }

  return USBD_OK;
 80072ac:	2300      	movs	r3, #0
}
 80072ae:	4618      	mov	r0, r3
 80072b0:	3708      	adds	r7, #8
 80072b2:	46bd      	mov	sp, r7
 80072b4:	bd80      	pop	{r7, pc}

080072b6 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80072b6:	b480      	push	{r7}
 80072b8:	b083      	sub	sp, #12
 80072ba:	af00      	add	r7, sp, #0
 80072bc:	6078      	str	r0, [r7, #4]
 80072be:	460b      	mov	r3, r1
 80072c0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	78fa      	ldrb	r2, [r7, #3]
 80072c6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80072c8:	2300      	movs	r3, #0
}
 80072ca:	4618      	mov	r0, r3
 80072cc:	370c      	adds	r7, #12
 80072ce:	46bd      	mov	sp, r7
 80072d0:	bc80      	pop	{r7}
 80072d2:	4770      	bx	lr

080072d4 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80072d4:	b480      	push	{r7}
 80072d6:	b083      	sub	sp, #12
 80072d8:	af00      	add	r7, sp, #0
 80072da:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	2204      	movs	r2, #4
 80072ec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80072f0:	2300      	movs	r3, #0
}
 80072f2:	4618      	mov	r0, r3
 80072f4:	370c      	adds	r7, #12
 80072f6:	46bd      	mov	sp, r7
 80072f8:	bc80      	pop	{r7}
 80072fa:	4770      	bx	lr

080072fc <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80072fc:	b480      	push	{r7}
 80072fe:	b083      	sub	sp, #12
 8007300:	af00      	add	r7, sp, #0
 8007302:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800730a:	2b04      	cmp	r3, #4
 800730c:	d105      	bne.n	800731a <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800731a:	2300      	movs	r3, #0
}
 800731c:	4618      	mov	r0, r3
 800731e:	370c      	adds	r7, #12
 8007320:	46bd      	mov	sp, r7
 8007322:	bc80      	pop	{r7}
 8007324:	4770      	bx	lr

08007326 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007326:	b580      	push	{r7, lr}
 8007328:	b082      	sub	sp, #8
 800732a:	af00      	add	r7, sp, #0
 800732c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007334:	2b03      	cmp	r3, #3
 8007336:	d10b      	bne.n	8007350 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800733e:	69db      	ldr	r3, [r3, #28]
 8007340:	2b00      	cmp	r3, #0
 8007342:	d005      	beq.n	8007350 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800734a:	69db      	ldr	r3, [r3, #28]
 800734c:	6878      	ldr	r0, [r7, #4]
 800734e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007350:	2300      	movs	r3, #0
}
 8007352:	4618      	mov	r0, r3
 8007354:	3708      	adds	r7, #8
 8007356:	46bd      	mov	sp, r7
 8007358:	bd80      	pop	{r7, pc}
	...

0800735c <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800735c:	b580      	push	{r7, lr}
 800735e:	b084      	sub	sp, #16
 8007360:	af00      	add	r7, sp, #0
 8007362:	6078      	str	r0, [r7, #4]
 8007364:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007366:	2300      	movs	r3, #0
 8007368:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800736a:	683b      	ldr	r3, [r7, #0]
 800736c:	781b      	ldrb	r3, [r3, #0]
 800736e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007372:	2b40      	cmp	r3, #64	; 0x40
 8007374:	d005      	beq.n	8007382 <USBD_StdDevReq+0x26>
 8007376:	2b40      	cmp	r3, #64	; 0x40
 8007378:	d84f      	bhi.n	800741a <USBD_StdDevReq+0xbe>
 800737a:	2b00      	cmp	r3, #0
 800737c:	d009      	beq.n	8007392 <USBD_StdDevReq+0x36>
 800737e:	2b20      	cmp	r3, #32
 8007380:	d14b      	bne.n	800741a <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007388:	689b      	ldr	r3, [r3, #8]
 800738a:	6839      	ldr	r1, [r7, #0]
 800738c:	6878      	ldr	r0, [r7, #4]
 800738e:	4798      	blx	r3
      break;
 8007390:	e048      	b.n	8007424 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007392:	683b      	ldr	r3, [r7, #0]
 8007394:	785b      	ldrb	r3, [r3, #1]
 8007396:	2b09      	cmp	r3, #9
 8007398:	d839      	bhi.n	800740e <USBD_StdDevReq+0xb2>
 800739a:	a201      	add	r2, pc, #4	; (adr r2, 80073a0 <USBD_StdDevReq+0x44>)
 800739c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073a0:	080073f1 	.word	0x080073f1
 80073a4:	08007405 	.word	0x08007405
 80073a8:	0800740f 	.word	0x0800740f
 80073ac:	080073fb 	.word	0x080073fb
 80073b0:	0800740f 	.word	0x0800740f
 80073b4:	080073d3 	.word	0x080073d3
 80073b8:	080073c9 	.word	0x080073c9
 80073bc:	0800740f 	.word	0x0800740f
 80073c0:	080073e7 	.word	0x080073e7
 80073c4:	080073dd 	.word	0x080073dd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80073c8:	6839      	ldr	r1, [r7, #0]
 80073ca:	6878      	ldr	r0, [r7, #4]
 80073cc:	f000 f9dc 	bl	8007788 <USBD_GetDescriptor>
          break;
 80073d0:	e022      	b.n	8007418 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80073d2:	6839      	ldr	r1, [r7, #0]
 80073d4:	6878      	ldr	r0, [r7, #4]
 80073d6:	f000 fb3f 	bl	8007a58 <USBD_SetAddress>
          break;
 80073da:	e01d      	b.n	8007418 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80073dc:	6839      	ldr	r1, [r7, #0]
 80073de:	6878      	ldr	r0, [r7, #4]
 80073e0:	f000 fb7e 	bl	8007ae0 <USBD_SetConfig>
          break;
 80073e4:	e018      	b.n	8007418 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80073e6:	6839      	ldr	r1, [r7, #0]
 80073e8:	6878      	ldr	r0, [r7, #4]
 80073ea:	f000 fc07 	bl	8007bfc <USBD_GetConfig>
          break;
 80073ee:	e013      	b.n	8007418 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80073f0:	6839      	ldr	r1, [r7, #0]
 80073f2:	6878      	ldr	r0, [r7, #4]
 80073f4:	f000 fc37 	bl	8007c66 <USBD_GetStatus>
          break;
 80073f8:	e00e      	b.n	8007418 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80073fa:	6839      	ldr	r1, [r7, #0]
 80073fc:	6878      	ldr	r0, [r7, #4]
 80073fe:	f000 fc65 	bl	8007ccc <USBD_SetFeature>
          break;
 8007402:	e009      	b.n	8007418 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007404:	6839      	ldr	r1, [r7, #0]
 8007406:	6878      	ldr	r0, [r7, #4]
 8007408:	f000 fc74 	bl	8007cf4 <USBD_ClrFeature>
          break;
 800740c:	e004      	b.n	8007418 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800740e:	6839      	ldr	r1, [r7, #0]
 8007410:	6878      	ldr	r0, [r7, #4]
 8007412:	f000 fccc 	bl	8007dae <USBD_CtlError>
          break;
 8007416:	bf00      	nop
      }
      break;
 8007418:	e004      	b.n	8007424 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800741a:	6839      	ldr	r1, [r7, #0]
 800741c:	6878      	ldr	r0, [r7, #4]
 800741e:	f000 fcc6 	bl	8007dae <USBD_CtlError>
      break;
 8007422:	bf00      	nop
  }

  return ret;
 8007424:	7bfb      	ldrb	r3, [r7, #15]
}
 8007426:	4618      	mov	r0, r3
 8007428:	3710      	adds	r7, #16
 800742a:	46bd      	mov	sp, r7
 800742c:	bd80      	pop	{r7, pc}
 800742e:	bf00      	nop

08007430 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8007430:	b580      	push	{r7, lr}
 8007432:	b084      	sub	sp, #16
 8007434:	af00      	add	r7, sp, #0
 8007436:	6078      	str	r0, [r7, #4]
 8007438:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800743a:	2300      	movs	r3, #0
 800743c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800743e:	683b      	ldr	r3, [r7, #0]
 8007440:	781b      	ldrb	r3, [r3, #0]
 8007442:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007446:	2b40      	cmp	r3, #64	; 0x40
 8007448:	d005      	beq.n	8007456 <USBD_StdItfReq+0x26>
 800744a:	2b40      	cmp	r3, #64	; 0x40
 800744c:	d82e      	bhi.n	80074ac <USBD_StdItfReq+0x7c>
 800744e:	2b00      	cmp	r3, #0
 8007450:	d001      	beq.n	8007456 <USBD_StdItfReq+0x26>
 8007452:	2b20      	cmp	r3, #32
 8007454:	d12a      	bne.n	80074ac <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800745c:	3b01      	subs	r3, #1
 800745e:	2b02      	cmp	r3, #2
 8007460:	d81d      	bhi.n	800749e <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007462:	683b      	ldr	r3, [r7, #0]
 8007464:	889b      	ldrh	r3, [r3, #4]
 8007466:	b2db      	uxtb	r3, r3
 8007468:	2b01      	cmp	r3, #1
 800746a:	d813      	bhi.n	8007494 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007472:	689b      	ldr	r3, [r3, #8]
 8007474:	6839      	ldr	r1, [r7, #0]
 8007476:	6878      	ldr	r0, [r7, #4]
 8007478:	4798      	blx	r3
 800747a:	4603      	mov	r3, r0
 800747c:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800747e:	683b      	ldr	r3, [r7, #0]
 8007480:	88db      	ldrh	r3, [r3, #6]
 8007482:	2b00      	cmp	r3, #0
 8007484:	d110      	bne.n	80074a8 <USBD_StdItfReq+0x78>
 8007486:	7bfb      	ldrb	r3, [r7, #15]
 8007488:	2b00      	cmp	r3, #0
 800748a:	d10d      	bne.n	80074a8 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 800748c:	6878      	ldr	r0, [r7, #4]
 800748e:	f000 fd56 	bl	8007f3e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007492:	e009      	b.n	80074a8 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8007494:	6839      	ldr	r1, [r7, #0]
 8007496:	6878      	ldr	r0, [r7, #4]
 8007498:	f000 fc89 	bl	8007dae <USBD_CtlError>
          break;
 800749c:	e004      	b.n	80074a8 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800749e:	6839      	ldr	r1, [r7, #0]
 80074a0:	6878      	ldr	r0, [r7, #4]
 80074a2:	f000 fc84 	bl	8007dae <USBD_CtlError>
          break;
 80074a6:	e000      	b.n	80074aa <USBD_StdItfReq+0x7a>
          break;
 80074a8:	bf00      	nop
      }
      break;
 80074aa:	e004      	b.n	80074b6 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 80074ac:	6839      	ldr	r1, [r7, #0]
 80074ae:	6878      	ldr	r0, [r7, #4]
 80074b0:	f000 fc7d 	bl	8007dae <USBD_CtlError>
      break;
 80074b4:	bf00      	nop
  }

  return USBD_OK;
 80074b6:	2300      	movs	r3, #0
}
 80074b8:	4618      	mov	r0, r3
 80074ba:	3710      	adds	r7, #16
 80074bc:	46bd      	mov	sp, r7
 80074be:	bd80      	pop	{r7, pc}

080074c0 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80074c0:	b580      	push	{r7, lr}
 80074c2:	b084      	sub	sp, #16
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	6078      	str	r0, [r7, #4]
 80074c8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80074ca:	2300      	movs	r3, #0
 80074cc:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 80074ce:	683b      	ldr	r3, [r7, #0]
 80074d0:	889b      	ldrh	r3, [r3, #4]
 80074d2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80074d4:	683b      	ldr	r3, [r7, #0]
 80074d6:	781b      	ldrb	r3, [r3, #0]
 80074d8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80074dc:	2b40      	cmp	r3, #64	; 0x40
 80074de:	d007      	beq.n	80074f0 <USBD_StdEPReq+0x30>
 80074e0:	2b40      	cmp	r3, #64	; 0x40
 80074e2:	f200 8146 	bhi.w	8007772 <USBD_StdEPReq+0x2b2>
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d00a      	beq.n	8007500 <USBD_StdEPReq+0x40>
 80074ea:	2b20      	cmp	r3, #32
 80074ec:	f040 8141 	bne.w	8007772 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80074f6:	689b      	ldr	r3, [r3, #8]
 80074f8:	6839      	ldr	r1, [r7, #0]
 80074fa:	6878      	ldr	r0, [r7, #4]
 80074fc:	4798      	blx	r3
      break;
 80074fe:	e13d      	b.n	800777c <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8007500:	683b      	ldr	r3, [r7, #0]
 8007502:	781b      	ldrb	r3, [r3, #0]
 8007504:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007508:	2b20      	cmp	r3, #32
 800750a:	d10a      	bne.n	8007522 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007512:	689b      	ldr	r3, [r3, #8]
 8007514:	6839      	ldr	r1, [r7, #0]
 8007516:	6878      	ldr	r0, [r7, #4]
 8007518:	4798      	blx	r3
 800751a:	4603      	mov	r3, r0
 800751c:	73fb      	strb	r3, [r7, #15]

        return ret;
 800751e:	7bfb      	ldrb	r3, [r7, #15]
 8007520:	e12d      	b.n	800777e <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8007522:	683b      	ldr	r3, [r7, #0]
 8007524:	785b      	ldrb	r3, [r3, #1]
 8007526:	2b03      	cmp	r3, #3
 8007528:	d007      	beq.n	800753a <USBD_StdEPReq+0x7a>
 800752a:	2b03      	cmp	r3, #3
 800752c:	f300 811b 	bgt.w	8007766 <USBD_StdEPReq+0x2a6>
 8007530:	2b00      	cmp	r3, #0
 8007532:	d072      	beq.n	800761a <USBD_StdEPReq+0x15a>
 8007534:	2b01      	cmp	r3, #1
 8007536:	d03a      	beq.n	80075ae <USBD_StdEPReq+0xee>
 8007538:	e115      	b.n	8007766 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007540:	2b02      	cmp	r3, #2
 8007542:	d002      	beq.n	800754a <USBD_StdEPReq+0x8a>
 8007544:	2b03      	cmp	r3, #3
 8007546:	d015      	beq.n	8007574 <USBD_StdEPReq+0xb4>
 8007548:	e02b      	b.n	80075a2 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800754a:	7bbb      	ldrb	r3, [r7, #14]
 800754c:	2b00      	cmp	r3, #0
 800754e:	d00c      	beq.n	800756a <USBD_StdEPReq+0xaa>
 8007550:	7bbb      	ldrb	r3, [r7, #14]
 8007552:	2b80      	cmp	r3, #128	; 0x80
 8007554:	d009      	beq.n	800756a <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007556:	7bbb      	ldrb	r3, [r7, #14]
 8007558:	4619      	mov	r1, r3
 800755a:	6878      	ldr	r0, [r7, #4]
 800755c:	f001 f8b4 	bl	80086c8 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007560:	2180      	movs	r1, #128	; 0x80
 8007562:	6878      	ldr	r0, [r7, #4]
 8007564:	f001 f8b0 	bl	80086c8 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007568:	e020      	b.n	80075ac <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800756a:	6839      	ldr	r1, [r7, #0]
 800756c:	6878      	ldr	r0, [r7, #4]
 800756e:	f000 fc1e 	bl	8007dae <USBD_CtlError>
              break;
 8007572:	e01b      	b.n	80075ac <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007574:	683b      	ldr	r3, [r7, #0]
 8007576:	885b      	ldrh	r3, [r3, #2]
 8007578:	2b00      	cmp	r3, #0
 800757a:	d10e      	bne.n	800759a <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 800757c:	7bbb      	ldrb	r3, [r7, #14]
 800757e:	2b00      	cmp	r3, #0
 8007580:	d00b      	beq.n	800759a <USBD_StdEPReq+0xda>
 8007582:	7bbb      	ldrb	r3, [r7, #14]
 8007584:	2b80      	cmp	r3, #128	; 0x80
 8007586:	d008      	beq.n	800759a <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007588:	683b      	ldr	r3, [r7, #0]
 800758a:	88db      	ldrh	r3, [r3, #6]
 800758c:	2b00      	cmp	r3, #0
 800758e:	d104      	bne.n	800759a <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8007590:	7bbb      	ldrb	r3, [r7, #14]
 8007592:	4619      	mov	r1, r3
 8007594:	6878      	ldr	r0, [r7, #4]
 8007596:	f001 f897 	bl	80086c8 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800759a:	6878      	ldr	r0, [r7, #4]
 800759c:	f000 fccf 	bl	8007f3e <USBD_CtlSendStatus>

              break;
 80075a0:	e004      	b.n	80075ac <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 80075a2:	6839      	ldr	r1, [r7, #0]
 80075a4:	6878      	ldr	r0, [r7, #4]
 80075a6:	f000 fc02 	bl	8007dae <USBD_CtlError>
              break;
 80075aa:	bf00      	nop
          }
          break;
 80075ac:	e0e0      	b.n	8007770 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075b4:	2b02      	cmp	r3, #2
 80075b6:	d002      	beq.n	80075be <USBD_StdEPReq+0xfe>
 80075b8:	2b03      	cmp	r3, #3
 80075ba:	d015      	beq.n	80075e8 <USBD_StdEPReq+0x128>
 80075bc:	e026      	b.n	800760c <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80075be:	7bbb      	ldrb	r3, [r7, #14]
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d00c      	beq.n	80075de <USBD_StdEPReq+0x11e>
 80075c4:	7bbb      	ldrb	r3, [r7, #14]
 80075c6:	2b80      	cmp	r3, #128	; 0x80
 80075c8:	d009      	beq.n	80075de <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80075ca:	7bbb      	ldrb	r3, [r7, #14]
 80075cc:	4619      	mov	r1, r3
 80075ce:	6878      	ldr	r0, [r7, #4]
 80075d0:	f001 f87a 	bl	80086c8 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80075d4:	2180      	movs	r1, #128	; 0x80
 80075d6:	6878      	ldr	r0, [r7, #4]
 80075d8:	f001 f876 	bl	80086c8 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80075dc:	e01c      	b.n	8007618 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 80075de:	6839      	ldr	r1, [r7, #0]
 80075e0:	6878      	ldr	r0, [r7, #4]
 80075e2:	f000 fbe4 	bl	8007dae <USBD_CtlError>
              break;
 80075e6:	e017      	b.n	8007618 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80075e8:	683b      	ldr	r3, [r7, #0]
 80075ea:	885b      	ldrh	r3, [r3, #2]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d112      	bne.n	8007616 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80075f0:	7bbb      	ldrb	r3, [r7, #14]
 80075f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d004      	beq.n	8007604 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80075fa:	7bbb      	ldrb	r3, [r7, #14]
 80075fc:	4619      	mov	r1, r3
 80075fe:	6878      	ldr	r0, [r7, #4]
 8007600:	f001 f881 	bl	8008706 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8007604:	6878      	ldr	r0, [r7, #4]
 8007606:	f000 fc9a 	bl	8007f3e <USBD_CtlSendStatus>
              }
              break;
 800760a:	e004      	b.n	8007616 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800760c:	6839      	ldr	r1, [r7, #0]
 800760e:	6878      	ldr	r0, [r7, #4]
 8007610:	f000 fbcd 	bl	8007dae <USBD_CtlError>
              break;
 8007614:	e000      	b.n	8007618 <USBD_StdEPReq+0x158>
              break;
 8007616:	bf00      	nop
          }
          break;
 8007618:	e0aa      	b.n	8007770 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007620:	2b02      	cmp	r3, #2
 8007622:	d002      	beq.n	800762a <USBD_StdEPReq+0x16a>
 8007624:	2b03      	cmp	r3, #3
 8007626:	d032      	beq.n	800768e <USBD_StdEPReq+0x1ce>
 8007628:	e097      	b.n	800775a <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800762a:	7bbb      	ldrb	r3, [r7, #14]
 800762c:	2b00      	cmp	r3, #0
 800762e:	d007      	beq.n	8007640 <USBD_StdEPReq+0x180>
 8007630:	7bbb      	ldrb	r3, [r7, #14]
 8007632:	2b80      	cmp	r3, #128	; 0x80
 8007634:	d004      	beq.n	8007640 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8007636:	6839      	ldr	r1, [r7, #0]
 8007638:	6878      	ldr	r0, [r7, #4]
 800763a:	f000 fbb8 	bl	8007dae <USBD_CtlError>
                break;
 800763e:	e091      	b.n	8007764 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007640:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007644:	2b00      	cmp	r3, #0
 8007646:	da0b      	bge.n	8007660 <USBD_StdEPReq+0x1a0>
 8007648:	7bbb      	ldrb	r3, [r7, #14]
 800764a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800764e:	4613      	mov	r3, r2
 8007650:	009b      	lsls	r3, r3, #2
 8007652:	4413      	add	r3, r2
 8007654:	009b      	lsls	r3, r3, #2
 8007656:	3310      	adds	r3, #16
 8007658:	687a      	ldr	r2, [r7, #4]
 800765a:	4413      	add	r3, r2
 800765c:	3304      	adds	r3, #4
 800765e:	e00b      	b.n	8007678 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007660:	7bbb      	ldrb	r3, [r7, #14]
 8007662:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007666:	4613      	mov	r3, r2
 8007668:	009b      	lsls	r3, r3, #2
 800766a:	4413      	add	r3, r2
 800766c:	009b      	lsls	r3, r3, #2
 800766e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007672:	687a      	ldr	r2, [r7, #4]
 8007674:	4413      	add	r3, r2
 8007676:	3304      	adds	r3, #4
 8007678:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800767a:	68bb      	ldr	r3, [r7, #8]
 800767c:	2200      	movs	r2, #0
 800767e:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007680:	68bb      	ldr	r3, [r7, #8]
 8007682:	2202      	movs	r2, #2
 8007684:	4619      	mov	r1, r3
 8007686:	6878      	ldr	r0, [r7, #4]
 8007688:	f000 fbfb 	bl	8007e82 <USBD_CtlSendData>
              break;
 800768c:	e06a      	b.n	8007764 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800768e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007692:	2b00      	cmp	r3, #0
 8007694:	da11      	bge.n	80076ba <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007696:	7bbb      	ldrb	r3, [r7, #14]
 8007698:	f003 020f 	and.w	r2, r3, #15
 800769c:	6879      	ldr	r1, [r7, #4]
 800769e:	4613      	mov	r3, r2
 80076a0:	009b      	lsls	r3, r3, #2
 80076a2:	4413      	add	r3, r2
 80076a4:	009b      	lsls	r3, r3, #2
 80076a6:	440b      	add	r3, r1
 80076a8:	3318      	adds	r3, #24
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d117      	bne.n	80076e0 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80076b0:	6839      	ldr	r1, [r7, #0]
 80076b2:	6878      	ldr	r0, [r7, #4]
 80076b4:	f000 fb7b 	bl	8007dae <USBD_CtlError>
                  break;
 80076b8:	e054      	b.n	8007764 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80076ba:	7bbb      	ldrb	r3, [r7, #14]
 80076bc:	f003 020f 	and.w	r2, r3, #15
 80076c0:	6879      	ldr	r1, [r7, #4]
 80076c2:	4613      	mov	r3, r2
 80076c4:	009b      	lsls	r3, r3, #2
 80076c6:	4413      	add	r3, r2
 80076c8:	009b      	lsls	r3, r3, #2
 80076ca:	440b      	add	r3, r1
 80076cc:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d104      	bne.n	80076e0 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80076d6:	6839      	ldr	r1, [r7, #0]
 80076d8:	6878      	ldr	r0, [r7, #4]
 80076da:	f000 fb68 	bl	8007dae <USBD_CtlError>
                  break;
 80076de:	e041      	b.n	8007764 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80076e0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	da0b      	bge.n	8007700 <USBD_StdEPReq+0x240>
 80076e8:	7bbb      	ldrb	r3, [r7, #14]
 80076ea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80076ee:	4613      	mov	r3, r2
 80076f0:	009b      	lsls	r3, r3, #2
 80076f2:	4413      	add	r3, r2
 80076f4:	009b      	lsls	r3, r3, #2
 80076f6:	3310      	adds	r3, #16
 80076f8:	687a      	ldr	r2, [r7, #4]
 80076fa:	4413      	add	r3, r2
 80076fc:	3304      	adds	r3, #4
 80076fe:	e00b      	b.n	8007718 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007700:	7bbb      	ldrb	r3, [r7, #14]
 8007702:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007706:	4613      	mov	r3, r2
 8007708:	009b      	lsls	r3, r3, #2
 800770a:	4413      	add	r3, r2
 800770c:	009b      	lsls	r3, r3, #2
 800770e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007712:	687a      	ldr	r2, [r7, #4]
 8007714:	4413      	add	r3, r2
 8007716:	3304      	adds	r3, #4
 8007718:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800771a:	7bbb      	ldrb	r3, [r7, #14]
 800771c:	2b00      	cmp	r3, #0
 800771e:	d002      	beq.n	8007726 <USBD_StdEPReq+0x266>
 8007720:	7bbb      	ldrb	r3, [r7, #14]
 8007722:	2b80      	cmp	r3, #128	; 0x80
 8007724:	d103      	bne.n	800772e <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8007726:	68bb      	ldr	r3, [r7, #8]
 8007728:	2200      	movs	r2, #0
 800772a:	601a      	str	r2, [r3, #0]
 800772c:	e00e      	b.n	800774c <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800772e:	7bbb      	ldrb	r3, [r7, #14]
 8007730:	4619      	mov	r1, r3
 8007732:	6878      	ldr	r0, [r7, #4]
 8007734:	f001 f806 	bl	8008744 <USBD_LL_IsStallEP>
 8007738:	4603      	mov	r3, r0
 800773a:	2b00      	cmp	r3, #0
 800773c:	d003      	beq.n	8007746 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800773e:	68bb      	ldr	r3, [r7, #8]
 8007740:	2201      	movs	r2, #1
 8007742:	601a      	str	r2, [r3, #0]
 8007744:	e002      	b.n	800774c <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8007746:	68bb      	ldr	r3, [r7, #8]
 8007748:	2200      	movs	r2, #0
 800774a:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800774c:	68bb      	ldr	r3, [r7, #8]
 800774e:	2202      	movs	r2, #2
 8007750:	4619      	mov	r1, r3
 8007752:	6878      	ldr	r0, [r7, #4]
 8007754:	f000 fb95 	bl	8007e82 <USBD_CtlSendData>
              break;
 8007758:	e004      	b.n	8007764 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800775a:	6839      	ldr	r1, [r7, #0]
 800775c:	6878      	ldr	r0, [r7, #4]
 800775e:	f000 fb26 	bl	8007dae <USBD_CtlError>
              break;
 8007762:	bf00      	nop
          }
          break;
 8007764:	e004      	b.n	8007770 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8007766:	6839      	ldr	r1, [r7, #0]
 8007768:	6878      	ldr	r0, [r7, #4]
 800776a:	f000 fb20 	bl	8007dae <USBD_CtlError>
          break;
 800776e:	bf00      	nop
      }
      break;
 8007770:	e004      	b.n	800777c <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8007772:	6839      	ldr	r1, [r7, #0]
 8007774:	6878      	ldr	r0, [r7, #4]
 8007776:	f000 fb1a 	bl	8007dae <USBD_CtlError>
      break;
 800777a:	bf00      	nop
  }

  return ret;
 800777c:	7bfb      	ldrb	r3, [r7, #15]
}
 800777e:	4618      	mov	r0, r3
 8007780:	3710      	adds	r7, #16
 8007782:	46bd      	mov	sp, r7
 8007784:	bd80      	pop	{r7, pc}
	...

08007788 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007788:	b580      	push	{r7, lr}
 800778a:	b084      	sub	sp, #16
 800778c:	af00      	add	r7, sp, #0
 800778e:	6078      	str	r0, [r7, #4]
 8007790:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007792:	2300      	movs	r3, #0
 8007794:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007796:	2300      	movs	r3, #0
 8007798:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800779a:	2300      	movs	r3, #0
 800779c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800779e:	683b      	ldr	r3, [r7, #0]
 80077a0:	885b      	ldrh	r3, [r3, #2]
 80077a2:	0a1b      	lsrs	r3, r3, #8
 80077a4:	b29b      	uxth	r3, r3
 80077a6:	3b01      	subs	r3, #1
 80077a8:	2b06      	cmp	r3, #6
 80077aa:	f200 8128 	bhi.w	80079fe <USBD_GetDescriptor+0x276>
 80077ae:	a201      	add	r2, pc, #4	; (adr r2, 80077b4 <USBD_GetDescriptor+0x2c>)
 80077b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077b4:	080077d1 	.word	0x080077d1
 80077b8:	080077e9 	.word	0x080077e9
 80077bc:	08007829 	.word	0x08007829
 80077c0:	080079ff 	.word	0x080079ff
 80077c4:	080079ff 	.word	0x080079ff
 80077c8:	0800799f 	.word	0x0800799f
 80077cc:	080079cb 	.word	0x080079cb
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	687a      	ldr	r2, [r7, #4]
 80077da:	7c12      	ldrb	r2, [r2, #16]
 80077dc:	f107 0108 	add.w	r1, r7, #8
 80077e0:	4610      	mov	r0, r2
 80077e2:	4798      	blx	r3
 80077e4:	60f8      	str	r0, [r7, #12]
      break;
 80077e6:	e112      	b.n	8007a0e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	7c1b      	ldrb	r3, [r3, #16]
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d10d      	bne.n	800780c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80077f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077f8:	f107 0208 	add.w	r2, r7, #8
 80077fc:	4610      	mov	r0, r2
 80077fe:	4798      	blx	r3
 8007800:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	3301      	adds	r3, #1
 8007806:	2202      	movs	r2, #2
 8007808:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800780a:	e100      	b.n	8007a0e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007814:	f107 0208 	add.w	r2, r7, #8
 8007818:	4610      	mov	r0, r2
 800781a:	4798      	blx	r3
 800781c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	3301      	adds	r3, #1
 8007822:	2202      	movs	r2, #2
 8007824:	701a      	strb	r2, [r3, #0]
      break;
 8007826:	e0f2      	b.n	8007a0e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007828:	683b      	ldr	r3, [r7, #0]
 800782a:	885b      	ldrh	r3, [r3, #2]
 800782c:	b2db      	uxtb	r3, r3
 800782e:	2b05      	cmp	r3, #5
 8007830:	f200 80ac 	bhi.w	800798c <USBD_GetDescriptor+0x204>
 8007834:	a201      	add	r2, pc, #4	; (adr r2, 800783c <USBD_GetDescriptor+0xb4>)
 8007836:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800783a:	bf00      	nop
 800783c:	08007855 	.word	0x08007855
 8007840:	08007889 	.word	0x08007889
 8007844:	080078bd 	.word	0x080078bd
 8007848:	080078f1 	.word	0x080078f1
 800784c:	08007925 	.word	0x08007925
 8007850:	08007959 	.word	0x08007959
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800785a:	685b      	ldr	r3, [r3, #4]
 800785c:	2b00      	cmp	r3, #0
 800785e:	d00b      	beq.n	8007878 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007866:	685b      	ldr	r3, [r3, #4]
 8007868:	687a      	ldr	r2, [r7, #4]
 800786a:	7c12      	ldrb	r2, [r2, #16]
 800786c:	f107 0108 	add.w	r1, r7, #8
 8007870:	4610      	mov	r0, r2
 8007872:	4798      	blx	r3
 8007874:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007876:	e091      	b.n	800799c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007878:	6839      	ldr	r1, [r7, #0]
 800787a:	6878      	ldr	r0, [r7, #4]
 800787c:	f000 fa97 	bl	8007dae <USBD_CtlError>
            err++;
 8007880:	7afb      	ldrb	r3, [r7, #11]
 8007882:	3301      	adds	r3, #1
 8007884:	72fb      	strb	r3, [r7, #11]
          break;
 8007886:	e089      	b.n	800799c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800788e:	689b      	ldr	r3, [r3, #8]
 8007890:	2b00      	cmp	r3, #0
 8007892:	d00b      	beq.n	80078ac <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800789a:	689b      	ldr	r3, [r3, #8]
 800789c:	687a      	ldr	r2, [r7, #4]
 800789e:	7c12      	ldrb	r2, [r2, #16]
 80078a0:	f107 0108 	add.w	r1, r7, #8
 80078a4:	4610      	mov	r0, r2
 80078a6:	4798      	blx	r3
 80078a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80078aa:	e077      	b.n	800799c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80078ac:	6839      	ldr	r1, [r7, #0]
 80078ae:	6878      	ldr	r0, [r7, #4]
 80078b0:	f000 fa7d 	bl	8007dae <USBD_CtlError>
            err++;
 80078b4:	7afb      	ldrb	r3, [r7, #11]
 80078b6:	3301      	adds	r3, #1
 80078b8:	72fb      	strb	r3, [r7, #11]
          break;
 80078ba:	e06f      	b.n	800799c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80078c2:	68db      	ldr	r3, [r3, #12]
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d00b      	beq.n	80078e0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80078ce:	68db      	ldr	r3, [r3, #12]
 80078d0:	687a      	ldr	r2, [r7, #4]
 80078d2:	7c12      	ldrb	r2, [r2, #16]
 80078d4:	f107 0108 	add.w	r1, r7, #8
 80078d8:	4610      	mov	r0, r2
 80078da:	4798      	blx	r3
 80078dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80078de:	e05d      	b.n	800799c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80078e0:	6839      	ldr	r1, [r7, #0]
 80078e2:	6878      	ldr	r0, [r7, #4]
 80078e4:	f000 fa63 	bl	8007dae <USBD_CtlError>
            err++;
 80078e8:	7afb      	ldrb	r3, [r7, #11]
 80078ea:	3301      	adds	r3, #1
 80078ec:	72fb      	strb	r3, [r7, #11]
          break;
 80078ee:	e055      	b.n	800799c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80078f6:	691b      	ldr	r3, [r3, #16]
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d00b      	beq.n	8007914 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007902:	691b      	ldr	r3, [r3, #16]
 8007904:	687a      	ldr	r2, [r7, #4]
 8007906:	7c12      	ldrb	r2, [r2, #16]
 8007908:	f107 0108 	add.w	r1, r7, #8
 800790c:	4610      	mov	r0, r2
 800790e:	4798      	blx	r3
 8007910:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007912:	e043      	b.n	800799c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007914:	6839      	ldr	r1, [r7, #0]
 8007916:	6878      	ldr	r0, [r7, #4]
 8007918:	f000 fa49 	bl	8007dae <USBD_CtlError>
            err++;
 800791c:	7afb      	ldrb	r3, [r7, #11]
 800791e:	3301      	adds	r3, #1
 8007920:	72fb      	strb	r3, [r7, #11]
          break;
 8007922:	e03b      	b.n	800799c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800792a:	695b      	ldr	r3, [r3, #20]
 800792c:	2b00      	cmp	r3, #0
 800792e:	d00b      	beq.n	8007948 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007936:	695b      	ldr	r3, [r3, #20]
 8007938:	687a      	ldr	r2, [r7, #4]
 800793a:	7c12      	ldrb	r2, [r2, #16]
 800793c:	f107 0108 	add.w	r1, r7, #8
 8007940:	4610      	mov	r0, r2
 8007942:	4798      	blx	r3
 8007944:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007946:	e029      	b.n	800799c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007948:	6839      	ldr	r1, [r7, #0]
 800794a:	6878      	ldr	r0, [r7, #4]
 800794c:	f000 fa2f 	bl	8007dae <USBD_CtlError>
            err++;
 8007950:	7afb      	ldrb	r3, [r7, #11]
 8007952:	3301      	adds	r3, #1
 8007954:	72fb      	strb	r3, [r7, #11]
          break;
 8007956:	e021      	b.n	800799c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800795e:	699b      	ldr	r3, [r3, #24]
 8007960:	2b00      	cmp	r3, #0
 8007962:	d00b      	beq.n	800797c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800796a:	699b      	ldr	r3, [r3, #24]
 800796c:	687a      	ldr	r2, [r7, #4]
 800796e:	7c12      	ldrb	r2, [r2, #16]
 8007970:	f107 0108 	add.w	r1, r7, #8
 8007974:	4610      	mov	r0, r2
 8007976:	4798      	blx	r3
 8007978:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800797a:	e00f      	b.n	800799c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800797c:	6839      	ldr	r1, [r7, #0]
 800797e:	6878      	ldr	r0, [r7, #4]
 8007980:	f000 fa15 	bl	8007dae <USBD_CtlError>
            err++;
 8007984:	7afb      	ldrb	r3, [r7, #11]
 8007986:	3301      	adds	r3, #1
 8007988:	72fb      	strb	r3, [r7, #11]
          break;
 800798a:	e007      	b.n	800799c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800798c:	6839      	ldr	r1, [r7, #0]
 800798e:	6878      	ldr	r0, [r7, #4]
 8007990:	f000 fa0d 	bl	8007dae <USBD_CtlError>
          err++;
 8007994:	7afb      	ldrb	r3, [r7, #11]
 8007996:	3301      	adds	r3, #1
 8007998:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800799a:	e038      	b.n	8007a0e <USBD_GetDescriptor+0x286>
 800799c:	e037      	b.n	8007a0e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	7c1b      	ldrb	r3, [r3, #16]
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d109      	bne.n	80079ba <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80079ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079ae:	f107 0208 	add.w	r2, r7, #8
 80079b2:	4610      	mov	r0, r2
 80079b4:	4798      	blx	r3
 80079b6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80079b8:	e029      	b.n	8007a0e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80079ba:	6839      	ldr	r1, [r7, #0]
 80079bc:	6878      	ldr	r0, [r7, #4]
 80079be:	f000 f9f6 	bl	8007dae <USBD_CtlError>
        err++;
 80079c2:	7afb      	ldrb	r3, [r7, #11]
 80079c4:	3301      	adds	r3, #1
 80079c6:	72fb      	strb	r3, [r7, #11]
      break;
 80079c8:	e021      	b.n	8007a0e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	7c1b      	ldrb	r3, [r3, #16]
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d10d      	bne.n	80079ee <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80079d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079da:	f107 0208 	add.w	r2, r7, #8
 80079de:	4610      	mov	r0, r2
 80079e0:	4798      	blx	r3
 80079e2:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	3301      	adds	r3, #1
 80079e8:	2207      	movs	r2, #7
 80079ea:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80079ec:	e00f      	b.n	8007a0e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80079ee:	6839      	ldr	r1, [r7, #0]
 80079f0:	6878      	ldr	r0, [r7, #4]
 80079f2:	f000 f9dc 	bl	8007dae <USBD_CtlError>
        err++;
 80079f6:	7afb      	ldrb	r3, [r7, #11]
 80079f8:	3301      	adds	r3, #1
 80079fa:	72fb      	strb	r3, [r7, #11]
      break;
 80079fc:	e007      	b.n	8007a0e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80079fe:	6839      	ldr	r1, [r7, #0]
 8007a00:	6878      	ldr	r0, [r7, #4]
 8007a02:	f000 f9d4 	bl	8007dae <USBD_CtlError>
      err++;
 8007a06:	7afb      	ldrb	r3, [r7, #11]
 8007a08:	3301      	adds	r3, #1
 8007a0a:	72fb      	strb	r3, [r7, #11]
      break;
 8007a0c:	bf00      	nop
  }

  if (err != 0U)
 8007a0e:	7afb      	ldrb	r3, [r7, #11]
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d11c      	bne.n	8007a4e <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8007a14:	893b      	ldrh	r3, [r7, #8]
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d011      	beq.n	8007a3e <USBD_GetDescriptor+0x2b6>
 8007a1a:	683b      	ldr	r3, [r7, #0]
 8007a1c:	88db      	ldrh	r3, [r3, #6]
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d00d      	beq.n	8007a3e <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8007a22:	683b      	ldr	r3, [r7, #0]
 8007a24:	88da      	ldrh	r2, [r3, #6]
 8007a26:	893b      	ldrh	r3, [r7, #8]
 8007a28:	4293      	cmp	r3, r2
 8007a2a:	bf28      	it	cs
 8007a2c:	4613      	movcs	r3, r2
 8007a2e:	b29b      	uxth	r3, r3
 8007a30:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007a32:	893b      	ldrh	r3, [r7, #8]
 8007a34:	461a      	mov	r2, r3
 8007a36:	68f9      	ldr	r1, [r7, #12]
 8007a38:	6878      	ldr	r0, [r7, #4]
 8007a3a:	f000 fa22 	bl	8007e82 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8007a3e:	683b      	ldr	r3, [r7, #0]
 8007a40:	88db      	ldrh	r3, [r3, #6]
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d104      	bne.n	8007a50 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8007a46:	6878      	ldr	r0, [r7, #4]
 8007a48:	f000 fa79 	bl	8007f3e <USBD_CtlSendStatus>
 8007a4c:	e000      	b.n	8007a50 <USBD_GetDescriptor+0x2c8>
    return;
 8007a4e:	bf00      	nop
    }
  }
}
 8007a50:	3710      	adds	r7, #16
 8007a52:	46bd      	mov	sp, r7
 8007a54:	bd80      	pop	{r7, pc}
 8007a56:	bf00      	nop

08007a58 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007a58:	b580      	push	{r7, lr}
 8007a5a:	b084      	sub	sp, #16
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	6078      	str	r0, [r7, #4]
 8007a60:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007a62:	683b      	ldr	r3, [r7, #0]
 8007a64:	889b      	ldrh	r3, [r3, #4]
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d130      	bne.n	8007acc <USBD_SetAddress+0x74>
 8007a6a:	683b      	ldr	r3, [r7, #0]
 8007a6c:	88db      	ldrh	r3, [r3, #6]
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d12c      	bne.n	8007acc <USBD_SetAddress+0x74>
 8007a72:	683b      	ldr	r3, [r7, #0]
 8007a74:	885b      	ldrh	r3, [r3, #2]
 8007a76:	2b7f      	cmp	r3, #127	; 0x7f
 8007a78:	d828      	bhi.n	8007acc <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007a7a:	683b      	ldr	r3, [r7, #0]
 8007a7c:	885b      	ldrh	r3, [r3, #2]
 8007a7e:	b2db      	uxtb	r3, r3
 8007a80:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a84:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a8c:	2b03      	cmp	r3, #3
 8007a8e:	d104      	bne.n	8007a9a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8007a90:	6839      	ldr	r1, [r7, #0]
 8007a92:	6878      	ldr	r0, [r7, #4]
 8007a94:	f000 f98b 	bl	8007dae <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a98:	e01d      	b.n	8007ad6 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	7bfa      	ldrb	r2, [r7, #15]
 8007a9e:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007aa2:	7bfb      	ldrb	r3, [r7, #15]
 8007aa4:	4619      	mov	r1, r3
 8007aa6:	6878      	ldr	r0, [r7, #4]
 8007aa8:	f000 fe78 	bl	800879c <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8007aac:	6878      	ldr	r0, [r7, #4]
 8007aae:	f000 fa46 	bl	8007f3e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007ab2:	7bfb      	ldrb	r3, [r7, #15]
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d004      	beq.n	8007ac2 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	2202      	movs	r2, #2
 8007abc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ac0:	e009      	b.n	8007ad6 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	2201      	movs	r2, #1
 8007ac6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007aca:	e004      	b.n	8007ad6 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007acc:	6839      	ldr	r1, [r7, #0]
 8007ace:	6878      	ldr	r0, [r7, #4]
 8007ad0:	f000 f96d 	bl	8007dae <USBD_CtlError>
  }
}
 8007ad4:	bf00      	nop
 8007ad6:	bf00      	nop
 8007ad8:	3710      	adds	r7, #16
 8007ada:	46bd      	mov	sp, r7
 8007adc:	bd80      	pop	{r7, pc}
	...

08007ae0 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ae0:	b580      	push	{r7, lr}
 8007ae2:	b082      	sub	sp, #8
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	6078      	str	r0, [r7, #4]
 8007ae8:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007aea:	683b      	ldr	r3, [r7, #0]
 8007aec:	885b      	ldrh	r3, [r3, #2]
 8007aee:	b2da      	uxtb	r2, r3
 8007af0:	4b41      	ldr	r3, [pc, #260]	; (8007bf8 <USBD_SetConfig+0x118>)
 8007af2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007af4:	4b40      	ldr	r3, [pc, #256]	; (8007bf8 <USBD_SetConfig+0x118>)
 8007af6:	781b      	ldrb	r3, [r3, #0]
 8007af8:	2b01      	cmp	r3, #1
 8007afa:	d904      	bls.n	8007b06 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8007afc:	6839      	ldr	r1, [r7, #0]
 8007afe:	6878      	ldr	r0, [r7, #4]
 8007b00:	f000 f955 	bl	8007dae <USBD_CtlError>
 8007b04:	e075      	b.n	8007bf2 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b0c:	2b02      	cmp	r3, #2
 8007b0e:	d002      	beq.n	8007b16 <USBD_SetConfig+0x36>
 8007b10:	2b03      	cmp	r3, #3
 8007b12:	d023      	beq.n	8007b5c <USBD_SetConfig+0x7c>
 8007b14:	e062      	b.n	8007bdc <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8007b16:	4b38      	ldr	r3, [pc, #224]	; (8007bf8 <USBD_SetConfig+0x118>)
 8007b18:	781b      	ldrb	r3, [r3, #0]
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d01a      	beq.n	8007b54 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8007b1e:	4b36      	ldr	r3, [pc, #216]	; (8007bf8 <USBD_SetConfig+0x118>)
 8007b20:	781b      	ldrb	r3, [r3, #0]
 8007b22:	461a      	mov	r2, r3
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	2203      	movs	r2, #3
 8007b2c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007b30:	4b31      	ldr	r3, [pc, #196]	; (8007bf8 <USBD_SetConfig+0x118>)
 8007b32:	781b      	ldrb	r3, [r3, #0]
 8007b34:	4619      	mov	r1, r3
 8007b36:	6878      	ldr	r0, [r7, #4]
 8007b38:	f7ff f9e7 	bl	8006f0a <USBD_SetClassConfig>
 8007b3c:	4603      	mov	r3, r0
 8007b3e:	2b02      	cmp	r3, #2
 8007b40:	d104      	bne.n	8007b4c <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8007b42:	6839      	ldr	r1, [r7, #0]
 8007b44:	6878      	ldr	r0, [r7, #4]
 8007b46:	f000 f932 	bl	8007dae <USBD_CtlError>
            return;
 8007b4a:	e052      	b.n	8007bf2 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8007b4c:	6878      	ldr	r0, [r7, #4]
 8007b4e:	f000 f9f6 	bl	8007f3e <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007b52:	e04e      	b.n	8007bf2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007b54:	6878      	ldr	r0, [r7, #4]
 8007b56:	f000 f9f2 	bl	8007f3e <USBD_CtlSendStatus>
        break;
 8007b5a:	e04a      	b.n	8007bf2 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8007b5c:	4b26      	ldr	r3, [pc, #152]	; (8007bf8 <USBD_SetConfig+0x118>)
 8007b5e:	781b      	ldrb	r3, [r3, #0]
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d112      	bne.n	8007b8a <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	2202      	movs	r2, #2
 8007b68:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8007b6c:	4b22      	ldr	r3, [pc, #136]	; (8007bf8 <USBD_SetConfig+0x118>)
 8007b6e:	781b      	ldrb	r3, [r3, #0]
 8007b70:	461a      	mov	r2, r3
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8007b76:	4b20      	ldr	r3, [pc, #128]	; (8007bf8 <USBD_SetConfig+0x118>)
 8007b78:	781b      	ldrb	r3, [r3, #0]
 8007b7a:	4619      	mov	r1, r3
 8007b7c:	6878      	ldr	r0, [r7, #4]
 8007b7e:	f7ff f9e3 	bl	8006f48 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8007b82:	6878      	ldr	r0, [r7, #4]
 8007b84:	f000 f9db 	bl	8007f3e <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007b88:	e033      	b.n	8007bf2 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8007b8a:	4b1b      	ldr	r3, [pc, #108]	; (8007bf8 <USBD_SetConfig+0x118>)
 8007b8c:	781b      	ldrb	r3, [r3, #0]
 8007b8e:	461a      	mov	r2, r3
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	685b      	ldr	r3, [r3, #4]
 8007b94:	429a      	cmp	r2, r3
 8007b96:	d01d      	beq.n	8007bd4 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	685b      	ldr	r3, [r3, #4]
 8007b9c:	b2db      	uxtb	r3, r3
 8007b9e:	4619      	mov	r1, r3
 8007ba0:	6878      	ldr	r0, [r7, #4]
 8007ba2:	f7ff f9d1 	bl	8006f48 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8007ba6:	4b14      	ldr	r3, [pc, #80]	; (8007bf8 <USBD_SetConfig+0x118>)
 8007ba8:	781b      	ldrb	r3, [r3, #0]
 8007baa:	461a      	mov	r2, r3
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007bb0:	4b11      	ldr	r3, [pc, #68]	; (8007bf8 <USBD_SetConfig+0x118>)
 8007bb2:	781b      	ldrb	r3, [r3, #0]
 8007bb4:	4619      	mov	r1, r3
 8007bb6:	6878      	ldr	r0, [r7, #4]
 8007bb8:	f7ff f9a7 	bl	8006f0a <USBD_SetClassConfig>
 8007bbc:	4603      	mov	r3, r0
 8007bbe:	2b02      	cmp	r3, #2
 8007bc0:	d104      	bne.n	8007bcc <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8007bc2:	6839      	ldr	r1, [r7, #0]
 8007bc4:	6878      	ldr	r0, [r7, #4]
 8007bc6:	f000 f8f2 	bl	8007dae <USBD_CtlError>
            return;
 8007bca:	e012      	b.n	8007bf2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007bcc:	6878      	ldr	r0, [r7, #4]
 8007bce:	f000 f9b6 	bl	8007f3e <USBD_CtlSendStatus>
        break;
 8007bd2:	e00e      	b.n	8007bf2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007bd4:	6878      	ldr	r0, [r7, #4]
 8007bd6:	f000 f9b2 	bl	8007f3e <USBD_CtlSendStatus>
        break;
 8007bda:	e00a      	b.n	8007bf2 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8007bdc:	6839      	ldr	r1, [r7, #0]
 8007bde:	6878      	ldr	r0, [r7, #4]
 8007be0:	f000 f8e5 	bl	8007dae <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8007be4:	4b04      	ldr	r3, [pc, #16]	; (8007bf8 <USBD_SetConfig+0x118>)
 8007be6:	781b      	ldrb	r3, [r3, #0]
 8007be8:	4619      	mov	r1, r3
 8007bea:	6878      	ldr	r0, [r7, #4]
 8007bec:	f7ff f9ac 	bl	8006f48 <USBD_ClrClassConfig>
        break;
 8007bf0:	bf00      	nop
    }
  }
}
 8007bf2:	3708      	adds	r7, #8
 8007bf4:	46bd      	mov	sp, r7
 8007bf6:	bd80      	pop	{r7, pc}
 8007bf8:	2000024c 	.word	0x2000024c

08007bfc <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007bfc:	b580      	push	{r7, lr}
 8007bfe:	b082      	sub	sp, #8
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	6078      	str	r0, [r7, #4]
 8007c04:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007c06:	683b      	ldr	r3, [r7, #0]
 8007c08:	88db      	ldrh	r3, [r3, #6]
 8007c0a:	2b01      	cmp	r3, #1
 8007c0c:	d004      	beq.n	8007c18 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007c0e:	6839      	ldr	r1, [r7, #0]
 8007c10:	6878      	ldr	r0, [r7, #4]
 8007c12:	f000 f8cc 	bl	8007dae <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007c16:	e022      	b.n	8007c5e <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c1e:	2b02      	cmp	r3, #2
 8007c20:	dc02      	bgt.n	8007c28 <USBD_GetConfig+0x2c>
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	dc03      	bgt.n	8007c2e <USBD_GetConfig+0x32>
 8007c26:	e015      	b.n	8007c54 <USBD_GetConfig+0x58>
 8007c28:	2b03      	cmp	r3, #3
 8007c2a:	d00b      	beq.n	8007c44 <USBD_GetConfig+0x48>
 8007c2c:	e012      	b.n	8007c54 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	2200      	movs	r2, #0
 8007c32:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	3308      	adds	r3, #8
 8007c38:	2201      	movs	r2, #1
 8007c3a:	4619      	mov	r1, r3
 8007c3c:	6878      	ldr	r0, [r7, #4]
 8007c3e:	f000 f920 	bl	8007e82 <USBD_CtlSendData>
        break;
 8007c42:	e00c      	b.n	8007c5e <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	3304      	adds	r3, #4
 8007c48:	2201      	movs	r2, #1
 8007c4a:	4619      	mov	r1, r3
 8007c4c:	6878      	ldr	r0, [r7, #4]
 8007c4e:	f000 f918 	bl	8007e82 <USBD_CtlSendData>
        break;
 8007c52:	e004      	b.n	8007c5e <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8007c54:	6839      	ldr	r1, [r7, #0]
 8007c56:	6878      	ldr	r0, [r7, #4]
 8007c58:	f000 f8a9 	bl	8007dae <USBD_CtlError>
        break;
 8007c5c:	bf00      	nop
}
 8007c5e:	bf00      	nop
 8007c60:	3708      	adds	r7, #8
 8007c62:	46bd      	mov	sp, r7
 8007c64:	bd80      	pop	{r7, pc}

08007c66 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c66:	b580      	push	{r7, lr}
 8007c68:	b082      	sub	sp, #8
 8007c6a:	af00      	add	r7, sp, #0
 8007c6c:	6078      	str	r0, [r7, #4]
 8007c6e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c76:	3b01      	subs	r3, #1
 8007c78:	2b02      	cmp	r3, #2
 8007c7a:	d81e      	bhi.n	8007cba <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007c7c:	683b      	ldr	r3, [r7, #0]
 8007c7e:	88db      	ldrh	r3, [r3, #6]
 8007c80:	2b02      	cmp	r3, #2
 8007c82:	d004      	beq.n	8007c8e <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8007c84:	6839      	ldr	r1, [r7, #0]
 8007c86:	6878      	ldr	r0, [r7, #4]
 8007c88:	f000 f891 	bl	8007dae <USBD_CtlError>
        break;
 8007c8c:	e01a      	b.n	8007cc4 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	2201      	movs	r2, #1
 8007c92:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d005      	beq.n	8007caa <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	68db      	ldr	r3, [r3, #12]
 8007ca2:	f043 0202 	orr.w	r2, r3, #2
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	330c      	adds	r3, #12
 8007cae:	2202      	movs	r2, #2
 8007cb0:	4619      	mov	r1, r3
 8007cb2:	6878      	ldr	r0, [r7, #4]
 8007cb4:	f000 f8e5 	bl	8007e82 <USBD_CtlSendData>
      break;
 8007cb8:	e004      	b.n	8007cc4 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8007cba:	6839      	ldr	r1, [r7, #0]
 8007cbc:	6878      	ldr	r0, [r7, #4]
 8007cbe:	f000 f876 	bl	8007dae <USBD_CtlError>
      break;
 8007cc2:	bf00      	nop
  }
}
 8007cc4:	bf00      	nop
 8007cc6:	3708      	adds	r7, #8
 8007cc8:	46bd      	mov	sp, r7
 8007cca:	bd80      	pop	{r7, pc}

08007ccc <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007ccc:	b580      	push	{r7, lr}
 8007cce:	b082      	sub	sp, #8
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	6078      	str	r0, [r7, #4]
 8007cd4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007cd6:	683b      	ldr	r3, [r7, #0]
 8007cd8:	885b      	ldrh	r3, [r3, #2]
 8007cda:	2b01      	cmp	r3, #1
 8007cdc:	d106      	bne.n	8007cec <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	2201      	movs	r2, #1
 8007ce2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8007ce6:	6878      	ldr	r0, [r7, #4]
 8007ce8:	f000 f929 	bl	8007f3e <USBD_CtlSendStatus>
  }
}
 8007cec:	bf00      	nop
 8007cee:	3708      	adds	r7, #8
 8007cf0:	46bd      	mov	sp, r7
 8007cf2:	bd80      	pop	{r7, pc}

08007cf4 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007cf4:	b580      	push	{r7, lr}
 8007cf6:	b082      	sub	sp, #8
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	6078      	str	r0, [r7, #4]
 8007cfc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d04:	3b01      	subs	r3, #1
 8007d06:	2b02      	cmp	r3, #2
 8007d08:	d80b      	bhi.n	8007d22 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007d0a:	683b      	ldr	r3, [r7, #0]
 8007d0c:	885b      	ldrh	r3, [r3, #2]
 8007d0e:	2b01      	cmp	r3, #1
 8007d10:	d10c      	bne.n	8007d2c <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	2200      	movs	r2, #0
 8007d16:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8007d1a:	6878      	ldr	r0, [r7, #4]
 8007d1c:	f000 f90f 	bl	8007f3e <USBD_CtlSendStatus>
      }
      break;
 8007d20:	e004      	b.n	8007d2c <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8007d22:	6839      	ldr	r1, [r7, #0]
 8007d24:	6878      	ldr	r0, [r7, #4]
 8007d26:	f000 f842 	bl	8007dae <USBD_CtlError>
      break;
 8007d2a:	e000      	b.n	8007d2e <USBD_ClrFeature+0x3a>
      break;
 8007d2c:	bf00      	nop
  }
}
 8007d2e:	bf00      	nop
 8007d30:	3708      	adds	r7, #8
 8007d32:	46bd      	mov	sp, r7
 8007d34:	bd80      	pop	{r7, pc}

08007d36 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007d36:	b480      	push	{r7}
 8007d38:	b083      	sub	sp, #12
 8007d3a:	af00      	add	r7, sp, #0
 8007d3c:	6078      	str	r0, [r7, #4]
 8007d3e:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8007d40:	683b      	ldr	r3, [r7, #0]
 8007d42:	781a      	ldrb	r2, [r3, #0]
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8007d48:	683b      	ldr	r3, [r7, #0]
 8007d4a:	785a      	ldrb	r2, [r3, #1]
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8007d50:	683b      	ldr	r3, [r7, #0]
 8007d52:	3302      	adds	r3, #2
 8007d54:	781b      	ldrb	r3, [r3, #0]
 8007d56:	b29a      	uxth	r2, r3
 8007d58:	683b      	ldr	r3, [r7, #0]
 8007d5a:	3303      	adds	r3, #3
 8007d5c:	781b      	ldrb	r3, [r3, #0]
 8007d5e:	b29b      	uxth	r3, r3
 8007d60:	021b      	lsls	r3, r3, #8
 8007d62:	b29b      	uxth	r3, r3
 8007d64:	4413      	add	r3, r2
 8007d66:	b29a      	uxth	r2, r3
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8007d6c:	683b      	ldr	r3, [r7, #0]
 8007d6e:	3304      	adds	r3, #4
 8007d70:	781b      	ldrb	r3, [r3, #0]
 8007d72:	b29a      	uxth	r2, r3
 8007d74:	683b      	ldr	r3, [r7, #0]
 8007d76:	3305      	adds	r3, #5
 8007d78:	781b      	ldrb	r3, [r3, #0]
 8007d7a:	b29b      	uxth	r3, r3
 8007d7c:	021b      	lsls	r3, r3, #8
 8007d7e:	b29b      	uxth	r3, r3
 8007d80:	4413      	add	r3, r2
 8007d82:	b29a      	uxth	r2, r3
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8007d88:	683b      	ldr	r3, [r7, #0]
 8007d8a:	3306      	adds	r3, #6
 8007d8c:	781b      	ldrb	r3, [r3, #0]
 8007d8e:	b29a      	uxth	r2, r3
 8007d90:	683b      	ldr	r3, [r7, #0]
 8007d92:	3307      	adds	r3, #7
 8007d94:	781b      	ldrb	r3, [r3, #0]
 8007d96:	b29b      	uxth	r3, r3
 8007d98:	021b      	lsls	r3, r3, #8
 8007d9a:	b29b      	uxth	r3, r3
 8007d9c:	4413      	add	r3, r2
 8007d9e:	b29a      	uxth	r2, r3
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	80da      	strh	r2, [r3, #6]

}
 8007da4:	bf00      	nop
 8007da6:	370c      	adds	r7, #12
 8007da8:	46bd      	mov	sp, r7
 8007daa:	bc80      	pop	{r7}
 8007dac:	4770      	bx	lr

08007dae <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8007dae:	b580      	push	{r7, lr}
 8007db0:	b082      	sub	sp, #8
 8007db2:	af00      	add	r7, sp, #0
 8007db4:	6078      	str	r0, [r7, #4]
 8007db6:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8007db8:	2180      	movs	r1, #128	; 0x80
 8007dba:	6878      	ldr	r0, [r7, #4]
 8007dbc:	f000 fc84 	bl	80086c8 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8007dc0:	2100      	movs	r1, #0
 8007dc2:	6878      	ldr	r0, [r7, #4]
 8007dc4:	f000 fc80 	bl	80086c8 <USBD_LL_StallEP>
}
 8007dc8:	bf00      	nop
 8007dca:	3708      	adds	r7, #8
 8007dcc:	46bd      	mov	sp, r7
 8007dce:	bd80      	pop	{r7, pc}

08007dd0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007dd0:	b580      	push	{r7, lr}
 8007dd2:	b086      	sub	sp, #24
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	60f8      	str	r0, [r7, #12]
 8007dd8:	60b9      	str	r1, [r7, #8]
 8007dda:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007ddc:	2300      	movs	r3, #0
 8007dde:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d032      	beq.n	8007e4c <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8007de6:	68f8      	ldr	r0, [r7, #12]
 8007de8:	f000 f834 	bl	8007e54 <USBD_GetLen>
 8007dec:	4603      	mov	r3, r0
 8007dee:	3301      	adds	r3, #1
 8007df0:	b29b      	uxth	r3, r3
 8007df2:	005b      	lsls	r3, r3, #1
 8007df4:	b29a      	uxth	r2, r3
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8007dfa:	7dfb      	ldrb	r3, [r7, #23]
 8007dfc:	1c5a      	adds	r2, r3, #1
 8007dfe:	75fa      	strb	r2, [r7, #23]
 8007e00:	461a      	mov	r2, r3
 8007e02:	68bb      	ldr	r3, [r7, #8]
 8007e04:	4413      	add	r3, r2
 8007e06:	687a      	ldr	r2, [r7, #4]
 8007e08:	7812      	ldrb	r2, [r2, #0]
 8007e0a:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8007e0c:	7dfb      	ldrb	r3, [r7, #23]
 8007e0e:	1c5a      	adds	r2, r3, #1
 8007e10:	75fa      	strb	r2, [r7, #23]
 8007e12:	461a      	mov	r2, r3
 8007e14:	68bb      	ldr	r3, [r7, #8]
 8007e16:	4413      	add	r3, r2
 8007e18:	2203      	movs	r2, #3
 8007e1a:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8007e1c:	e012      	b.n	8007e44 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	1c5a      	adds	r2, r3, #1
 8007e22:	60fa      	str	r2, [r7, #12]
 8007e24:	7dfa      	ldrb	r2, [r7, #23]
 8007e26:	1c51      	adds	r1, r2, #1
 8007e28:	75f9      	strb	r1, [r7, #23]
 8007e2a:	4611      	mov	r1, r2
 8007e2c:	68ba      	ldr	r2, [r7, #8]
 8007e2e:	440a      	add	r2, r1
 8007e30:	781b      	ldrb	r3, [r3, #0]
 8007e32:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8007e34:	7dfb      	ldrb	r3, [r7, #23]
 8007e36:	1c5a      	adds	r2, r3, #1
 8007e38:	75fa      	strb	r2, [r7, #23]
 8007e3a:	461a      	mov	r2, r3
 8007e3c:	68bb      	ldr	r3, [r7, #8]
 8007e3e:	4413      	add	r3, r2
 8007e40:	2200      	movs	r2, #0
 8007e42:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	781b      	ldrb	r3, [r3, #0]
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d1e8      	bne.n	8007e1e <USBD_GetString+0x4e>
    }
  }
}
 8007e4c:	bf00      	nop
 8007e4e:	3718      	adds	r7, #24
 8007e50:	46bd      	mov	sp, r7
 8007e52:	bd80      	pop	{r7, pc}

08007e54 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007e54:	b480      	push	{r7}
 8007e56:	b085      	sub	sp, #20
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007e5c:	2300      	movs	r3, #0
 8007e5e:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8007e60:	e005      	b.n	8007e6e <USBD_GetLen+0x1a>
  {
    len++;
 8007e62:	7bfb      	ldrb	r3, [r7, #15]
 8007e64:	3301      	adds	r3, #1
 8007e66:	73fb      	strb	r3, [r7, #15]
    buf++;
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	3301      	adds	r3, #1
 8007e6c:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	781b      	ldrb	r3, [r3, #0]
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d1f5      	bne.n	8007e62 <USBD_GetLen+0xe>
  }

  return len;
 8007e76:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e78:	4618      	mov	r0, r3
 8007e7a:	3714      	adds	r7, #20
 8007e7c:	46bd      	mov	sp, r7
 8007e7e:	bc80      	pop	{r7}
 8007e80:	4770      	bx	lr

08007e82 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8007e82:	b580      	push	{r7, lr}
 8007e84:	b084      	sub	sp, #16
 8007e86:	af00      	add	r7, sp, #0
 8007e88:	60f8      	str	r0, [r7, #12]
 8007e8a:	60b9      	str	r1, [r7, #8]
 8007e8c:	4613      	mov	r3, r2
 8007e8e:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	2202      	movs	r2, #2
 8007e94:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007e98:	88fa      	ldrh	r2, [r7, #6]
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8007e9e:	88fa      	ldrh	r2, [r7, #6]
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007ea4:	88fb      	ldrh	r3, [r7, #6]
 8007ea6:	68ba      	ldr	r2, [r7, #8]
 8007ea8:	2100      	movs	r1, #0
 8007eaa:	68f8      	ldr	r0, [r7, #12]
 8007eac:	f000 fc95 	bl	80087da <USBD_LL_Transmit>

  return USBD_OK;
 8007eb0:	2300      	movs	r3, #0
}
 8007eb2:	4618      	mov	r0, r3
 8007eb4:	3710      	adds	r7, #16
 8007eb6:	46bd      	mov	sp, r7
 8007eb8:	bd80      	pop	{r7, pc}

08007eba <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8007eba:	b580      	push	{r7, lr}
 8007ebc:	b084      	sub	sp, #16
 8007ebe:	af00      	add	r7, sp, #0
 8007ec0:	60f8      	str	r0, [r7, #12]
 8007ec2:	60b9      	str	r1, [r7, #8]
 8007ec4:	4613      	mov	r3, r2
 8007ec6:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007ec8:	88fb      	ldrh	r3, [r7, #6]
 8007eca:	68ba      	ldr	r2, [r7, #8]
 8007ecc:	2100      	movs	r1, #0
 8007ece:	68f8      	ldr	r0, [r7, #12]
 8007ed0:	f000 fc83 	bl	80087da <USBD_LL_Transmit>

  return USBD_OK;
 8007ed4:	2300      	movs	r3, #0
}
 8007ed6:	4618      	mov	r0, r3
 8007ed8:	3710      	adds	r7, #16
 8007eda:	46bd      	mov	sp, r7
 8007edc:	bd80      	pop	{r7, pc}

08007ede <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8007ede:	b580      	push	{r7, lr}
 8007ee0:	b084      	sub	sp, #16
 8007ee2:	af00      	add	r7, sp, #0
 8007ee4:	60f8      	str	r0, [r7, #12]
 8007ee6:	60b9      	str	r1, [r7, #8]
 8007ee8:	4613      	mov	r3, r2
 8007eea:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	2203      	movs	r2, #3
 8007ef0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007ef4:	88fa      	ldrh	r2, [r7, #6]
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8007efc:	88fa      	ldrh	r2, [r7, #6]
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007f04:	88fb      	ldrh	r3, [r7, #6]
 8007f06:	68ba      	ldr	r2, [r7, #8]
 8007f08:	2100      	movs	r1, #0
 8007f0a:	68f8      	ldr	r0, [r7, #12]
 8007f0c:	f000 fc88 	bl	8008820 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007f10:	2300      	movs	r3, #0
}
 8007f12:	4618      	mov	r0, r3
 8007f14:	3710      	adds	r7, #16
 8007f16:	46bd      	mov	sp, r7
 8007f18:	bd80      	pop	{r7, pc}

08007f1a <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8007f1a:	b580      	push	{r7, lr}
 8007f1c:	b084      	sub	sp, #16
 8007f1e:	af00      	add	r7, sp, #0
 8007f20:	60f8      	str	r0, [r7, #12]
 8007f22:	60b9      	str	r1, [r7, #8]
 8007f24:	4613      	mov	r3, r2
 8007f26:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007f28:	88fb      	ldrh	r3, [r7, #6]
 8007f2a:	68ba      	ldr	r2, [r7, #8]
 8007f2c:	2100      	movs	r1, #0
 8007f2e:	68f8      	ldr	r0, [r7, #12]
 8007f30:	f000 fc76 	bl	8008820 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007f34:	2300      	movs	r3, #0
}
 8007f36:	4618      	mov	r0, r3
 8007f38:	3710      	adds	r7, #16
 8007f3a:	46bd      	mov	sp, r7
 8007f3c:	bd80      	pop	{r7, pc}

08007f3e <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007f3e:	b580      	push	{r7, lr}
 8007f40:	b082      	sub	sp, #8
 8007f42:	af00      	add	r7, sp, #0
 8007f44:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	2204      	movs	r2, #4
 8007f4a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007f4e:	2300      	movs	r3, #0
 8007f50:	2200      	movs	r2, #0
 8007f52:	2100      	movs	r1, #0
 8007f54:	6878      	ldr	r0, [r7, #4]
 8007f56:	f000 fc40 	bl	80087da <USBD_LL_Transmit>

  return USBD_OK;
 8007f5a:	2300      	movs	r3, #0
}
 8007f5c:	4618      	mov	r0, r3
 8007f5e:	3708      	adds	r7, #8
 8007f60:	46bd      	mov	sp, r7
 8007f62:	bd80      	pop	{r7, pc}

08007f64 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007f64:	b580      	push	{r7, lr}
 8007f66:	b082      	sub	sp, #8
 8007f68:	af00      	add	r7, sp, #0
 8007f6a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	2205      	movs	r2, #5
 8007f70:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007f74:	2300      	movs	r3, #0
 8007f76:	2200      	movs	r2, #0
 8007f78:	2100      	movs	r1, #0
 8007f7a:	6878      	ldr	r0, [r7, #4]
 8007f7c:	f000 fc50 	bl	8008820 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007f80:	2300      	movs	r3, #0
}
 8007f82:	4618      	mov	r0, r3
 8007f84:	3708      	adds	r7, #8
 8007f86:	46bd      	mov	sp, r7
 8007f88:	bd80      	pop	{r7, pc}
	...

08007f8c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007f8c:	b580      	push	{r7, lr}
 8007f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007f90:	2200      	movs	r2, #0
 8007f92:	4912      	ldr	r1, [pc, #72]	; (8007fdc <MX_USB_DEVICE_Init+0x50>)
 8007f94:	4812      	ldr	r0, [pc, #72]	; (8007fe0 <MX_USB_DEVICE_Init+0x54>)
 8007f96:	f7fe ff5e 	bl	8006e56 <USBD_Init>
 8007f9a:	4603      	mov	r3, r0
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d001      	beq.n	8007fa4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007fa0:	f7f8 fa3c 	bl	800041c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007fa4:	490f      	ldr	r1, [pc, #60]	; (8007fe4 <MX_USB_DEVICE_Init+0x58>)
 8007fa6:	480e      	ldr	r0, [pc, #56]	; (8007fe0 <MX_USB_DEVICE_Init+0x54>)
 8007fa8:	f7fe ff80 	bl	8006eac <USBD_RegisterClass>
 8007fac:	4603      	mov	r3, r0
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d001      	beq.n	8007fb6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007fb2:	f7f8 fa33 	bl	800041c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007fb6:	490c      	ldr	r1, [pc, #48]	; (8007fe8 <MX_USB_DEVICE_Init+0x5c>)
 8007fb8:	4809      	ldr	r0, [pc, #36]	; (8007fe0 <MX_USB_DEVICE_Init+0x54>)
 8007fba:	f7fe feb1 	bl	8006d20 <USBD_CDC_RegisterInterface>
 8007fbe:	4603      	mov	r3, r0
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d001      	beq.n	8007fc8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007fc4:	f7f8 fa2a 	bl	800041c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007fc8:	4805      	ldr	r0, [pc, #20]	; (8007fe0 <MX_USB_DEVICE_Init+0x54>)
 8007fca:	f7fe ff88 	bl	8006ede <USBD_Start>
 8007fce:	4603      	mov	r3, r0
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d001      	beq.n	8007fd8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007fd4:	f7f8 fa22 	bl	800041c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007fd8:	bf00      	nop
 8007fda:	bd80      	pop	{r7, pc}
 8007fdc:	2000012c 	.word	0x2000012c
 8007fe0:	20000250 	.word	0x20000250
 8007fe4:	20000018 	.word	0x20000018
 8007fe8:	2000011c 	.word	0x2000011c

08007fec <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007fec:	b580      	push	{r7, lr}
 8007fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007ff0:	2200      	movs	r2, #0
 8007ff2:	4905      	ldr	r1, [pc, #20]	; (8008008 <CDC_Init_FS+0x1c>)
 8007ff4:	4805      	ldr	r0, [pc, #20]	; (800800c <CDC_Init_FS+0x20>)
 8007ff6:	f7fe fea9 	bl	8006d4c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007ffa:	4905      	ldr	r1, [pc, #20]	; (8008010 <CDC_Init_FS+0x24>)
 8007ffc:	4803      	ldr	r0, [pc, #12]	; (800800c <CDC_Init_FS+0x20>)
 8007ffe:	f7fe febe 	bl	8006d7e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008002:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008004:	4618      	mov	r0, r3
 8008006:	bd80      	pop	{r7, pc}
 8008008:	20000914 	.word	0x20000914
 800800c:	20000250 	.word	0x20000250
 8008010:	20000514 	.word	0x20000514

08008014 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008014:	b480      	push	{r7}
 8008016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008018:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800801a:	4618      	mov	r0, r3
 800801c:	46bd      	mov	sp, r7
 800801e:	bc80      	pop	{r7}
 8008020:	4770      	bx	lr
	...

08008024 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008024:	b480      	push	{r7}
 8008026:	b083      	sub	sp, #12
 8008028:	af00      	add	r7, sp, #0
 800802a:	4603      	mov	r3, r0
 800802c:	6039      	str	r1, [r7, #0]
 800802e:	71fb      	strb	r3, [r7, #7]
 8008030:	4613      	mov	r3, r2
 8008032:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008034:	79fb      	ldrb	r3, [r7, #7]
 8008036:	2b23      	cmp	r3, #35	; 0x23
 8008038:	d84a      	bhi.n	80080d0 <CDC_Control_FS+0xac>
 800803a:	a201      	add	r2, pc, #4	; (adr r2, 8008040 <CDC_Control_FS+0x1c>)
 800803c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008040:	080080d1 	.word	0x080080d1
 8008044:	080080d1 	.word	0x080080d1
 8008048:	080080d1 	.word	0x080080d1
 800804c:	080080d1 	.word	0x080080d1
 8008050:	080080d1 	.word	0x080080d1
 8008054:	080080d1 	.word	0x080080d1
 8008058:	080080d1 	.word	0x080080d1
 800805c:	080080d1 	.word	0x080080d1
 8008060:	080080d1 	.word	0x080080d1
 8008064:	080080d1 	.word	0x080080d1
 8008068:	080080d1 	.word	0x080080d1
 800806c:	080080d1 	.word	0x080080d1
 8008070:	080080d1 	.word	0x080080d1
 8008074:	080080d1 	.word	0x080080d1
 8008078:	080080d1 	.word	0x080080d1
 800807c:	080080d1 	.word	0x080080d1
 8008080:	080080d1 	.word	0x080080d1
 8008084:	080080d1 	.word	0x080080d1
 8008088:	080080d1 	.word	0x080080d1
 800808c:	080080d1 	.word	0x080080d1
 8008090:	080080d1 	.word	0x080080d1
 8008094:	080080d1 	.word	0x080080d1
 8008098:	080080d1 	.word	0x080080d1
 800809c:	080080d1 	.word	0x080080d1
 80080a0:	080080d1 	.word	0x080080d1
 80080a4:	080080d1 	.word	0x080080d1
 80080a8:	080080d1 	.word	0x080080d1
 80080ac:	080080d1 	.word	0x080080d1
 80080b0:	080080d1 	.word	0x080080d1
 80080b4:	080080d1 	.word	0x080080d1
 80080b8:	080080d1 	.word	0x080080d1
 80080bc:	080080d1 	.word	0x080080d1
 80080c0:	080080d1 	.word	0x080080d1
 80080c4:	080080d1 	.word	0x080080d1
 80080c8:	080080d1 	.word	0x080080d1
 80080cc:	080080d1 	.word	0x080080d1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80080d0:	bf00      	nop
  }

  return (USBD_OK);
 80080d2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80080d4:	4618      	mov	r0, r3
 80080d6:	370c      	adds	r7, #12
 80080d8:	46bd      	mov	sp, r7
 80080da:	bc80      	pop	{r7}
 80080dc:	4770      	bx	lr
 80080de:	bf00      	nop

080080e0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80080e0:	b580      	push	{r7, lr}
 80080e2:	b084      	sub	sp, #16
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	6078      	str	r0, [r7, #4]
 80080e8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80080ea:	6879      	ldr	r1, [r7, #4]
 80080ec:	481b      	ldr	r0, [pc, #108]	; (800815c <CDC_Receive_FS+0x7c>)
 80080ee:	f7fe fe46 	bl	8006d7e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80080f2:	481a      	ldr	r0, [pc, #104]	; (800815c <CDC_Receive_FS+0x7c>)
 80080f4:	f7fe fe85 	bl	8006e02 <USBD_CDC_ReceivePacket>
  uint8_t buffa=0x20;
 80080f8:	2320      	movs	r3, #32
 80080fa:	73fb      	strb	r3, [r7, #15]
  if(*Buf == 13){
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	781b      	ldrb	r3, [r3, #0]
 8008100:	2b0d      	cmp	r3, #13
 8008102:	d10d      	bne.n	8008120 <CDC_Receive_FS+0x40>
	  sprintf(cdcBuffer, "\n\r");
 8008104:	4916      	ldr	r1, [pc, #88]	; (8008160 <CDC_Receive_FS+0x80>)
 8008106:	4817      	ldr	r0, [pc, #92]	; (8008164 <CDC_Receive_FS+0x84>)
 8008108:	f000 fc3e 	bl	8008988 <siprintf>
	  CDC_Transmit_FS((uint8_t*)cdcBuffer, strlen(cdcBuffer));
 800810c:	4815      	ldr	r0, [pc, #84]	; (8008164 <CDC_Receive_FS+0x84>)
 800810e:	f7f8 f81d 	bl	800014c <strlen>
 8008112:	4603      	mov	r3, r0
 8008114:	b29b      	uxth	r3, r3
 8008116:	4619      	mov	r1, r3
 8008118:	4812      	ldr	r0, [pc, #72]	; (8008164 <CDC_Receive_FS+0x84>)
 800811a:	f000 f825 	bl	8008168 <CDC_Transmit_FS>
 800811e:	e018      	b.n	8008152 <CDC_Receive_FS+0x72>
  }else if(*Buf == 8){
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	781b      	ldrb	r3, [r3, #0]
 8008124:	2b08      	cmp	r3, #8
 8008126:	d10d      	bne.n	8008144 <CDC_Receive_FS+0x64>
	  CDC_Transmit_FS(Buf, *Len);
 8008128:	683b      	ldr	r3, [r7, #0]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	b29b      	uxth	r3, r3
 800812e:	4619      	mov	r1, r3
 8008130:	6878      	ldr	r0, [r7, #4]
 8008132:	f000 f819 	bl	8008168 <CDC_Transmit_FS>
	  CDC_Transmit_FS(&buffa, 8);
 8008136:	f107 030f 	add.w	r3, r7, #15
 800813a:	2108      	movs	r1, #8
 800813c:	4618      	mov	r0, r3
 800813e:	f000 f813 	bl	8008168 <CDC_Transmit_FS>
 8008142:	e006      	b.n	8008152 <CDC_Receive_FS+0x72>
  }else if(0){
	  sprintf(cdcBuffer, "%u\n\r",*Buf);
	  CDC_Transmit_FS((uint8_t*)cdcBuffer, strlen(cdcBuffer));
  }
  else{
	  CDC_Transmit_FS(Buf, *Len);
 8008144:	683b      	ldr	r3, [r7, #0]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	b29b      	uxth	r3, r3
 800814a:	4619      	mov	r1, r3
 800814c:	6878      	ldr	r0, [r7, #4]
 800814e:	f000 f80b 	bl	8008168 <CDC_Transmit_FS>
  }

//  CDC_Transmit_FS(&Buf[0], *Len);// 追加コード　（単純なオウム返しを行う）
  return (USBD_OK);
 8008152:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008154:	4618      	mov	r0, r3
 8008156:	3710      	adds	r7, #16
 8008158:	46bd      	mov	sp, r7
 800815a:	bd80      	pop	{r7, pc}
 800815c:	20000250 	.word	0x20000250
 8008160:	080092a4 	.word	0x080092a4
 8008164:	20000d14 	.word	0x20000d14

08008168 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008168:	b580      	push	{r7, lr}
 800816a:	b084      	sub	sp, #16
 800816c:	af00      	add	r7, sp, #0
 800816e:	6078      	str	r0, [r7, #4]
 8008170:	460b      	mov	r3, r1
 8008172:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008174:	2300      	movs	r3, #0
 8008176:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008178:	4b0d      	ldr	r3, [pc, #52]	; (80081b0 <CDC_Transmit_FS+0x48>)
 800817a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800817e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008180:	68bb      	ldr	r3, [r7, #8]
 8008182:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008186:	2b00      	cmp	r3, #0
 8008188:	d001      	beq.n	800818e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800818a:	2301      	movs	r3, #1
 800818c:	e00b      	b.n	80081a6 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800818e:	887b      	ldrh	r3, [r7, #2]
 8008190:	461a      	mov	r2, r3
 8008192:	6879      	ldr	r1, [r7, #4]
 8008194:	4806      	ldr	r0, [pc, #24]	; (80081b0 <CDC_Transmit_FS+0x48>)
 8008196:	f7fe fdd9 	bl	8006d4c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800819a:	4805      	ldr	r0, [pc, #20]	; (80081b0 <CDC_Transmit_FS+0x48>)
 800819c:	f7fe fe02 	bl	8006da4 <USBD_CDC_TransmitPacket>
 80081a0:	4603      	mov	r3, r0
 80081a2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80081a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80081a6:	4618      	mov	r0, r3
 80081a8:	3710      	adds	r7, #16
 80081aa:	46bd      	mov	sp, r7
 80081ac:	bd80      	pop	{r7, pc}
 80081ae:	bf00      	nop
 80081b0:	20000250 	.word	0x20000250

080081b4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80081b4:	b480      	push	{r7}
 80081b6:	b083      	sub	sp, #12
 80081b8:	af00      	add	r7, sp, #0
 80081ba:	4603      	mov	r3, r0
 80081bc:	6039      	str	r1, [r7, #0]
 80081be:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80081c0:	683b      	ldr	r3, [r7, #0]
 80081c2:	2212      	movs	r2, #18
 80081c4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80081c6:	4b03      	ldr	r3, [pc, #12]	; (80081d4 <USBD_FS_DeviceDescriptor+0x20>)
}
 80081c8:	4618      	mov	r0, r3
 80081ca:	370c      	adds	r7, #12
 80081cc:	46bd      	mov	sp, r7
 80081ce:	bc80      	pop	{r7}
 80081d0:	4770      	bx	lr
 80081d2:	bf00      	nop
 80081d4:	20000148 	.word	0x20000148

080081d8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80081d8:	b480      	push	{r7}
 80081da:	b083      	sub	sp, #12
 80081dc:	af00      	add	r7, sp, #0
 80081de:	4603      	mov	r3, r0
 80081e0:	6039      	str	r1, [r7, #0]
 80081e2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80081e4:	683b      	ldr	r3, [r7, #0]
 80081e6:	2204      	movs	r2, #4
 80081e8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80081ea:	4b03      	ldr	r3, [pc, #12]	; (80081f8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80081ec:	4618      	mov	r0, r3
 80081ee:	370c      	adds	r7, #12
 80081f0:	46bd      	mov	sp, r7
 80081f2:	bc80      	pop	{r7}
 80081f4:	4770      	bx	lr
 80081f6:	bf00      	nop
 80081f8:	2000015c 	.word	0x2000015c

080081fc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80081fc:	b580      	push	{r7, lr}
 80081fe:	b082      	sub	sp, #8
 8008200:	af00      	add	r7, sp, #0
 8008202:	4603      	mov	r3, r0
 8008204:	6039      	str	r1, [r7, #0]
 8008206:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008208:	79fb      	ldrb	r3, [r7, #7]
 800820a:	2b00      	cmp	r3, #0
 800820c:	d105      	bne.n	800821a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800820e:	683a      	ldr	r2, [r7, #0]
 8008210:	4907      	ldr	r1, [pc, #28]	; (8008230 <USBD_FS_ProductStrDescriptor+0x34>)
 8008212:	4808      	ldr	r0, [pc, #32]	; (8008234 <USBD_FS_ProductStrDescriptor+0x38>)
 8008214:	f7ff fddc 	bl	8007dd0 <USBD_GetString>
 8008218:	e004      	b.n	8008224 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800821a:	683a      	ldr	r2, [r7, #0]
 800821c:	4904      	ldr	r1, [pc, #16]	; (8008230 <USBD_FS_ProductStrDescriptor+0x34>)
 800821e:	4805      	ldr	r0, [pc, #20]	; (8008234 <USBD_FS_ProductStrDescriptor+0x38>)
 8008220:	f7ff fdd6 	bl	8007dd0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008224:	4b02      	ldr	r3, [pc, #8]	; (8008230 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008226:	4618      	mov	r0, r3
 8008228:	3708      	adds	r7, #8
 800822a:	46bd      	mov	sp, r7
 800822c:	bd80      	pop	{r7, pc}
 800822e:	bf00      	nop
 8008230:	20000d3c 	.word	0x20000d3c
 8008234:	080092a8 	.word	0x080092a8

08008238 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008238:	b580      	push	{r7, lr}
 800823a:	b082      	sub	sp, #8
 800823c:	af00      	add	r7, sp, #0
 800823e:	4603      	mov	r3, r0
 8008240:	6039      	str	r1, [r7, #0]
 8008242:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008244:	683a      	ldr	r2, [r7, #0]
 8008246:	4904      	ldr	r1, [pc, #16]	; (8008258 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008248:	4804      	ldr	r0, [pc, #16]	; (800825c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800824a:	f7ff fdc1 	bl	8007dd0 <USBD_GetString>
  return USBD_StrDesc;
 800824e:	4b02      	ldr	r3, [pc, #8]	; (8008258 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008250:	4618      	mov	r0, r3
 8008252:	3708      	adds	r7, #8
 8008254:	46bd      	mov	sp, r7
 8008256:	bd80      	pop	{r7, pc}
 8008258:	20000d3c 	.word	0x20000d3c
 800825c:	080092c0 	.word	0x080092c0

08008260 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008260:	b580      	push	{r7, lr}
 8008262:	b082      	sub	sp, #8
 8008264:	af00      	add	r7, sp, #0
 8008266:	4603      	mov	r3, r0
 8008268:	6039      	str	r1, [r7, #0]
 800826a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800826c:	683b      	ldr	r3, [r7, #0]
 800826e:	221a      	movs	r2, #26
 8008270:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008272:	f000 f843 	bl	80082fc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008276:	4b02      	ldr	r3, [pc, #8]	; (8008280 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008278:	4618      	mov	r0, r3
 800827a:	3708      	adds	r7, #8
 800827c:	46bd      	mov	sp, r7
 800827e:	bd80      	pop	{r7, pc}
 8008280:	20000160 	.word	0x20000160

08008284 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008284:	b580      	push	{r7, lr}
 8008286:	b082      	sub	sp, #8
 8008288:	af00      	add	r7, sp, #0
 800828a:	4603      	mov	r3, r0
 800828c:	6039      	str	r1, [r7, #0]
 800828e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008290:	79fb      	ldrb	r3, [r7, #7]
 8008292:	2b00      	cmp	r3, #0
 8008294:	d105      	bne.n	80082a2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008296:	683a      	ldr	r2, [r7, #0]
 8008298:	4907      	ldr	r1, [pc, #28]	; (80082b8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800829a:	4808      	ldr	r0, [pc, #32]	; (80082bc <USBD_FS_ConfigStrDescriptor+0x38>)
 800829c:	f7ff fd98 	bl	8007dd0 <USBD_GetString>
 80082a0:	e004      	b.n	80082ac <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80082a2:	683a      	ldr	r2, [r7, #0]
 80082a4:	4904      	ldr	r1, [pc, #16]	; (80082b8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80082a6:	4805      	ldr	r0, [pc, #20]	; (80082bc <USBD_FS_ConfigStrDescriptor+0x38>)
 80082a8:	f7ff fd92 	bl	8007dd0 <USBD_GetString>
  }
  return USBD_StrDesc;
 80082ac:	4b02      	ldr	r3, [pc, #8]	; (80082b8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80082ae:	4618      	mov	r0, r3
 80082b0:	3708      	adds	r7, #8
 80082b2:	46bd      	mov	sp, r7
 80082b4:	bd80      	pop	{r7, pc}
 80082b6:	bf00      	nop
 80082b8:	20000d3c 	.word	0x20000d3c
 80082bc:	080092d4 	.word	0x080092d4

080082c0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80082c0:	b580      	push	{r7, lr}
 80082c2:	b082      	sub	sp, #8
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	4603      	mov	r3, r0
 80082c8:	6039      	str	r1, [r7, #0]
 80082ca:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80082cc:	79fb      	ldrb	r3, [r7, #7]
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d105      	bne.n	80082de <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80082d2:	683a      	ldr	r2, [r7, #0]
 80082d4:	4907      	ldr	r1, [pc, #28]	; (80082f4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80082d6:	4808      	ldr	r0, [pc, #32]	; (80082f8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80082d8:	f7ff fd7a 	bl	8007dd0 <USBD_GetString>
 80082dc:	e004      	b.n	80082e8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80082de:	683a      	ldr	r2, [r7, #0]
 80082e0:	4904      	ldr	r1, [pc, #16]	; (80082f4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80082e2:	4805      	ldr	r0, [pc, #20]	; (80082f8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80082e4:	f7ff fd74 	bl	8007dd0 <USBD_GetString>
  }
  return USBD_StrDesc;
 80082e8:	4b02      	ldr	r3, [pc, #8]	; (80082f4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80082ea:	4618      	mov	r0, r3
 80082ec:	3708      	adds	r7, #8
 80082ee:	46bd      	mov	sp, r7
 80082f0:	bd80      	pop	{r7, pc}
 80082f2:	bf00      	nop
 80082f4:	20000d3c 	.word	0x20000d3c
 80082f8:	080092e0 	.word	0x080092e0

080082fc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80082fc:	b580      	push	{r7, lr}
 80082fe:	b084      	sub	sp, #16
 8008300:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008302:	4b0f      	ldr	r3, [pc, #60]	; (8008340 <Get_SerialNum+0x44>)
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008308:	4b0e      	ldr	r3, [pc, #56]	; (8008344 <Get_SerialNum+0x48>)
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800830e:	4b0e      	ldr	r3, [pc, #56]	; (8008348 <Get_SerialNum+0x4c>)
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008314:	68fa      	ldr	r2, [r7, #12]
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	4413      	add	r3, r2
 800831a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	2b00      	cmp	r3, #0
 8008320:	d009      	beq.n	8008336 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008322:	2208      	movs	r2, #8
 8008324:	4909      	ldr	r1, [pc, #36]	; (800834c <Get_SerialNum+0x50>)
 8008326:	68f8      	ldr	r0, [r7, #12]
 8008328:	f000 f814 	bl	8008354 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800832c:	2204      	movs	r2, #4
 800832e:	4908      	ldr	r1, [pc, #32]	; (8008350 <Get_SerialNum+0x54>)
 8008330:	68b8      	ldr	r0, [r7, #8]
 8008332:	f000 f80f 	bl	8008354 <IntToUnicode>
  }
}
 8008336:	bf00      	nop
 8008338:	3710      	adds	r7, #16
 800833a:	46bd      	mov	sp, r7
 800833c:	bd80      	pop	{r7, pc}
 800833e:	bf00      	nop
 8008340:	1ffff7e8 	.word	0x1ffff7e8
 8008344:	1ffff7ec 	.word	0x1ffff7ec
 8008348:	1ffff7f0 	.word	0x1ffff7f0
 800834c:	20000162 	.word	0x20000162
 8008350:	20000172 	.word	0x20000172

08008354 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008354:	b480      	push	{r7}
 8008356:	b087      	sub	sp, #28
 8008358:	af00      	add	r7, sp, #0
 800835a:	60f8      	str	r0, [r7, #12]
 800835c:	60b9      	str	r1, [r7, #8]
 800835e:	4613      	mov	r3, r2
 8008360:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008362:	2300      	movs	r3, #0
 8008364:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008366:	2300      	movs	r3, #0
 8008368:	75fb      	strb	r3, [r7, #23]
 800836a:	e027      	b.n	80083bc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	0f1b      	lsrs	r3, r3, #28
 8008370:	2b09      	cmp	r3, #9
 8008372:	d80b      	bhi.n	800838c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	0f1b      	lsrs	r3, r3, #28
 8008378:	b2da      	uxtb	r2, r3
 800837a:	7dfb      	ldrb	r3, [r7, #23]
 800837c:	005b      	lsls	r3, r3, #1
 800837e:	4619      	mov	r1, r3
 8008380:	68bb      	ldr	r3, [r7, #8]
 8008382:	440b      	add	r3, r1
 8008384:	3230      	adds	r2, #48	; 0x30
 8008386:	b2d2      	uxtb	r2, r2
 8008388:	701a      	strb	r2, [r3, #0]
 800838a:	e00a      	b.n	80083a2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	0f1b      	lsrs	r3, r3, #28
 8008390:	b2da      	uxtb	r2, r3
 8008392:	7dfb      	ldrb	r3, [r7, #23]
 8008394:	005b      	lsls	r3, r3, #1
 8008396:	4619      	mov	r1, r3
 8008398:	68bb      	ldr	r3, [r7, #8]
 800839a:	440b      	add	r3, r1
 800839c:	3237      	adds	r2, #55	; 0x37
 800839e:	b2d2      	uxtb	r2, r2
 80083a0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	011b      	lsls	r3, r3, #4
 80083a6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80083a8:	7dfb      	ldrb	r3, [r7, #23]
 80083aa:	005b      	lsls	r3, r3, #1
 80083ac:	3301      	adds	r3, #1
 80083ae:	68ba      	ldr	r2, [r7, #8]
 80083b0:	4413      	add	r3, r2
 80083b2:	2200      	movs	r2, #0
 80083b4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80083b6:	7dfb      	ldrb	r3, [r7, #23]
 80083b8:	3301      	adds	r3, #1
 80083ba:	75fb      	strb	r3, [r7, #23]
 80083bc:	7dfa      	ldrb	r2, [r7, #23]
 80083be:	79fb      	ldrb	r3, [r7, #7]
 80083c0:	429a      	cmp	r2, r3
 80083c2:	d3d3      	bcc.n	800836c <IntToUnicode+0x18>
  }
}
 80083c4:	bf00      	nop
 80083c6:	bf00      	nop
 80083c8:	371c      	adds	r7, #28
 80083ca:	46bd      	mov	sp, r7
 80083cc:	bc80      	pop	{r7}
 80083ce:	4770      	bx	lr

080083d0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80083d0:	b580      	push	{r7, lr}
 80083d2:	b084      	sub	sp, #16
 80083d4:	af00      	add	r7, sp, #0
 80083d6:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	4a0d      	ldr	r2, [pc, #52]	; (8008414 <HAL_PCD_MspInit+0x44>)
 80083de:	4293      	cmp	r3, r2
 80083e0:	d113      	bne.n	800840a <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80083e2:	4b0d      	ldr	r3, [pc, #52]	; (8008418 <HAL_PCD_MspInit+0x48>)
 80083e4:	69db      	ldr	r3, [r3, #28]
 80083e6:	4a0c      	ldr	r2, [pc, #48]	; (8008418 <HAL_PCD_MspInit+0x48>)
 80083e8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80083ec:	61d3      	str	r3, [r2, #28]
 80083ee:	4b0a      	ldr	r3, [pc, #40]	; (8008418 <HAL_PCD_MspInit+0x48>)
 80083f0:	69db      	ldr	r3, [r3, #28]
 80083f2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80083f6:	60fb      	str	r3, [r7, #12]
 80083f8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80083fa:	2200      	movs	r2, #0
 80083fc:	2100      	movs	r1, #0
 80083fe:	2014      	movs	r0, #20
 8008400:	f7f8 faef 	bl	80009e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8008404:	2014      	movs	r0, #20
 8008406:	f7f8 fb08 	bl	8000a1a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800840a:	bf00      	nop
 800840c:	3710      	adds	r7, #16
 800840e:	46bd      	mov	sp, r7
 8008410:	bd80      	pop	{r7, pc}
 8008412:	bf00      	nop
 8008414:	40005c00 	.word	0x40005c00
 8008418:	40021000 	.word	0x40021000

0800841c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800841c:	b580      	push	{r7, lr}
 800841e:	b082      	sub	sp, #8
 8008420:	af00      	add	r7, sp, #0
 8008422:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8008430:	4619      	mov	r1, r3
 8008432:	4610      	mov	r0, r2
 8008434:	f7fe fd9b 	bl	8006f6e <USBD_LL_SetupStage>
}
 8008438:	bf00      	nop
 800843a:	3708      	adds	r7, #8
 800843c:	46bd      	mov	sp, r7
 800843e:	bd80      	pop	{r7, pc}

08008440 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008440:	b580      	push	{r7, lr}
 8008442:	b082      	sub	sp, #8
 8008444:	af00      	add	r7, sp, #0
 8008446:	6078      	str	r0, [r7, #4]
 8008448:	460b      	mov	r3, r1
 800844a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8008452:	78fa      	ldrb	r2, [r7, #3]
 8008454:	6879      	ldr	r1, [r7, #4]
 8008456:	4613      	mov	r3, r2
 8008458:	009b      	lsls	r3, r3, #2
 800845a:	4413      	add	r3, r2
 800845c:	00db      	lsls	r3, r3, #3
 800845e:	440b      	add	r3, r1
 8008460:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8008464:	681a      	ldr	r2, [r3, #0]
 8008466:	78fb      	ldrb	r3, [r7, #3]
 8008468:	4619      	mov	r1, r3
 800846a:	f7fe fdcd 	bl	8007008 <USBD_LL_DataOutStage>
}
 800846e:	bf00      	nop
 8008470:	3708      	adds	r7, #8
 8008472:	46bd      	mov	sp, r7
 8008474:	bd80      	pop	{r7, pc}

08008476 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008476:	b580      	push	{r7, lr}
 8008478:	b082      	sub	sp, #8
 800847a:	af00      	add	r7, sp, #0
 800847c:	6078      	str	r0, [r7, #4]
 800847e:	460b      	mov	r3, r1
 8008480:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8008488:	78fa      	ldrb	r2, [r7, #3]
 800848a:	6879      	ldr	r1, [r7, #4]
 800848c:	4613      	mov	r3, r2
 800848e:	009b      	lsls	r3, r3, #2
 8008490:	4413      	add	r3, r2
 8008492:	00db      	lsls	r3, r3, #3
 8008494:	440b      	add	r3, r1
 8008496:	333c      	adds	r3, #60	; 0x3c
 8008498:	681a      	ldr	r2, [r3, #0]
 800849a:	78fb      	ldrb	r3, [r7, #3]
 800849c:	4619      	mov	r1, r3
 800849e:	f7fe fe24 	bl	80070ea <USBD_LL_DataInStage>
}
 80084a2:	bf00      	nop
 80084a4:	3708      	adds	r7, #8
 80084a6:	46bd      	mov	sp, r7
 80084a8:	bd80      	pop	{r7, pc}

080084aa <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80084aa:	b580      	push	{r7, lr}
 80084ac:	b082      	sub	sp, #8
 80084ae:	af00      	add	r7, sp, #0
 80084b0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80084b8:	4618      	mov	r0, r3
 80084ba:	f7fe ff34 	bl	8007326 <USBD_LL_SOF>
}
 80084be:	bf00      	nop
 80084c0:	3708      	adds	r7, #8
 80084c2:	46bd      	mov	sp, r7
 80084c4:	bd80      	pop	{r7, pc}

080084c6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80084c6:	b580      	push	{r7, lr}
 80084c8:	b084      	sub	sp, #16
 80084ca:	af00      	add	r7, sp, #0
 80084cc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80084ce:	2301      	movs	r3, #1
 80084d0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	689b      	ldr	r3, [r3, #8]
 80084d6:	2b02      	cmp	r3, #2
 80084d8:	d001      	beq.n	80084de <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80084da:	f7f7 ff9f 	bl	800041c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80084e4:	7bfa      	ldrb	r2, [r7, #15]
 80084e6:	4611      	mov	r1, r2
 80084e8:	4618      	mov	r0, r3
 80084ea:	f7fe fee4 	bl	80072b6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80084f4:	4618      	mov	r0, r3
 80084f6:	f7fe fe9d 	bl	8007234 <USBD_LL_Reset>
}
 80084fa:	bf00      	nop
 80084fc:	3710      	adds	r7, #16
 80084fe:	46bd      	mov	sp, r7
 8008500:	bd80      	pop	{r7, pc}
	...

08008504 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008504:	b580      	push	{r7, lr}
 8008506:	b082      	sub	sp, #8
 8008508:	af00      	add	r7, sp, #0
 800850a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008512:	4618      	mov	r0, r3
 8008514:	f7fe fede 	bl	80072d4 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	699b      	ldr	r3, [r3, #24]
 800851c:	2b00      	cmp	r3, #0
 800851e:	d005      	beq.n	800852c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008520:	4b04      	ldr	r3, [pc, #16]	; (8008534 <HAL_PCD_SuspendCallback+0x30>)
 8008522:	691b      	ldr	r3, [r3, #16]
 8008524:	4a03      	ldr	r2, [pc, #12]	; (8008534 <HAL_PCD_SuspendCallback+0x30>)
 8008526:	f043 0306 	orr.w	r3, r3, #6
 800852a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800852c:	bf00      	nop
 800852e:	3708      	adds	r7, #8
 8008530:	46bd      	mov	sp, r7
 8008532:	bd80      	pop	{r7, pc}
 8008534:	e000ed00 	.word	0xe000ed00

08008538 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008538:	b580      	push	{r7, lr}
 800853a:	b082      	sub	sp, #8
 800853c:	af00      	add	r7, sp, #0
 800853e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008546:	4618      	mov	r0, r3
 8008548:	f7fe fed8 	bl	80072fc <USBD_LL_Resume>
}
 800854c:	bf00      	nop
 800854e:	3708      	adds	r7, #8
 8008550:	46bd      	mov	sp, r7
 8008552:	bd80      	pop	{r7, pc}

08008554 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008554:	b580      	push	{r7, lr}
 8008556:	b082      	sub	sp, #8
 8008558:	af00      	add	r7, sp, #0
 800855a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800855c:	4a28      	ldr	r2, [pc, #160]	; (8008600 <USBD_LL_Init+0xac>)
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	4a26      	ldr	r2, [pc, #152]	; (8008600 <USBD_LL_Init+0xac>)
 8008568:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800856c:	4b24      	ldr	r3, [pc, #144]	; (8008600 <USBD_LL_Init+0xac>)
 800856e:	4a25      	ldr	r2, [pc, #148]	; (8008604 <USBD_LL_Init+0xb0>)
 8008570:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8008572:	4b23      	ldr	r3, [pc, #140]	; (8008600 <USBD_LL_Init+0xac>)
 8008574:	2208      	movs	r2, #8
 8008576:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8008578:	4b21      	ldr	r3, [pc, #132]	; (8008600 <USBD_LL_Init+0xac>)
 800857a:	2202      	movs	r2, #2
 800857c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800857e:	4b20      	ldr	r3, [pc, #128]	; (8008600 <USBD_LL_Init+0xac>)
 8008580:	2200      	movs	r2, #0
 8008582:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8008584:	4b1e      	ldr	r3, [pc, #120]	; (8008600 <USBD_LL_Init+0xac>)
 8008586:	2200      	movs	r2, #0
 8008588:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800858a:	4b1d      	ldr	r3, [pc, #116]	; (8008600 <USBD_LL_Init+0xac>)
 800858c:	2200      	movs	r2, #0
 800858e:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8008590:	481b      	ldr	r0, [pc, #108]	; (8008600 <USBD_LL_Init+0xac>)
 8008592:	f7f8 fbe1 	bl	8000d58 <HAL_PCD_Init>
 8008596:	4603      	mov	r3, r0
 8008598:	2b00      	cmp	r3, #0
 800859a:	d001      	beq.n	80085a0 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800859c:	f7f7 ff3e 	bl	800041c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80085a6:	2318      	movs	r3, #24
 80085a8:	2200      	movs	r2, #0
 80085aa:	2100      	movs	r1, #0
 80085ac:	f7fa f855 	bl	800265a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80085b6:	2358      	movs	r3, #88	; 0x58
 80085b8:	2200      	movs	r2, #0
 80085ba:	2180      	movs	r1, #128	; 0x80
 80085bc:	f7fa f84d 	bl	800265a <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80085c6:	23c0      	movs	r3, #192	; 0xc0
 80085c8:	2200      	movs	r2, #0
 80085ca:	2181      	movs	r1, #129	; 0x81
 80085cc:	f7fa f845 	bl	800265a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80085d6:	f44f 7388 	mov.w	r3, #272	; 0x110
 80085da:	2200      	movs	r2, #0
 80085dc:	2101      	movs	r1, #1
 80085de:	f7fa f83c 	bl	800265a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80085e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80085ec:	2200      	movs	r2, #0
 80085ee:	2182      	movs	r1, #130	; 0x82
 80085f0:	f7fa f833 	bl	800265a <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 80085f4:	2300      	movs	r3, #0
}
 80085f6:	4618      	mov	r0, r3
 80085f8:	3708      	adds	r7, #8
 80085fa:	46bd      	mov	sp, r7
 80085fc:	bd80      	pop	{r7, pc}
 80085fe:	bf00      	nop
 8008600:	20000f3c 	.word	0x20000f3c
 8008604:	40005c00 	.word	0x40005c00

08008608 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008608:	b580      	push	{r7, lr}
 800860a:	b084      	sub	sp, #16
 800860c:	af00      	add	r7, sp, #0
 800860e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008610:	2300      	movs	r3, #0
 8008612:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008614:	2300      	movs	r3, #0
 8008616:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800861e:	4618      	mov	r0, r3
 8008620:	f7f8 fca5 	bl	8000f6e <HAL_PCD_Start>
 8008624:	4603      	mov	r3, r0
 8008626:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008628:	7bfb      	ldrb	r3, [r7, #15]
 800862a:	4618      	mov	r0, r3
 800862c:	f000 f94e 	bl	80088cc <USBD_Get_USB_Status>
 8008630:	4603      	mov	r3, r0
 8008632:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008634:	7bbb      	ldrb	r3, [r7, #14]
}
 8008636:	4618      	mov	r0, r3
 8008638:	3710      	adds	r7, #16
 800863a:	46bd      	mov	sp, r7
 800863c:	bd80      	pop	{r7, pc}

0800863e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800863e:	b580      	push	{r7, lr}
 8008640:	b084      	sub	sp, #16
 8008642:	af00      	add	r7, sp, #0
 8008644:	6078      	str	r0, [r7, #4]
 8008646:	4608      	mov	r0, r1
 8008648:	4611      	mov	r1, r2
 800864a:	461a      	mov	r2, r3
 800864c:	4603      	mov	r3, r0
 800864e:	70fb      	strb	r3, [r7, #3]
 8008650:	460b      	mov	r3, r1
 8008652:	70bb      	strb	r3, [r7, #2]
 8008654:	4613      	mov	r3, r2
 8008656:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008658:	2300      	movs	r3, #0
 800865a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800865c:	2300      	movs	r3, #0
 800865e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008666:	78bb      	ldrb	r3, [r7, #2]
 8008668:	883a      	ldrh	r2, [r7, #0]
 800866a:	78f9      	ldrb	r1, [r7, #3]
 800866c:	f7f8 fe1d 	bl	80012aa <HAL_PCD_EP_Open>
 8008670:	4603      	mov	r3, r0
 8008672:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008674:	7bfb      	ldrb	r3, [r7, #15]
 8008676:	4618      	mov	r0, r3
 8008678:	f000 f928 	bl	80088cc <USBD_Get_USB_Status>
 800867c:	4603      	mov	r3, r0
 800867e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008680:	7bbb      	ldrb	r3, [r7, #14]
}
 8008682:	4618      	mov	r0, r3
 8008684:	3710      	adds	r7, #16
 8008686:	46bd      	mov	sp, r7
 8008688:	bd80      	pop	{r7, pc}

0800868a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800868a:	b580      	push	{r7, lr}
 800868c:	b084      	sub	sp, #16
 800868e:	af00      	add	r7, sp, #0
 8008690:	6078      	str	r0, [r7, #4]
 8008692:	460b      	mov	r3, r1
 8008694:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008696:	2300      	movs	r3, #0
 8008698:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800869a:	2300      	movs	r3, #0
 800869c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80086a4:	78fa      	ldrb	r2, [r7, #3]
 80086a6:	4611      	mov	r1, r2
 80086a8:	4618      	mov	r0, r3
 80086aa:	f7f8 fe64 	bl	8001376 <HAL_PCD_EP_Close>
 80086ae:	4603      	mov	r3, r0
 80086b0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80086b2:	7bfb      	ldrb	r3, [r7, #15]
 80086b4:	4618      	mov	r0, r3
 80086b6:	f000 f909 	bl	80088cc <USBD_Get_USB_Status>
 80086ba:	4603      	mov	r3, r0
 80086bc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80086be:	7bbb      	ldrb	r3, [r7, #14]
}
 80086c0:	4618      	mov	r0, r3
 80086c2:	3710      	adds	r7, #16
 80086c4:	46bd      	mov	sp, r7
 80086c6:	bd80      	pop	{r7, pc}

080086c8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80086c8:	b580      	push	{r7, lr}
 80086ca:	b084      	sub	sp, #16
 80086cc:	af00      	add	r7, sp, #0
 80086ce:	6078      	str	r0, [r7, #4]
 80086d0:	460b      	mov	r3, r1
 80086d2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80086d4:	2300      	movs	r3, #0
 80086d6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80086d8:	2300      	movs	r3, #0
 80086da:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80086e2:	78fa      	ldrb	r2, [r7, #3]
 80086e4:	4611      	mov	r1, r2
 80086e6:	4618      	mov	r0, r3
 80086e8:	f7f8 ff24 	bl	8001534 <HAL_PCD_EP_SetStall>
 80086ec:	4603      	mov	r3, r0
 80086ee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80086f0:	7bfb      	ldrb	r3, [r7, #15]
 80086f2:	4618      	mov	r0, r3
 80086f4:	f000 f8ea 	bl	80088cc <USBD_Get_USB_Status>
 80086f8:	4603      	mov	r3, r0
 80086fa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80086fc:	7bbb      	ldrb	r3, [r7, #14]
}
 80086fe:	4618      	mov	r0, r3
 8008700:	3710      	adds	r7, #16
 8008702:	46bd      	mov	sp, r7
 8008704:	bd80      	pop	{r7, pc}

08008706 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008706:	b580      	push	{r7, lr}
 8008708:	b084      	sub	sp, #16
 800870a:	af00      	add	r7, sp, #0
 800870c:	6078      	str	r0, [r7, #4]
 800870e:	460b      	mov	r3, r1
 8008710:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008712:	2300      	movs	r3, #0
 8008714:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008716:	2300      	movs	r3, #0
 8008718:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008720:	78fa      	ldrb	r2, [r7, #3]
 8008722:	4611      	mov	r1, r2
 8008724:	4618      	mov	r0, r3
 8008726:	f7f8 ff65 	bl	80015f4 <HAL_PCD_EP_ClrStall>
 800872a:	4603      	mov	r3, r0
 800872c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800872e:	7bfb      	ldrb	r3, [r7, #15]
 8008730:	4618      	mov	r0, r3
 8008732:	f000 f8cb 	bl	80088cc <USBD_Get_USB_Status>
 8008736:	4603      	mov	r3, r0
 8008738:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800873a:	7bbb      	ldrb	r3, [r7, #14]
}
 800873c:	4618      	mov	r0, r3
 800873e:	3710      	adds	r7, #16
 8008740:	46bd      	mov	sp, r7
 8008742:	bd80      	pop	{r7, pc}

08008744 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008744:	b480      	push	{r7}
 8008746:	b085      	sub	sp, #20
 8008748:	af00      	add	r7, sp, #0
 800874a:	6078      	str	r0, [r7, #4]
 800874c:	460b      	mov	r3, r1
 800874e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008756:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008758:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800875c:	2b00      	cmp	r3, #0
 800875e:	da0c      	bge.n	800877a <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008760:	78fb      	ldrb	r3, [r7, #3]
 8008762:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008766:	68f9      	ldr	r1, [r7, #12]
 8008768:	1c5a      	adds	r2, r3, #1
 800876a:	4613      	mov	r3, r2
 800876c:	009b      	lsls	r3, r3, #2
 800876e:	4413      	add	r3, r2
 8008770:	00db      	lsls	r3, r3, #3
 8008772:	440b      	add	r3, r1
 8008774:	3302      	adds	r3, #2
 8008776:	781b      	ldrb	r3, [r3, #0]
 8008778:	e00b      	b.n	8008792 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800877a:	78fb      	ldrb	r3, [r7, #3]
 800877c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008780:	68f9      	ldr	r1, [r7, #12]
 8008782:	4613      	mov	r3, r2
 8008784:	009b      	lsls	r3, r3, #2
 8008786:	4413      	add	r3, r2
 8008788:	00db      	lsls	r3, r3, #3
 800878a:	440b      	add	r3, r1
 800878c:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8008790:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008792:	4618      	mov	r0, r3
 8008794:	3714      	adds	r7, #20
 8008796:	46bd      	mov	sp, r7
 8008798:	bc80      	pop	{r7}
 800879a:	4770      	bx	lr

0800879c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800879c:	b580      	push	{r7, lr}
 800879e:	b084      	sub	sp, #16
 80087a0:	af00      	add	r7, sp, #0
 80087a2:	6078      	str	r0, [r7, #4]
 80087a4:	460b      	mov	r3, r1
 80087a6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80087a8:	2300      	movs	r3, #0
 80087aa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80087ac:	2300      	movs	r3, #0
 80087ae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80087b6:	78fa      	ldrb	r2, [r7, #3]
 80087b8:	4611      	mov	r1, r2
 80087ba:	4618      	mov	r0, r3
 80087bc:	f7f8 fd50 	bl	8001260 <HAL_PCD_SetAddress>
 80087c0:	4603      	mov	r3, r0
 80087c2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80087c4:	7bfb      	ldrb	r3, [r7, #15]
 80087c6:	4618      	mov	r0, r3
 80087c8:	f000 f880 	bl	80088cc <USBD_Get_USB_Status>
 80087cc:	4603      	mov	r3, r0
 80087ce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80087d0:	7bbb      	ldrb	r3, [r7, #14]
}
 80087d2:	4618      	mov	r0, r3
 80087d4:	3710      	adds	r7, #16
 80087d6:	46bd      	mov	sp, r7
 80087d8:	bd80      	pop	{r7, pc}

080087da <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80087da:	b580      	push	{r7, lr}
 80087dc:	b086      	sub	sp, #24
 80087de:	af00      	add	r7, sp, #0
 80087e0:	60f8      	str	r0, [r7, #12]
 80087e2:	607a      	str	r2, [r7, #4]
 80087e4:	461a      	mov	r2, r3
 80087e6:	460b      	mov	r3, r1
 80087e8:	72fb      	strb	r3, [r7, #11]
 80087ea:	4613      	mov	r3, r2
 80087ec:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80087ee:	2300      	movs	r3, #0
 80087f0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80087f2:	2300      	movs	r3, #0
 80087f4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80087fc:	893b      	ldrh	r3, [r7, #8]
 80087fe:	7af9      	ldrb	r1, [r7, #11]
 8008800:	687a      	ldr	r2, [r7, #4]
 8008802:	f7f8 fe54 	bl	80014ae <HAL_PCD_EP_Transmit>
 8008806:	4603      	mov	r3, r0
 8008808:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800880a:	7dfb      	ldrb	r3, [r7, #23]
 800880c:	4618      	mov	r0, r3
 800880e:	f000 f85d 	bl	80088cc <USBD_Get_USB_Status>
 8008812:	4603      	mov	r3, r0
 8008814:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008816:	7dbb      	ldrb	r3, [r7, #22]
}
 8008818:	4618      	mov	r0, r3
 800881a:	3718      	adds	r7, #24
 800881c:	46bd      	mov	sp, r7
 800881e:	bd80      	pop	{r7, pc}

08008820 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008820:	b580      	push	{r7, lr}
 8008822:	b086      	sub	sp, #24
 8008824:	af00      	add	r7, sp, #0
 8008826:	60f8      	str	r0, [r7, #12]
 8008828:	607a      	str	r2, [r7, #4]
 800882a:	461a      	mov	r2, r3
 800882c:	460b      	mov	r3, r1
 800882e:	72fb      	strb	r3, [r7, #11]
 8008830:	4613      	mov	r3, r2
 8008832:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008834:	2300      	movs	r3, #0
 8008836:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008838:	2300      	movs	r3, #0
 800883a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008842:	893b      	ldrh	r3, [r7, #8]
 8008844:	7af9      	ldrb	r1, [r7, #11]
 8008846:	687a      	ldr	r2, [r7, #4]
 8008848:	f7f8 fddd 	bl	8001406 <HAL_PCD_EP_Receive>
 800884c:	4603      	mov	r3, r0
 800884e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008850:	7dfb      	ldrb	r3, [r7, #23]
 8008852:	4618      	mov	r0, r3
 8008854:	f000 f83a 	bl	80088cc <USBD_Get_USB_Status>
 8008858:	4603      	mov	r3, r0
 800885a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800885c:	7dbb      	ldrb	r3, [r7, #22]
}
 800885e:	4618      	mov	r0, r3
 8008860:	3718      	adds	r7, #24
 8008862:	46bd      	mov	sp, r7
 8008864:	bd80      	pop	{r7, pc}

08008866 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008866:	b580      	push	{r7, lr}
 8008868:	b082      	sub	sp, #8
 800886a:	af00      	add	r7, sp, #0
 800886c:	6078      	str	r0, [r7, #4]
 800886e:	460b      	mov	r3, r1
 8008870:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008878:	78fa      	ldrb	r2, [r7, #3]
 800887a:	4611      	mov	r1, r2
 800887c:	4618      	mov	r0, r3
 800887e:	f7f8 fdff 	bl	8001480 <HAL_PCD_EP_GetRxCount>
 8008882:	4603      	mov	r3, r0
}
 8008884:	4618      	mov	r0, r3
 8008886:	3708      	adds	r7, #8
 8008888:	46bd      	mov	sp, r7
 800888a:	bd80      	pop	{r7, pc}

0800888c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800888c:	b480      	push	{r7}
 800888e:	b083      	sub	sp, #12
 8008890:	af00      	add	r7, sp, #0
 8008892:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008894:	4b02      	ldr	r3, [pc, #8]	; (80088a0 <USBD_static_malloc+0x14>)
}
 8008896:	4618      	mov	r0, r3
 8008898:	370c      	adds	r7, #12
 800889a:	46bd      	mov	sp, r7
 800889c:	bc80      	pop	{r7}
 800889e:	4770      	bx	lr
 80088a0:	20001228 	.word	0x20001228

080088a4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80088a4:	b480      	push	{r7}
 80088a6:	b083      	sub	sp, #12
 80088a8:	af00      	add	r7, sp, #0
 80088aa:	6078      	str	r0, [r7, #4]

}
 80088ac:	bf00      	nop
 80088ae:	370c      	adds	r7, #12
 80088b0:	46bd      	mov	sp, r7
 80088b2:	bc80      	pop	{r7}
 80088b4:	4770      	bx	lr

080088b6 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80088b6:	b480      	push	{r7}
 80088b8:	b083      	sub	sp, #12
 80088ba:	af00      	add	r7, sp, #0
 80088bc:	6078      	str	r0, [r7, #4]
 80088be:	460b      	mov	r3, r1
 80088c0:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 80088c2:	bf00      	nop
 80088c4:	370c      	adds	r7, #12
 80088c6:	46bd      	mov	sp, r7
 80088c8:	bc80      	pop	{r7}
 80088ca:	4770      	bx	lr

080088cc <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80088cc:	b480      	push	{r7}
 80088ce:	b085      	sub	sp, #20
 80088d0:	af00      	add	r7, sp, #0
 80088d2:	4603      	mov	r3, r0
 80088d4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80088d6:	2300      	movs	r3, #0
 80088d8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80088da:	79fb      	ldrb	r3, [r7, #7]
 80088dc:	2b03      	cmp	r3, #3
 80088de:	d817      	bhi.n	8008910 <USBD_Get_USB_Status+0x44>
 80088e0:	a201      	add	r2, pc, #4	; (adr r2, 80088e8 <USBD_Get_USB_Status+0x1c>)
 80088e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088e6:	bf00      	nop
 80088e8:	080088f9 	.word	0x080088f9
 80088ec:	080088ff 	.word	0x080088ff
 80088f0:	08008905 	.word	0x08008905
 80088f4:	0800890b 	.word	0x0800890b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80088f8:	2300      	movs	r3, #0
 80088fa:	73fb      	strb	r3, [r7, #15]
    break;
 80088fc:	e00b      	b.n	8008916 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80088fe:	2302      	movs	r3, #2
 8008900:	73fb      	strb	r3, [r7, #15]
    break;
 8008902:	e008      	b.n	8008916 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008904:	2301      	movs	r3, #1
 8008906:	73fb      	strb	r3, [r7, #15]
    break;
 8008908:	e005      	b.n	8008916 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800890a:	2302      	movs	r3, #2
 800890c:	73fb      	strb	r3, [r7, #15]
    break;
 800890e:	e002      	b.n	8008916 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008910:	2302      	movs	r3, #2
 8008912:	73fb      	strb	r3, [r7, #15]
    break;
 8008914:	bf00      	nop
  }
  return usb_status;
 8008916:	7bfb      	ldrb	r3, [r7, #15]
}
 8008918:	4618      	mov	r0, r3
 800891a:	3714      	adds	r7, #20
 800891c:	46bd      	mov	sp, r7
 800891e:	bc80      	pop	{r7}
 8008920:	4770      	bx	lr
 8008922:	bf00      	nop

08008924 <__errno>:
 8008924:	4b01      	ldr	r3, [pc, #4]	; (800892c <__errno+0x8>)
 8008926:	6818      	ldr	r0, [r3, #0]
 8008928:	4770      	bx	lr
 800892a:	bf00      	nop
 800892c:	2000017c 	.word	0x2000017c

08008930 <__libc_init_array>:
 8008930:	b570      	push	{r4, r5, r6, lr}
 8008932:	2600      	movs	r6, #0
 8008934:	4d0c      	ldr	r5, [pc, #48]	; (8008968 <__libc_init_array+0x38>)
 8008936:	4c0d      	ldr	r4, [pc, #52]	; (800896c <__libc_init_array+0x3c>)
 8008938:	1b64      	subs	r4, r4, r5
 800893a:	10a4      	asrs	r4, r4, #2
 800893c:	42a6      	cmp	r6, r4
 800893e:	d109      	bne.n	8008954 <__libc_init_array+0x24>
 8008940:	f000 fc9c 	bl	800927c <_init>
 8008944:	2600      	movs	r6, #0
 8008946:	4d0a      	ldr	r5, [pc, #40]	; (8008970 <__libc_init_array+0x40>)
 8008948:	4c0a      	ldr	r4, [pc, #40]	; (8008974 <__libc_init_array+0x44>)
 800894a:	1b64      	subs	r4, r4, r5
 800894c:	10a4      	asrs	r4, r4, #2
 800894e:	42a6      	cmp	r6, r4
 8008950:	d105      	bne.n	800895e <__libc_init_array+0x2e>
 8008952:	bd70      	pop	{r4, r5, r6, pc}
 8008954:	f855 3b04 	ldr.w	r3, [r5], #4
 8008958:	4798      	blx	r3
 800895a:	3601      	adds	r6, #1
 800895c:	e7ee      	b.n	800893c <__libc_init_array+0xc>
 800895e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008962:	4798      	blx	r3
 8008964:	3601      	adds	r6, #1
 8008966:	e7f2      	b.n	800894e <__libc_init_array+0x1e>
 8008968:	08009334 	.word	0x08009334
 800896c:	08009334 	.word	0x08009334
 8008970:	08009334 	.word	0x08009334
 8008974:	08009338 	.word	0x08009338

08008978 <memset>:
 8008978:	4603      	mov	r3, r0
 800897a:	4402      	add	r2, r0
 800897c:	4293      	cmp	r3, r2
 800897e:	d100      	bne.n	8008982 <memset+0xa>
 8008980:	4770      	bx	lr
 8008982:	f803 1b01 	strb.w	r1, [r3], #1
 8008986:	e7f9      	b.n	800897c <memset+0x4>

08008988 <siprintf>:
 8008988:	b40e      	push	{r1, r2, r3}
 800898a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800898e:	b500      	push	{lr}
 8008990:	b09c      	sub	sp, #112	; 0x70
 8008992:	ab1d      	add	r3, sp, #116	; 0x74
 8008994:	9002      	str	r0, [sp, #8]
 8008996:	9006      	str	r0, [sp, #24]
 8008998:	9107      	str	r1, [sp, #28]
 800899a:	9104      	str	r1, [sp, #16]
 800899c:	4808      	ldr	r0, [pc, #32]	; (80089c0 <siprintf+0x38>)
 800899e:	4909      	ldr	r1, [pc, #36]	; (80089c4 <siprintf+0x3c>)
 80089a0:	f853 2b04 	ldr.w	r2, [r3], #4
 80089a4:	9105      	str	r1, [sp, #20]
 80089a6:	6800      	ldr	r0, [r0, #0]
 80089a8:	a902      	add	r1, sp, #8
 80089aa:	9301      	str	r3, [sp, #4]
 80089ac:	f000 f868 	bl	8008a80 <_svfiprintf_r>
 80089b0:	2200      	movs	r2, #0
 80089b2:	9b02      	ldr	r3, [sp, #8]
 80089b4:	701a      	strb	r2, [r3, #0]
 80089b6:	b01c      	add	sp, #112	; 0x70
 80089b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80089bc:	b003      	add	sp, #12
 80089be:	4770      	bx	lr
 80089c0:	2000017c 	.word	0x2000017c
 80089c4:	ffff0208 	.word	0xffff0208

080089c8 <__ssputs_r>:
 80089c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80089cc:	688e      	ldr	r6, [r1, #8]
 80089ce:	4682      	mov	sl, r0
 80089d0:	429e      	cmp	r6, r3
 80089d2:	460c      	mov	r4, r1
 80089d4:	4690      	mov	r8, r2
 80089d6:	461f      	mov	r7, r3
 80089d8:	d838      	bhi.n	8008a4c <__ssputs_r+0x84>
 80089da:	898a      	ldrh	r2, [r1, #12]
 80089dc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80089e0:	d032      	beq.n	8008a48 <__ssputs_r+0x80>
 80089e2:	6825      	ldr	r5, [r4, #0]
 80089e4:	6909      	ldr	r1, [r1, #16]
 80089e6:	3301      	adds	r3, #1
 80089e8:	eba5 0901 	sub.w	r9, r5, r1
 80089ec:	6965      	ldr	r5, [r4, #20]
 80089ee:	444b      	add	r3, r9
 80089f0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80089f4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80089f8:	106d      	asrs	r5, r5, #1
 80089fa:	429d      	cmp	r5, r3
 80089fc:	bf38      	it	cc
 80089fe:	461d      	movcc	r5, r3
 8008a00:	0553      	lsls	r3, r2, #21
 8008a02:	d531      	bpl.n	8008a68 <__ssputs_r+0xa0>
 8008a04:	4629      	mov	r1, r5
 8008a06:	f000 fb6f 	bl	80090e8 <_malloc_r>
 8008a0a:	4606      	mov	r6, r0
 8008a0c:	b950      	cbnz	r0, 8008a24 <__ssputs_r+0x5c>
 8008a0e:	230c      	movs	r3, #12
 8008a10:	f04f 30ff 	mov.w	r0, #4294967295
 8008a14:	f8ca 3000 	str.w	r3, [sl]
 8008a18:	89a3      	ldrh	r3, [r4, #12]
 8008a1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008a1e:	81a3      	strh	r3, [r4, #12]
 8008a20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a24:	464a      	mov	r2, r9
 8008a26:	6921      	ldr	r1, [r4, #16]
 8008a28:	f000 face 	bl	8008fc8 <memcpy>
 8008a2c:	89a3      	ldrh	r3, [r4, #12]
 8008a2e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008a32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a36:	81a3      	strh	r3, [r4, #12]
 8008a38:	6126      	str	r6, [r4, #16]
 8008a3a:	444e      	add	r6, r9
 8008a3c:	6026      	str	r6, [r4, #0]
 8008a3e:	463e      	mov	r6, r7
 8008a40:	6165      	str	r5, [r4, #20]
 8008a42:	eba5 0509 	sub.w	r5, r5, r9
 8008a46:	60a5      	str	r5, [r4, #8]
 8008a48:	42be      	cmp	r6, r7
 8008a4a:	d900      	bls.n	8008a4e <__ssputs_r+0x86>
 8008a4c:	463e      	mov	r6, r7
 8008a4e:	4632      	mov	r2, r6
 8008a50:	4641      	mov	r1, r8
 8008a52:	6820      	ldr	r0, [r4, #0]
 8008a54:	f000 fac6 	bl	8008fe4 <memmove>
 8008a58:	68a3      	ldr	r3, [r4, #8]
 8008a5a:	2000      	movs	r0, #0
 8008a5c:	1b9b      	subs	r3, r3, r6
 8008a5e:	60a3      	str	r3, [r4, #8]
 8008a60:	6823      	ldr	r3, [r4, #0]
 8008a62:	4433      	add	r3, r6
 8008a64:	6023      	str	r3, [r4, #0]
 8008a66:	e7db      	b.n	8008a20 <__ssputs_r+0x58>
 8008a68:	462a      	mov	r2, r5
 8008a6a:	f000 fbb1 	bl	80091d0 <_realloc_r>
 8008a6e:	4606      	mov	r6, r0
 8008a70:	2800      	cmp	r0, #0
 8008a72:	d1e1      	bne.n	8008a38 <__ssputs_r+0x70>
 8008a74:	4650      	mov	r0, sl
 8008a76:	6921      	ldr	r1, [r4, #16]
 8008a78:	f000 face 	bl	8009018 <_free_r>
 8008a7c:	e7c7      	b.n	8008a0e <__ssputs_r+0x46>
	...

08008a80 <_svfiprintf_r>:
 8008a80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a84:	4698      	mov	r8, r3
 8008a86:	898b      	ldrh	r3, [r1, #12]
 8008a88:	4607      	mov	r7, r0
 8008a8a:	061b      	lsls	r3, r3, #24
 8008a8c:	460d      	mov	r5, r1
 8008a8e:	4614      	mov	r4, r2
 8008a90:	b09d      	sub	sp, #116	; 0x74
 8008a92:	d50e      	bpl.n	8008ab2 <_svfiprintf_r+0x32>
 8008a94:	690b      	ldr	r3, [r1, #16]
 8008a96:	b963      	cbnz	r3, 8008ab2 <_svfiprintf_r+0x32>
 8008a98:	2140      	movs	r1, #64	; 0x40
 8008a9a:	f000 fb25 	bl	80090e8 <_malloc_r>
 8008a9e:	6028      	str	r0, [r5, #0]
 8008aa0:	6128      	str	r0, [r5, #16]
 8008aa2:	b920      	cbnz	r0, 8008aae <_svfiprintf_r+0x2e>
 8008aa4:	230c      	movs	r3, #12
 8008aa6:	603b      	str	r3, [r7, #0]
 8008aa8:	f04f 30ff 	mov.w	r0, #4294967295
 8008aac:	e0d1      	b.n	8008c52 <_svfiprintf_r+0x1d2>
 8008aae:	2340      	movs	r3, #64	; 0x40
 8008ab0:	616b      	str	r3, [r5, #20]
 8008ab2:	2300      	movs	r3, #0
 8008ab4:	9309      	str	r3, [sp, #36]	; 0x24
 8008ab6:	2320      	movs	r3, #32
 8008ab8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008abc:	2330      	movs	r3, #48	; 0x30
 8008abe:	f04f 0901 	mov.w	r9, #1
 8008ac2:	f8cd 800c 	str.w	r8, [sp, #12]
 8008ac6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008c6c <_svfiprintf_r+0x1ec>
 8008aca:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008ace:	4623      	mov	r3, r4
 8008ad0:	469a      	mov	sl, r3
 8008ad2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008ad6:	b10a      	cbz	r2, 8008adc <_svfiprintf_r+0x5c>
 8008ad8:	2a25      	cmp	r2, #37	; 0x25
 8008ada:	d1f9      	bne.n	8008ad0 <_svfiprintf_r+0x50>
 8008adc:	ebba 0b04 	subs.w	fp, sl, r4
 8008ae0:	d00b      	beq.n	8008afa <_svfiprintf_r+0x7a>
 8008ae2:	465b      	mov	r3, fp
 8008ae4:	4622      	mov	r2, r4
 8008ae6:	4629      	mov	r1, r5
 8008ae8:	4638      	mov	r0, r7
 8008aea:	f7ff ff6d 	bl	80089c8 <__ssputs_r>
 8008aee:	3001      	adds	r0, #1
 8008af0:	f000 80aa 	beq.w	8008c48 <_svfiprintf_r+0x1c8>
 8008af4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008af6:	445a      	add	r2, fp
 8008af8:	9209      	str	r2, [sp, #36]	; 0x24
 8008afa:	f89a 3000 	ldrb.w	r3, [sl]
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	f000 80a2 	beq.w	8008c48 <_svfiprintf_r+0x1c8>
 8008b04:	2300      	movs	r3, #0
 8008b06:	f04f 32ff 	mov.w	r2, #4294967295
 8008b0a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008b0e:	f10a 0a01 	add.w	sl, sl, #1
 8008b12:	9304      	str	r3, [sp, #16]
 8008b14:	9307      	str	r3, [sp, #28]
 8008b16:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008b1a:	931a      	str	r3, [sp, #104]	; 0x68
 8008b1c:	4654      	mov	r4, sl
 8008b1e:	2205      	movs	r2, #5
 8008b20:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b24:	4851      	ldr	r0, [pc, #324]	; (8008c6c <_svfiprintf_r+0x1ec>)
 8008b26:	f000 fa41 	bl	8008fac <memchr>
 8008b2a:	9a04      	ldr	r2, [sp, #16]
 8008b2c:	b9d8      	cbnz	r0, 8008b66 <_svfiprintf_r+0xe6>
 8008b2e:	06d0      	lsls	r0, r2, #27
 8008b30:	bf44      	itt	mi
 8008b32:	2320      	movmi	r3, #32
 8008b34:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008b38:	0711      	lsls	r1, r2, #28
 8008b3a:	bf44      	itt	mi
 8008b3c:	232b      	movmi	r3, #43	; 0x2b
 8008b3e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008b42:	f89a 3000 	ldrb.w	r3, [sl]
 8008b46:	2b2a      	cmp	r3, #42	; 0x2a
 8008b48:	d015      	beq.n	8008b76 <_svfiprintf_r+0xf6>
 8008b4a:	4654      	mov	r4, sl
 8008b4c:	2000      	movs	r0, #0
 8008b4e:	f04f 0c0a 	mov.w	ip, #10
 8008b52:	9a07      	ldr	r2, [sp, #28]
 8008b54:	4621      	mov	r1, r4
 8008b56:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008b5a:	3b30      	subs	r3, #48	; 0x30
 8008b5c:	2b09      	cmp	r3, #9
 8008b5e:	d94e      	bls.n	8008bfe <_svfiprintf_r+0x17e>
 8008b60:	b1b0      	cbz	r0, 8008b90 <_svfiprintf_r+0x110>
 8008b62:	9207      	str	r2, [sp, #28]
 8008b64:	e014      	b.n	8008b90 <_svfiprintf_r+0x110>
 8008b66:	eba0 0308 	sub.w	r3, r0, r8
 8008b6a:	fa09 f303 	lsl.w	r3, r9, r3
 8008b6e:	4313      	orrs	r3, r2
 8008b70:	46a2      	mov	sl, r4
 8008b72:	9304      	str	r3, [sp, #16]
 8008b74:	e7d2      	b.n	8008b1c <_svfiprintf_r+0x9c>
 8008b76:	9b03      	ldr	r3, [sp, #12]
 8008b78:	1d19      	adds	r1, r3, #4
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	9103      	str	r1, [sp, #12]
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	bfbb      	ittet	lt
 8008b82:	425b      	neglt	r3, r3
 8008b84:	f042 0202 	orrlt.w	r2, r2, #2
 8008b88:	9307      	strge	r3, [sp, #28]
 8008b8a:	9307      	strlt	r3, [sp, #28]
 8008b8c:	bfb8      	it	lt
 8008b8e:	9204      	strlt	r2, [sp, #16]
 8008b90:	7823      	ldrb	r3, [r4, #0]
 8008b92:	2b2e      	cmp	r3, #46	; 0x2e
 8008b94:	d10c      	bne.n	8008bb0 <_svfiprintf_r+0x130>
 8008b96:	7863      	ldrb	r3, [r4, #1]
 8008b98:	2b2a      	cmp	r3, #42	; 0x2a
 8008b9a:	d135      	bne.n	8008c08 <_svfiprintf_r+0x188>
 8008b9c:	9b03      	ldr	r3, [sp, #12]
 8008b9e:	3402      	adds	r4, #2
 8008ba0:	1d1a      	adds	r2, r3, #4
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	9203      	str	r2, [sp, #12]
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	bfb8      	it	lt
 8008baa:	f04f 33ff 	movlt.w	r3, #4294967295
 8008bae:	9305      	str	r3, [sp, #20]
 8008bb0:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8008c70 <_svfiprintf_r+0x1f0>
 8008bb4:	2203      	movs	r2, #3
 8008bb6:	4650      	mov	r0, sl
 8008bb8:	7821      	ldrb	r1, [r4, #0]
 8008bba:	f000 f9f7 	bl	8008fac <memchr>
 8008bbe:	b140      	cbz	r0, 8008bd2 <_svfiprintf_r+0x152>
 8008bc0:	2340      	movs	r3, #64	; 0x40
 8008bc2:	eba0 000a 	sub.w	r0, r0, sl
 8008bc6:	fa03 f000 	lsl.w	r0, r3, r0
 8008bca:	9b04      	ldr	r3, [sp, #16]
 8008bcc:	3401      	adds	r4, #1
 8008bce:	4303      	orrs	r3, r0
 8008bd0:	9304      	str	r3, [sp, #16]
 8008bd2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008bd6:	2206      	movs	r2, #6
 8008bd8:	4826      	ldr	r0, [pc, #152]	; (8008c74 <_svfiprintf_r+0x1f4>)
 8008bda:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008bde:	f000 f9e5 	bl	8008fac <memchr>
 8008be2:	2800      	cmp	r0, #0
 8008be4:	d038      	beq.n	8008c58 <_svfiprintf_r+0x1d8>
 8008be6:	4b24      	ldr	r3, [pc, #144]	; (8008c78 <_svfiprintf_r+0x1f8>)
 8008be8:	bb1b      	cbnz	r3, 8008c32 <_svfiprintf_r+0x1b2>
 8008bea:	9b03      	ldr	r3, [sp, #12]
 8008bec:	3307      	adds	r3, #7
 8008bee:	f023 0307 	bic.w	r3, r3, #7
 8008bf2:	3308      	adds	r3, #8
 8008bf4:	9303      	str	r3, [sp, #12]
 8008bf6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008bf8:	4433      	add	r3, r6
 8008bfa:	9309      	str	r3, [sp, #36]	; 0x24
 8008bfc:	e767      	b.n	8008ace <_svfiprintf_r+0x4e>
 8008bfe:	460c      	mov	r4, r1
 8008c00:	2001      	movs	r0, #1
 8008c02:	fb0c 3202 	mla	r2, ip, r2, r3
 8008c06:	e7a5      	b.n	8008b54 <_svfiprintf_r+0xd4>
 8008c08:	2300      	movs	r3, #0
 8008c0a:	f04f 0c0a 	mov.w	ip, #10
 8008c0e:	4619      	mov	r1, r3
 8008c10:	3401      	adds	r4, #1
 8008c12:	9305      	str	r3, [sp, #20]
 8008c14:	4620      	mov	r0, r4
 8008c16:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008c1a:	3a30      	subs	r2, #48	; 0x30
 8008c1c:	2a09      	cmp	r2, #9
 8008c1e:	d903      	bls.n	8008c28 <_svfiprintf_r+0x1a8>
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d0c5      	beq.n	8008bb0 <_svfiprintf_r+0x130>
 8008c24:	9105      	str	r1, [sp, #20]
 8008c26:	e7c3      	b.n	8008bb0 <_svfiprintf_r+0x130>
 8008c28:	4604      	mov	r4, r0
 8008c2a:	2301      	movs	r3, #1
 8008c2c:	fb0c 2101 	mla	r1, ip, r1, r2
 8008c30:	e7f0      	b.n	8008c14 <_svfiprintf_r+0x194>
 8008c32:	ab03      	add	r3, sp, #12
 8008c34:	9300      	str	r3, [sp, #0]
 8008c36:	462a      	mov	r2, r5
 8008c38:	4638      	mov	r0, r7
 8008c3a:	4b10      	ldr	r3, [pc, #64]	; (8008c7c <_svfiprintf_r+0x1fc>)
 8008c3c:	a904      	add	r1, sp, #16
 8008c3e:	f3af 8000 	nop.w
 8008c42:	1c42      	adds	r2, r0, #1
 8008c44:	4606      	mov	r6, r0
 8008c46:	d1d6      	bne.n	8008bf6 <_svfiprintf_r+0x176>
 8008c48:	89ab      	ldrh	r3, [r5, #12]
 8008c4a:	065b      	lsls	r3, r3, #25
 8008c4c:	f53f af2c 	bmi.w	8008aa8 <_svfiprintf_r+0x28>
 8008c50:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008c52:	b01d      	add	sp, #116	; 0x74
 8008c54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c58:	ab03      	add	r3, sp, #12
 8008c5a:	9300      	str	r3, [sp, #0]
 8008c5c:	462a      	mov	r2, r5
 8008c5e:	4638      	mov	r0, r7
 8008c60:	4b06      	ldr	r3, [pc, #24]	; (8008c7c <_svfiprintf_r+0x1fc>)
 8008c62:	a904      	add	r1, sp, #16
 8008c64:	f000 f87c 	bl	8008d60 <_printf_i>
 8008c68:	e7eb      	b.n	8008c42 <_svfiprintf_r+0x1c2>
 8008c6a:	bf00      	nop
 8008c6c:	08009300 	.word	0x08009300
 8008c70:	08009306 	.word	0x08009306
 8008c74:	0800930a 	.word	0x0800930a
 8008c78:	00000000 	.word	0x00000000
 8008c7c:	080089c9 	.word	0x080089c9

08008c80 <_printf_common>:
 8008c80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c84:	4616      	mov	r6, r2
 8008c86:	4699      	mov	r9, r3
 8008c88:	688a      	ldr	r2, [r1, #8]
 8008c8a:	690b      	ldr	r3, [r1, #16]
 8008c8c:	4607      	mov	r7, r0
 8008c8e:	4293      	cmp	r3, r2
 8008c90:	bfb8      	it	lt
 8008c92:	4613      	movlt	r3, r2
 8008c94:	6033      	str	r3, [r6, #0]
 8008c96:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008c9a:	460c      	mov	r4, r1
 8008c9c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008ca0:	b10a      	cbz	r2, 8008ca6 <_printf_common+0x26>
 8008ca2:	3301      	adds	r3, #1
 8008ca4:	6033      	str	r3, [r6, #0]
 8008ca6:	6823      	ldr	r3, [r4, #0]
 8008ca8:	0699      	lsls	r1, r3, #26
 8008caa:	bf42      	ittt	mi
 8008cac:	6833      	ldrmi	r3, [r6, #0]
 8008cae:	3302      	addmi	r3, #2
 8008cb0:	6033      	strmi	r3, [r6, #0]
 8008cb2:	6825      	ldr	r5, [r4, #0]
 8008cb4:	f015 0506 	ands.w	r5, r5, #6
 8008cb8:	d106      	bne.n	8008cc8 <_printf_common+0x48>
 8008cba:	f104 0a19 	add.w	sl, r4, #25
 8008cbe:	68e3      	ldr	r3, [r4, #12]
 8008cc0:	6832      	ldr	r2, [r6, #0]
 8008cc2:	1a9b      	subs	r3, r3, r2
 8008cc4:	42ab      	cmp	r3, r5
 8008cc6:	dc28      	bgt.n	8008d1a <_printf_common+0x9a>
 8008cc8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008ccc:	1e13      	subs	r3, r2, #0
 8008cce:	6822      	ldr	r2, [r4, #0]
 8008cd0:	bf18      	it	ne
 8008cd2:	2301      	movne	r3, #1
 8008cd4:	0692      	lsls	r2, r2, #26
 8008cd6:	d42d      	bmi.n	8008d34 <_printf_common+0xb4>
 8008cd8:	4649      	mov	r1, r9
 8008cda:	4638      	mov	r0, r7
 8008cdc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008ce0:	47c0      	blx	r8
 8008ce2:	3001      	adds	r0, #1
 8008ce4:	d020      	beq.n	8008d28 <_printf_common+0xa8>
 8008ce6:	6823      	ldr	r3, [r4, #0]
 8008ce8:	68e5      	ldr	r5, [r4, #12]
 8008cea:	f003 0306 	and.w	r3, r3, #6
 8008cee:	2b04      	cmp	r3, #4
 8008cf0:	bf18      	it	ne
 8008cf2:	2500      	movne	r5, #0
 8008cf4:	6832      	ldr	r2, [r6, #0]
 8008cf6:	f04f 0600 	mov.w	r6, #0
 8008cfa:	68a3      	ldr	r3, [r4, #8]
 8008cfc:	bf08      	it	eq
 8008cfe:	1aad      	subeq	r5, r5, r2
 8008d00:	6922      	ldr	r2, [r4, #16]
 8008d02:	bf08      	it	eq
 8008d04:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008d08:	4293      	cmp	r3, r2
 8008d0a:	bfc4      	itt	gt
 8008d0c:	1a9b      	subgt	r3, r3, r2
 8008d0e:	18ed      	addgt	r5, r5, r3
 8008d10:	341a      	adds	r4, #26
 8008d12:	42b5      	cmp	r5, r6
 8008d14:	d11a      	bne.n	8008d4c <_printf_common+0xcc>
 8008d16:	2000      	movs	r0, #0
 8008d18:	e008      	b.n	8008d2c <_printf_common+0xac>
 8008d1a:	2301      	movs	r3, #1
 8008d1c:	4652      	mov	r2, sl
 8008d1e:	4649      	mov	r1, r9
 8008d20:	4638      	mov	r0, r7
 8008d22:	47c0      	blx	r8
 8008d24:	3001      	adds	r0, #1
 8008d26:	d103      	bne.n	8008d30 <_printf_common+0xb0>
 8008d28:	f04f 30ff 	mov.w	r0, #4294967295
 8008d2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d30:	3501      	adds	r5, #1
 8008d32:	e7c4      	b.n	8008cbe <_printf_common+0x3e>
 8008d34:	2030      	movs	r0, #48	; 0x30
 8008d36:	18e1      	adds	r1, r4, r3
 8008d38:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008d3c:	1c5a      	adds	r2, r3, #1
 8008d3e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008d42:	4422      	add	r2, r4
 8008d44:	3302      	adds	r3, #2
 8008d46:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008d4a:	e7c5      	b.n	8008cd8 <_printf_common+0x58>
 8008d4c:	2301      	movs	r3, #1
 8008d4e:	4622      	mov	r2, r4
 8008d50:	4649      	mov	r1, r9
 8008d52:	4638      	mov	r0, r7
 8008d54:	47c0      	blx	r8
 8008d56:	3001      	adds	r0, #1
 8008d58:	d0e6      	beq.n	8008d28 <_printf_common+0xa8>
 8008d5a:	3601      	adds	r6, #1
 8008d5c:	e7d9      	b.n	8008d12 <_printf_common+0x92>
	...

08008d60 <_printf_i>:
 8008d60:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008d64:	7e0f      	ldrb	r7, [r1, #24]
 8008d66:	4691      	mov	r9, r2
 8008d68:	2f78      	cmp	r7, #120	; 0x78
 8008d6a:	4680      	mov	r8, r0
 8008d6c:	460c      	mov	r4, r1
 8008d6e:	469a      	mov	sl, r3
 8008d70:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008d72:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008d76:	d807      	bhi.n	8008d88 <_printf_i+0x28>
 8008d78:	2f62      	cmp	r7, #98	; 0x62
 8008d7a:	d80a      	bhi.n	8008d92 <_printf_i+0x32>
 8008d7c:	2f00      	cmp	r7, #0
 8008d7e:	f000 80d9 	beq.w	8008f34 <_printf_i+0x1d4>
 8008d82:	2f58      	cmp	r7, #88	; 0x58
 8008d84:	f000 80a4 	beq.w	8008ed0 <_printf_i+0x170>
 8008d88:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008d8c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008d90:	e03a      	b.n	8008e08 <_printf_i+0xa8>
 8008d92:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008d96:	2b15      	cmp	r3, #21
 8008d98:	d8f6      	bhi.n	8008d88 <_printf_i+0x28>
 8008d9a:	a101      	add	r1, pc, #4	; (adr r1, 8008da0 <_printf_i+0x40>)
 8008d9c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008da0:	08008df9 	.word	0x08008df9
 8008da4:	08008e0d 	.word	0x08008e0d
 8008da8:	08008d89 	.word	0x08008d89
 8008dac:	08008d89 	.word	0x08008d89
 8008db0:	08008d89 	.word	0x08008d89
 8008db4:	08008d89 	.word	0x08008d89
 8008db8:	08008e0d 	.word	0x08008e0d
 8008dbc:	08008d89 	.word	0x08008d89
 8008dc0:	08008d89 	.word	0x08008d89
 8008dc4:	08008d89 	.word	0x08008d89
 8008dc8:	08008d89 	.word	0x08008d89
 8008dcc:	08008f1b 	.word	0x08008f1b
 8008dd0:	08008e3d 	.word	0x08008e3d
 8008dd4:	08008efd 	.word	0x08008efd
 8008dd8:	08008d89 	.word	0x08008d89
 8008ddc:	08008d89 	.word	0x08008d89
 8008de0:	08008f3d 	.word	0x08008f3d
 8008de4:	08008d89 	.word	0x08008d89
 8008de8:	08008e3d 	.word	0x08008e3d
 8008dec:	08008d89 	.word	0x08008d89
 8008df0:	08008d89 	.word	0x08008d89
 8008df4:	08008f05 	.word	0x08008f05
 8008df8:	682b      	ldr	r3, [r5, #0]
 8008dfa:	1d1a      	adds	r2, r3, #4
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	602a      	str	r2, [r5, #0]
 8008e00:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008e04:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008e08:	2301      	movs	r3, #1
 8008e0a:	e0a4      	b.n	8008f56 <_printf_i+0x1f6>
 8008e0c:	6820      	ldr	r0, [r4, #0]
 8008e0e:	6829      	ldr	r1, [r5, #0]
 8008e10:	0606      	lsls	r6, r0, #24
 8008e12:	f101 0304 	add.w	r3, r1, #4
 8008e16:	d50a      	bpl.n	8008e2e <_printf_i+0xce>
 8008e18:	680e      	ldr	r6, [r1, #0]
 8008e1a:	602b      	str	r3, [r5, #0]
 8008e1c:	2e00      	cmp	r6, #0
 8008e1e:	da03      	bge.n	8008e28 <_printf_i+0xc8>
 8008e20:	232d      	movs	r3, #45	; 0x2d
 8008e22:	4276      	negs	r6, r6
 8008e24:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008e28:	230a      	movs	r3, #10
 8008e2a:	485e      	ldr	r0, [pc, #376]	; (8008fa4 <_printf_i+0x244>)
 8008e2c:	e019      	b.n	8008e62 <_printf_i+0x102>
 8008e2e:	680e      	ldr	r6, [r1, #0]
 8008e30:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008e34:	602b      	str	r3, [r5, #0]
 8008e36:	bf18      	it	ne
 8008e38:	b236      	sxthne	r6, r6
 8008e3a:	e7ef      	b.n	8008e1c <_printf_i+0xbc>
 8008e3c:	682b      	ldr	r3, [r5, #0]
 8008e3e:	6820      	ldr	r0, [r4, #0]
 8008e40:	1d19      	adds	r1, r3, #4
 8008e42:	6029      	str	r1, [r5, #0]
 8008e44:	0601      	lsls	r1, r0, #24
 8008e46:	d501      	bpl.n	8008e4c <_printf_i+0xec>
 8008e48:	681e      	ldr	r6, [r3, #0]
 8008e4a:	e002      	b.n	8008e52 <_printf_i+0xf2>
 8008e4c:	0646      	lsls	r6, r0, #25
 8008e4e:	d5fb      	bpl.n	8008e48 <_printf_i+0xe8>
 8008e50:	881e      	ldrh	r6, [r3, #0]
 8008e52:	2f6f      	cmp	r7, #111	; 0x6f
 8008e54:	bf0c      	ite	eq
 8008e56:	2308      	moveq	r3, #8
 8008e58:	230a      	movne	r3, #10
 8008e5a:	4852      	ldr	r0, [pc, #328]	; (8008fa4 <_printf_i+0x244>)
 8008e5c:	2100      	movs	r1, #0
 8008e5e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008e62:	6865      	ldr	r5, [r4, #4]
 8008e64:	2d00      	cmp	r5, #0
 8008e66:	bfa8      	it	ge
 8008e68:	6821      	ldrge	r1, [r4, #0]
 8008e6a:	60a5      	str	r5, [r4, #8]
 8008e6c:	bfa4      	itt	ge
 8008e6e:	f021 0104 	bicge.w	r1, r1, #4
 8008e72:	6021      	strge	r1, [r4, #0]
 8008e74:	b90e      	cbnz	r6, 8008e7a <_printf_i+0x11a>
 8008e76:	2d00      	cmp	r5, #0
 8008e78:	d04d      	beq.n	8008f16 <_printf_i+0x1b6>
 8008e7a:	4615      	mov	r5, r2
 8008e7c:	fbb6 f1f3 	udiv	r1, r6, r3
 8008e80:	fb03 6711 	mls	r7, r3, r1, r6
 8008e84:	5dc7      	ldrb	r7, [r0, r7]
 8008e86:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008e8a:	4637      	mov	r7, r6
 8008e8c:	42bb      	cmp	r3, r7
 8008e8e:	460e      	mov	r6, r1
 8008e90:	d9f4      	bls.n	8008e7c <_printf_i+0x11c>
 8008e92:	2b08      	cmp	r3, #8
 8008e94:	d10b      	bne.n	8008eae <_printf_i+0x14e>
 8008e96:	6823      	ldr	r3, [r4, #0]
 8008e98:	07de      	lsls	r6, r3, #31
 8008e9a:	d508      	bpl.n	8008eae <_printf_i+0x14e>
 8008e9c:	6923      	ldr	r3, [r4, #16]
 8008e9e:	6861      	ldr	r1, [r4, #4]
 8008ea0:	4299      	cmp	r1, r3
 8008ea2:	bfde      	ittt	le
 8008ea4:	2330      	movle	r3, #48	; 0x30
 8008ea6:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008eaa:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008eae:	1b52      	subs	r2, r2, r5
 8008eb0:	6122      	str	r2, [r4, #16]
 8008eb2:	464b      	mov	r3, r9
 8008eb4:	4621      	mov	r1, r4
 8008eb6:	4640      	mov	r0, r8
 8008eb8:	f8cd a000 	str.w	sl, [sp]
 8008ebc:	aa03      	add	r2, sp, #12
 8008ebe:	f7ff fedf 	bl	8008c80 <_printf_common>
 8008ec2:	3001      	adds	r0, #1
 8008ec4:	d14c      	bne.n	8008f60 <_printf_i+0x200>
 8008ec6:	f04f 30ff 	mov.w	r0, #4294967295
 8008eca:	b004      	add	sp, #16
 8008ecc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ed0:	4834      	ldr	r0, [pc, #208]	; (8008fa4 <_printf_i+0x244>)
 8008ed2:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008ed6:	6829      	ldr	r1, [r5, #0]
 8008ed8:	6823      	ldr	r3, [r4, #0]
 8008eda:	f851 6b04 	ldr.w	r6, [r1], #4
 8008ede:	6029      	str	r1, [r5, #0]
 8008ee0:	061d      	lsls	r5, r3, #24
 8008ee2:	d514      	bpl.n	8008f0e <_printf_i+0x1ae>
 8008ee4:	07df      	lsls	r7, r3, #31
 8008ee6:	bf44      	itt	mi
 8008ee8:	f043 0320 	orrmi.w	r3, r3, #32
 8008eec:	6023      	strmi	r3, [r4, #0]
 8008eee:	b91e      	cbnz	r6, 8008ef8 <_printf_i+0x198>
 8008ef0:	6823      	ldr	r3, [r4, #0]
 8008ef2:	f023 0320 	bic.w	r3, r3, #32
 8008ef6:	6023      	str	r3, [r4, #0]
 8008ef8:	2310      	movs	r3, #16
 8008efa:	e7af      	b.n	8008e5c <_printf_i+0xfc>
 8008efc:	6823      	ldr	r3, [r4, #0]
 8008efe:	f043 0320 	orr.w	r3, r3, #32
 8008f02:	6023      	str	r3, [r4, #0]
 8008f04:	2378      	movs	r3, #120	; 0x78
 8008f06:	4828      	ldr	r0, [pc, #160]	; (8008fa8 <_printf_i+0x248>)
 8008f08:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008f0c:	e7e3      	b.n	8008ed6 <_printf_i+0x176>
 8008f0e:	0659      	lsls	r1, r3, #25
 8008f10:	bf48      	it	mi
 8008f12:	b2b6      	uxthmi	r6, r6
 8008f14:	e7e6      	b.n	8008ee4 <_printf_i+0x184>
 8008f16:	4615      	mov	r5, r2
 8008f18:	e7bb      	b.n	8008e92 <_printf_i+0x132>
 8008f1a:	682b      	ldr	r3, [r5, #0]
 8008f1c:	6826      	ldr	r6, [r4, #0]
 8008f1e:	1d18      	adds	r0, r3, #4
 8008f20:	6961      	ldr	r1, [r4, #20]
 8008f22:	6028      	str	r0, [r5, #0]
 8008f24:	0635      	lsls	r5, r6, #24
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	d501      	bpl.n	8008f2e <_printf_i+0x1ce>
 8008f2a:	6019      	str	r1, [r3, #0]
 8008f2c:	e002      	b.n	8008f34 <_printf_i+0x1d4>
 8008f2e:	0670      	lsls	r0, r6, #25
 8008f30:	d5fb      	bpl.n	8008f2a <_printf_i+0x1ca>
 8008f32:	8019      	strh	r1, [r3, #0]
 8008f34:	2300      	movs	r3, #0
 8008f36:	4615      	mov	r5, r2
 8008f38:	6123      	str	r3, [r4, #16]
 8008f3a:	e7ba      	b.n	8008eb2 <_printf_i+0x152>
 8008f3c:	682b      	ldr	r3, [r5, #0]
 8008f3e:	2100      	movs	r1, #0
 8008f40:	1d1a      	adds	r2, r3, #4
 8008f42:	602a      	str	r2, [r5, #0]
 8008f44:	681d      	ldr	r5, [r3, #0]
 8008f46:	6862      	ldr	r2, [r4, #4]
 8008f48:	4628      	mov	r0, r5
 8008f4a:	f000 f82f 	bl	8008fac <memchr>
 8008f4e:	b108      	cbz	r0, 8008f54 <_printf_i+0x1f4>
 8008f50:	1b40      	subs	r0, r0, r5
 8008f52:	6060      	str	r0, [r4, #4]
 8008f54:	6863      	ldr	r3, [r4, #4]
 8008f56:	6123      	str	r3, [r4, #16]
 8008f58:	2300      	movs	r3, #0
 8008f5a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008f5e:	e7a8      	b.n	8008eb2 <_printf_i+0x152>
 8008f60:	462a      	mov	r2, r5
 8008f62:	4649      	mov	r1, r9
 8008f64:	4640      	mov	r0, r8
 8008f66:	6923      	ldr	r3, [r4, #16]
 8008f68:	47d0      	blx	sl
 8008f6a:	3001      	adds	r0, #1
 8008f6c:	d0ab      	beq.n	8008ec6 <_printf_i+0x166>
 8008f6e:	6823      	ldr	r3, [r4, #0]
 8008f70:	079b      	lsls	r3, r3, #30
 8008f72:	d413      	bmi.n	8008f9c <_printf_i+0x23c>
 8008f74:	68e0      	ldr	r0, [r4, #12]
 8008f76:	9b03      	ldr	r3, [sp, #12]
 8008f78:	4298      	cmp	r0, r3
 8008f7a:	bfb8      	it	lt
 8008f7c:	4618      	movlt	r0, r3
 8008f7e:	e7a4      	b.n	8008eca <_printf_i+0x16a>
 8008f80:	2301      	movs	r3, #1
 8008f82:	4632      	mov	r2, r6
 8008f84:	4649      	mov	r1, r9
 8008f86:	4640      	mov	r0, r8
 8008f88:	47d0      	blx	sl
 8008f8a:	3001      	adds	r0, #1
 8008f8c:	d09b      	beq.n	8008ec6 <_printf_i+0x166>
 8008f8e:	3501      	adds	r5, #1
 8008f90:	68e3      	ldr	r3, [r4, #12]
 8008f92:	9903      	ldr	r1, [sp, #12]
 8008f94:	1a5b      	subs	r3, r3, r1
 8008f96:	42ab      	cmp	r3, r5
 8008f98:	dcf2      	bgt.n	8008f80 <_printf_i+0x220>
 8008f9a:	e7eb      	b.n	8008f74 <_printf_i+0x214>
 8008f9c:	2500      	movs	r5, #0
 8008f9e:	f104 0619 	add.w	r6, r4, #25
 8008fa2:	e7f5      	b.n	8008f90 <_printf_i+0x230>
 8008fa4:	08009311 	.word	0x08009311
 8008fa8:	08009322 	.word	0x08009322

08008fac <memchr>:
 8008fac:	4603      	mov	r3, r0
 8008fae:	b510      	push	{r4, lr}
 8008fb0:	b2c9      	uxtb	r1, r1
 8008fb2:	4402      	add	r2, r0
 8008fb4:	4293      	cmp	r3, r2
 8008fb6:	4618      	mov	r0, r3
 8008fb8:	d101      	bne.n	8008fbe <memchr+0x12>
 8008fba:	2000      	movs	r0, #0
 8008fbc:	e003      	b.n	8008fc6 <memchr+0x1a>
 8008fbe:	7804      	ldrb	r4, [r0, #0]
 8008fc0:	3301      	adds	r3, #1
 8008fc2:	428c      	cmp	r4, r1
 8008fc4:	d1f6      	bne.n	8008fb4 <memchr+0x8>
 8008fc6:	bd10      	pop	{r4, pc}

08008fc8 <memcpy>:
 8008fc8:	440a      	add	r2, r1
 8008fca:	4291      	cmp	r1, r2
 8008fcc:	f100 33ff 	add.w	r3, r0, #4294967295
 8008fd0:	d100      	bne.n	8008fd4 <memcpy+0xc>
 8008fd2:	4770      	bx	lr
 8008fd4:	b510      	push	{r4, lr}
 8008fd6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008fda:	4291      	cmp	r1, r2
 8008fdc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008fe0:	d1f9      	bne.n	8008fd6 <memcpy+0xe>
 8008fe2:	bd10      	pop	{r4, pc}

08008fe4 <memmove>:
 8008fe4:	4288      	cmp	r0, r1
 8008fe6:	b510      	push	{r4, lr}
 8008fe8:	eb01 0402 	add.w	r4, r1, r2
 8008fec:	d902      	bls.n	8008ff4 <memmove+0x10>
 8008fee:	4284      	cmp	r4, r0
 8008ff0:	4623      	mov	r3, r4
 8008ff2:	d807      	bhi.n	8009004 <memmove+0x20>
 8008ff4:	1e43      	subs	r3, r0, #1
 8008ff6:	42a1      	cmp	r1, r4
 8008ff8:	d008      	beq.n	800900c <memmove+0x28>
 8008ffa:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008ffe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009002:	e7f8      	b.n	8008ff6 <memmove+0x12>
 8009004:	4601      	mov	r1, r0
 8009006:	4402      	add	r2, r0
 8009008:	428a      	cmp	r2, r1
 800900a:	d100      	bne.n	800900e <memmove+0x2a>
 800900c:	bd10      	pop	{r4, pc}
 800900e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009012:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009016:	e7f7      	b.n	8009008 <memmove+0x24>

08009018 <_free_r>:
 8009018:	b538      	push	{r3, r4, r5, lr}
 800901a:	4605      	mov	r5, r0
 800901c:	2900      	cmp	r1, #0
 800901e:	d040      	beq.n	80090a2 <_free_r+0x8a>
 8009020:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009024:	1f0c      	subs	r4, r1, #4
 8009026:	2b00      	cmp	r3, #0
 8009028:	bfb8      	it	lt
 800902a:	18e4      	addlt	r4, r4, r3
 800902c:	f000 f910 	bl	8009250 <__malloc_lock>
 8009030:	4a1c      	ldr	r2, [pc, #112]	; (80090a4 <_free_r+0x8c>)
 8009032:	6813      	ldr	r3, [r2, #0]
 8009034:	b933      	cbnz	r3, 8009044 <_free_r+0x2c>
 8009036:	6063      	str	r3, [r4, #4]
 8009038:	6014      	str	r4, [r2, #0]
 800903a:	4628      	mov	r0, r5
 800903c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009040:	f000 b90c 	b.w	800925c <__malloc_unlock>
 8009044:	42a3      	cmp	r3, r4
 8009046:	d908      	bls.n	800905a <_free_r+0x42>
 8009048:	6820      	ldr	r0, [r4, #0]
 800904a:	1821      	adds	r1, r4, r0
 800904c:	428b      	cmp	r3, r1
 800904e:	bf01      	itttt	eq
 8009050:	6819      	ldreq	r1, [r3, #0]
 8009052:	685b      	ldreq	r3, [r3, #4]
 8009054:	1809      	addeq	r1, r1, r0
 8009056:	6021      	streq	r1, [r4, #0]
 8009058:	e7ed      	b.n	8009036 <_free_r+0x1e>
 800905a:	461a      	mov	r2, r3
 800905c:	685b      	ldr	r3, [r3, #4]
 800905e:	b10b      	cbz	r3, 8009064 <_free_r+0x4c>
 8009060:	42a3      	cmp	r3, r4
 8009062:	d9fa      	bls.n	800905a <_free_r+0x42>
 8009064:	6811      	ldr	r1, [r2, #0]
 8009066:	1850      	adds	r0, r2, r1
 8009068:	42a0      	cmp	r0, r4
 800906a:	d10b      	bne.n	8009084 <_free_r+0x6c>
 800906c:	6820      	ldr	r0, [r4, #0]
 800906e:	4401      	add	r1, r0
 8009070:	1850      	adds	r0, r2, r1
 8009072:	4283      	cmp	r3, r0
 8009074:	6011      	str	r1, [r2, #0]
 8009076:	d1e0      	bne.n	800903a <_free_r+0x22>
 8009078:	6818      	ldr	r0, [r3, #0]
 800907a:	685b      	ldr	r3, [r3, #4]
 800907c:	4401      	add	r1, r0
 800907e:	6011      	str	r1, [r2, #0]
 8009080:	6053      	str	r3, [r2, #4]
 8009082:	e7da      	b.n	800903a <_free_r+0x22>
 8009084:	d902      	bls.n	800908c <_free_r+0x74>
 8009086:	230c      	movs	r3, #12
 8009088:	602b      	str	r3, [r5, #0]
 800908a:	e7d6      	b.n	800903a <_free_r+0x22>
 800908c:	6820      	ldr	r0, [r4, #0]
 800908e:	1821      	adds	r1, r4, r0
 8009090:	428b      	cmp	r3, r1
 8009092:	bf01      	itttt	eq
 8009094:	6819      	ldreq	r1, [r3, #0]
 8009096:	685b      	ldreq	r3, [r3, #4]
 8009098:	1809      	addeq	r1, r1, r0
 800909a:	6021      	streq	r1, [r4, #0]
 800909c:	6063      	str	r3, [r4, #4]
 800909e:	6054      	str	r4, [r2, #4]
 80090a0:	e7cb      	b.n	800903a <_free_r+0x22>
 80090a2:	bd38      	pop	{r3, r4, r5, pc}
 80090a4:	20001448 	.word	0x20001448

080090a8 <sbrk_aligned>:
 80090a8:	b570      	push	{r4, r5, r6, lr}
 80090aa:	4e0e      	ldr	r6, [pc, #56]	; (80090e4 <sbrk_aligned+0x3c>)
 80090ac:	460c      	mov	r4, r1
 80090ae:	6831      	ldr	r1, [r6, #0]
 80090b0:	4605      	mov	r5, r0
 80090b2:	b911      	cbnz	r1, 80090ba <sbrk_aligned+0x12>
 80090b4:	f000 f8bc 	bl	8009230 <_sbrk_r>
 80090b8:	6030      	str	r0, [r6, #0]
 80090ba:	4621      	mov	r1, r4
 80090bc:	4628      	mov	r0, r5
 80090be:	f000 f8b7 	bl	8009230 <_sbrk_r>
 80090c2:	1c43      	adds	r3, r0, #1
 80090c4:	d00a      	beq.n	80090dc <sbrk_aligned+0x34>
 80090c6:	1cc4      	adds	r4, r0, #3
 80090c8:	f024 0403 	bic.w	r4, r4, #3
 80090cc:	42a0      	cmp	r0, r4
 80090ce:	d007      	beq.n	80090e0 <sbrk_aligned+0x38>
 80090d0:	1a21      	subs	r1, r4, r0
 80090d2:	4628      	mov	r0, r5
 80090d4:	f000 f8ac 	bl	8009230 <_sbrk_r>
 80090d8:	3001      	adds	r0, #1
 80090da:	d101      	bne.n	80090e0 <sbrk_aligned+0x38>
 80090dc:	f04f 34ff 	mov.w	r4, #4294967295
 80090e0:	4620      	mov	r0, r4
 80090e2:	bd70      	pop	{r4, r5, r6, pc}
 80090e4:	2000144c 	.word	0x2000144c

080090e8 <_malloc_r>:
 80090e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80090ec:	1ccd      	adds	r5, r1, #3
 80090ee:	f025 0503 	bic.w	r5, r5, #3
 80090f2:	3508      	adds	r5, #8
 80090f4:	2d0c      	cmp	r5, #12
 80090f6:	bf38      	it	cc
 80090f8:	250c      	movcc	r5, #12
 80090fa:	2d00      	cmp	r5, #0
 80090fc:	4607      	mov	r7, r0
 80090fe:	db01      	blt.n	8009104 <_malloc_r+0x1c>
 8009100:	42a9      	cmp	r1, r5
 8009102:	d905      	bls.n	8009110 <_malloc_r+0x28>
 8009104:	230c      	movs	r3, #12
 8009106:	2600      	movs	r6, #0
 8009108:	603b      	str	r3, [r7, #0]
 800910a:	4630      	mov	r0, r6
 800910c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009110:	4e2e      	ldr	r6, [pc, #184]	; (80091cc <_malloc_r+0xe4>)
 8009112:	f000 f89d 	bl	8009250 <__malloc_lock>
 8009116:	6833      	ldr	r3, [r6, #0]
 8009118:	461c      	mov	r4, r3
 800911a:	bb34      	cbnz	r4, 800916a <_malloc_r+0x82>
 800911c:	4629      	mov	r1, r5
 800911e:	4638      	mov	r0, r7
 8009120:	f7ff ffc2 	bl	80090a8 <sbrk_aligned>
 8009124:	1c43      	adds	r3, r0, #1
 8009126:	4604      	mov	r4, r0
 8009128:	d14d      	bne.n	80091c6 <_malloc_r+0xde>
 800912a:	6834      	ldr	r4, [r6, #0]
 800912c:	4626      	mov	r6, r4
 800912e:	2e00      	cmp	r6, #0
 8009130:	d140      	bne.n	80091b4 <_malloc_r+0xcc>
 8009132:	6823      	ldr	r3, [r4, #0]
 8009134:	4631      	mov	r1, r6
 8009136:	4638      	mov	r0, r7
 8009138:	eb04 0803 	add.w	r8, r4, r3
 800913c:	f000 f878 	bl	8009230 <_sbrk_r>
 8009140:	4580      	cmp	r8, r0
 8009142:	d13a      	bne.n	80091ba <_malloc_r+0xd2>
 8009144:	6821      	ldr	r1, [r4, #0]
 8009146:	3503      	adds	r5, #3
 8009148:	1a6d      	subs	r5, r5, r1
 800914a:	f025 0503 	bic.w	r5, r5, #3
 800914e:	3508      	adds	r5, #8
 8009150:	2d0c      	cmp	r5, #12
 8009152:	bf38      	it	cc
 8009154:	250c      	movcc	r5, #12
 8009156:	4638      	mov	r0, r7
 8009158:	4629      	mov	r1, r5
 800915a:	f7ff ffa5 	bl	80090a8 <sbrk_aligned>
 800915e:	3001      	adds	r0, #1
 8009160:	d02b      	beq.n	80091ba <_malloc_r+0xd2>
 8009162:	6823      	ldr	r3, [r4, #0]
 8009164:	442b      	add	r3, r5
 8009166:	6023      	str	r3, [r4, #0]
 8009168:	e00e      	b.n	8009188 <_malloc_r+0xa0>
 800916a:	6822      	ldr	r2, [r4, #0]
 800916c:	1b52      	subs	r2, r2, r5
 800916e:	d41e      	bmi.n	80091ae <_malloc_r+0xc6>
 8009170:	2a0b      	cmp	r2, #11
 8009172:	d916      	bls.n	80091a2 <_malloc_r+0xba>
 8009174:	1961      	adds	r1, r4, r5
 8009176:	42a3      	cmp	r3, r4
 8009178:	6025      	str	r5, [r4, #0]
 800917a:	bf18      	it	ne
 800917c:	6059      	strne	r1, [r3, #4]
 800917e:	6863      	ldr	r3, [r4, #4]
 8009180:	bf08      	it	eq
 8009182:	6031      	streq	r1, [r6, #0]
 8009184:	5162      	str	r2, [r4, r5]
 8009186:	604b      	str	r3, [r1, #4]
 8009188:	4638      	mov	r0, r7
 800918a:	f104 060b 	add.w	r6, r4, #11
 800918e:	f000 f865 	bl	800925c <__malloc_unlock>
 8009192:	f026 0607 	bic.w	r6, r6, #7
 8009196:	1d23      	adds	r3, r4, #4
 8009198:	1af2      	subs	r2, r6, r3
 800919a:	d0b6      	beq.n	800910a <_malloc_r+0x22>
 800919c:	1b9b      	subs	r3, r3, r6
 800919e:	50a3      	str	r3, [r4, r2]
 80091a0:	e7b3      	b.n	800910a <_malloc_r+0x22>
 80091a2:	6862      	ldr	r2, [r4, #4]
 80091a4:	42a3      	cmp	r3, r4
 80091a6:	bf0c      	ite	eq
 80091a8:	6032      	streq	r2, [r6, #0]
 80091aa:	605a      	strne	r2, [r3, #4]
 80091ac:	e7ec      	b.n	8009188 <_malloc_r+0xa0>
 80091ae:	4623      	mov	r3, r4
 80091b0:	6864      	ldr	r4, [r4, #4]
 80091b2:	e7b2      	b.n	800911a <_malloc_r+0x32>
 80091b4:	4634      	mov	r4, r6
 80091b6:	6876      	ldr	r6, [r6, #4]
 80091b8:	e7b9      	b.n	800912e <_malloc_r+0x46>
 80091ba:	230c      	movs	r3, #12
 80091bc:	4638      	mov	r0, r7
 80091be:	603b      	str	r3, [r7, #0]
 80091c0:	f000 f84c 	bl	800925c <__malloc_unlock>
 80091c4:	e7a1      	b.n	800910a <_malloc_r+0x22>
 80091c6:	6025      	str	r5, [r4, #0]
 80091c8:	e7de      	b.n	8009188 <_malloc_r+0xa0>
 80091ca:	bf00      	nop
 80091cc:	20001448 	.word	0x20001448

080091d0 <_realloc_r>:
 80091d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80091d4:	4680      	mov	r8, r0
 80091d6:	4614      	mov	r4, r2
 80091d8:	460e      	mov	r6, r1
 80091da:	b921      	cbnz	r1, 80091e6 <_realloc_r+0x16>
 80091dc:	4611      	mov	r1, r2
 80091de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80091e2:	f7ff bf81 	b.w	80090e8 <_malloc_r>
 80091e6:	b92a      	cbnz	r2, 80091f4 <_realloc_r+0x24>
 80091e8:	f7ff ff16 	bl	8009018 <_free_r>
 80091ec:	4625      	mov	r5, r4
 80091ee:	4628      	mov	r0, r5
 80091f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80091f4:	f000 f838 	bl	8009268 <_malloc_usable_size_r>
 80091f8:	4284      	cmp	r4, r0
 80091fa:	4607      	mov	r7, r0
 80091fc:	d802      	bhi.n	8009204 <_realloc_r+0x34>
 80091fe:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009202:	d812      	bhi.n	800922a <_realloc_r+0x5a>
 8009204:	4621      	mov	r1, r4
 8009206:	4640      	mov	r0, r8
 8009208:	f7ff ff6e 	bl	80090e8 <_malloc_r>
 800920c:	4605      	mov	r5, r0
 800920e:	2800      	cmp	r0, #0
 8009210:	d0ed      	beq.n	80091ee <_realloc_r+0x1e>
 8009212:	42bc      	cmp	r4, r7
 8009214:	4622      	mov	r2, r4
 8009216:	4631      	mov	r1, r6
 8009218:	bf28      	it	cs
 800921a:	463a      	movcs	r2, r7
 800921c:	f7ff fed4 	bl	8008fc8 <memcpy>
 8009220:	4631      	mov	r1, r6
 8009222:	4640      	mov	r0, r8
 8009224:	f7ff fef8 	bl	8009018 <_free_r>
 8009228:	e7e1      	b.n	80091ee <_realloc_r+0x1e>
 800922a:	4635      	mov	r5, r6
 800922c:	e7df      	b.n	80091ee <_realloc_r+0x1e>
	...

08009230 <_sbrk_r>:
 8009230:	b538      	push	{r3, r4, r5, lr}
 8009232:	2300      	movs	r3, #0
 8009234:	4d05      	ldr	r5, [pc, #20]	; (800924c <_sbrk_r+0x1c>)
 8009236:	4604      	mov	r4, r0
 8009238:	4608      	mov	r0, r1
 800923a:	602b      	str	r3, [r5, #0]
 800923c:	f7f7 f9d8 	bl	80005f0 <_sbrk>
 8009240:	1c43      	adds	r3, r0, #1
 8009242:	d102      	bne.n	800924a <_sbrk_r+0x1a>
 8009244:	682b      	ldr	r3, [r5, #0]
 8009246:	b103      	cbz	r3, 800924a <_sbrk_r+0x1a>
 8009248:	6023      	str	r3, [r4, #0]
 800924a:	bd38      	pop	{r3, r4, r5, pc}
 800924c:	20001450 	.word	0x20001450

08009250 <__malloc_lock>:
 8009250:	4801      	ldr	r0, [pc, #4]	; (8009258 <__malloc_lock+0x8>)
 8009252:	f000 b811 	b.w	8009278 <__retarget_lock_acquire_recursive>
 8009256:	bf00      	nop
 8009258:	20001454 	.word	0x20001454

0800925c <__malloc_unlock>:
 800925c:	4801      	ldr	r0, [pc, #4]	; (8009264 <__malloc_unlock+0x8>)
 800925e:	f000 b80c 	b.w	800927a <__retarget_lock_release_recursive>
 8009262:	bf00      	nop
 8009264:	20001454 	.word	0x20001454

08009268 <_malloc_usable_size_r>:
 8009268:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800926c:	1f18      	subs	r0, r3, #4
 800926e:	2b00      	cmp	r3, #0
 8009270:	bfbc      	itt	lt
 8009272:	580b      	ldrlt	r3, [r1, r0]
 8009274:	18c0      	addlt	r0, r0, r3
 8009276:	4770      	bx	lr

08009278 <__retarget_lock_acquire_recursive>:
 8009278:	4770      	bx	lr

0800927a <__retarget_lock_release_recursive>:
 800927a:	4770      	bx	lr

0800927c <_init>:
 800927c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800927e:	bf00      	nop
 8009280:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009282:	bc08      	pop	{r3}
 8009284:	469e      	mov	lr, r3
 8009286:	4770      	bx	lr

08009288 <_fini>:
 8009288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800928a:	bf00      	nop
 800928c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800928e:	bc08      	pop	{r3}
 8009290:	469e      	mov	lr, r3
 8009292:	4770      	bx	lr
